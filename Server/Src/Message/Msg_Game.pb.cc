// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg_Game.proto

#include "Msg_Game.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fGame_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CopyInsItem_Msg_5fGame_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fGame_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HitEffectItem_Msg_5fGame_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemData_Msg_5fBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SkillItem_Msg_5fBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fGame_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransPartnerData_Msg_5fGame_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fGame_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransPetData_Msg_5fGame_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fGame_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransRoleData_Msg_5fGame_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fGame_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TransferDataItem_Msg_5fGame_2eproto;
class GmStopServerReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GmStopServerReq> _instance;
} _GmStopServerReq_default_instance_;
class GmStopServerAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GmStopServerAck> _instance;
} _GmStopServerAck_default_instance_;
class SvrRegToSvrReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SvrRegToSvrReq> _instance;
} _SvrRegToSvrReq_default_instance_;
class SvrRegToSvrAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SvrRegToSvrAck> _instance;
} _SvrRegToSvrAck_default_instance_;
class RoleDisconnectReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleDisconnectReq> _instance;
} _RoleDisconnectReq_default_instance_;
class RoleDisconnectAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleDisconnectAck> _instance;
} _RoleDisconnectAck_default_instance_;
class RoleReconnectReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleReconnectReq> _instance;
} _RoleReconnectReq_default_instance_;
class RoleReconnectAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleReconnectAck> _instance;
} _RoleReconnectAck_default_instance_;
class RemoveConnectNtyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveConnectNty> _instance;
} _RemoveConnectNty_default_instance_;
class CreateNewSceneReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateNewSceneReq> _instance;
} _CreateNewSceneReq_default_instance_;
class CreateNewSceneAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateNewSceneAck> _instance;
} _CreateNewSceneAck_default_instance_;
class EnterSceneReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterSceneReq> _instance;
} _EnterSceneReq_default_instance_;
class EnterSceneAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterSceneAck> _instance;
} _EnterSceneAck_default_instance_;
class BackToCityReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackToCityReq> _instance;
} _BackToCityReq_default_instance_;
class BackToCityAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackToCityAck> _instance;
} _BackToCityAck_default_instance_;
class LeaveSceneReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaveSceneReq> _instance;
} _LeaveSceneReq_default_instance_;
class LeaveSceneAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaveSceneAck> _instance;
} _LeaveSceneAck_default_instance_;
class AbortSceneReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AbortSceneReq> _instance;
} _AbortSceneReq_default_instance_;
class AbortSceneAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AbortSceneAck> _instance;
} _AbortSceneAck_default_instance_;
class AbortSceneNtyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AbortSceneNty> _instance;
} _AbortSceneNty_default_instance_;
class TransRoleDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransRoleData> _instance;
} _TransRoleData_default_instance_;
class TransPetDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransPetData> _instance;
} _TransPetData_default_instance_;
class TransPartnerDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransPartnerData> _instance;
} _TransPartnerData_default_instance_;
class TransferDataItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferDataItem> _instance;
} _TransferDataItem_default_instance_;
class TransferDataReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferDataReq> _instance;
} _TransferDataReq_default_instance_;
class TransferDataAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferDataAck> _instance;
} _TransferDataAck_default_instance_;
class NotifyIntoSceneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NotifyIntoScene> _instance;
} _NotifyIntoScene_default_instance_;
class NearByRoleItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NearByRoleItem> _instance;
} _NearByRoleItem_default_instance_;
class CopyInsItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CopyInsItem> _instance;
} _CopyInsItem_default_instance_;
class CopyReportReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CopyReportReq> _instance;
} _CopyReportReq_default_instance_;
class UseHpBottleReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseHpBottleReq> _instance;
} _UseHpBottleReq_default_instance_;
class UseHpBottleAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseHpBottleAck> _instance;
} _UseHpBottleAck_default_instance_;
class UseMpBottleReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseMpBottleReq> _instance;
} _UseMpBottleReq_default_instance_;
class UseMpBottleAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseMpBottleAck> _instance;
} _UseMpBottleAck_default_instance_;
class ChatMessageReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatMessageReq> _instance;
} _ChatMessageReq_default_instance_;
class ChatMessageAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatMessageAck> _instance;
} _ChatMessageAck_default_instance_;
class ChatMessageNtyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatMessageNty> _instance;
} _ChatMessageNty_default_instance_;
class CommonReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommonReq> _instance;
} _CommonReq_default_instance_;
class CommonAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommonAck> _instance;
} _CommonAck_default_instance_;
class BroadMessageNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadMessageNotify> _instance;
} _BroadMessageNotify_default_instance_;
class LogicRegToLoginReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogicRegToLoginReq> _instance;
} _LogicRegToLoginReq_default_instance_;
class LogicRegToLoginAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogicRegToLoginAck> _instance;
} _LogicRegToLoginAck_default_instance_;
class LogicRegToDbSvrReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogicRegToDbSvrReq> _instance;
} _LogicRegToDbSvrReq_default_instance_;
class LogicRegToDbSvrAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogicRegToDbSvrAck> _instance;
} _LogicRegToDbSvrAck_default_instance_;
class LogicUpdateInfoReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogicUpdateInfoReq> _instance;
} _LogicUpdateInfoReq_default_instance_;
class LogicUpdateInfoAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogicUpdateInfoAck> _instance;
} _LogicUpdateInfoAck_default_instance_;
class SetupEquipReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetupEquipReq> _instance;
} _SetupEquipReq_default_instance_;
class SetupEquipAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetupEquipAck> _instance;
} _SetupEquipAck_default_instance_;
class Msg_GiftCodeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_GiftCodeReq> _instance;
} _Msg_GiftCodeReq_default_instance_;
class Msg_GiftCodeAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_GiftCodeAck> _instance;
} _Msg_GiftCodeAck_default_instance_;
class UnsetEquipReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsetEquipReq> _instance;
} _UnsetEquipReq_default_instance_;
class UnsetEquipAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsetEquipAck> _instance;
} _UnsetEquipAck_default_instance_;
class SetupGemReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetupGemReq> _instance;
} _SetupGemReq_default_instance_;
class SetupGemAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetupGemAck> _instance;
} _SetupGemAck_default_instance_;
class UnsetGemReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsetGemReq> _instance;
} _UnsetGemReq_default_instance_;
class UnsetGemAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsetGemAck> _instance;
} _UnsetGemAck_default_instance_;
class SetupPartnerReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetupPartnerReq> _instance;
} _SetupPartnerReq_default_instance_;
class SetupPartnerAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetupPartnerAck> _instance;
} _SetupPartnerAck_default_instance_;
class UnsetPartnerReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsetPartnerReq> _instance;
} _UnsetPartnerReq_default_instance_;
class UnsetPartnerAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsetPartnerAck> _instance;
} _UnsetPartnerAck_default_instance_;
class SetupMountReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetupMountReq> _instance;
} _SetupMountReq_default_instance_;
class SetupMountAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetupMountAck> _instance;
} _SetupMountAck_default_instance_;
class UnsetMountReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsetMountReq> _instance;
} _UnsetMountReq_default_instance_;
class UnsetMountAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsetMountAck> _instance;
} _UnsetMountAck_default_instance_;
class SetupPetReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetupPetReq> _instance;
} _SetupPetReq_default_instance_;
class SetupPetAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetupPetAck> _instance;
} _SetupPetAck_default_instance_;
class UnsetPetReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsetPetReq> _instance;
} _UnsetPetReq_default_instance_;
class UnsetPetAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsetPetAck> _instance;
} _UnsetPetAck_default_instance_;
class StoreBuyReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoreBuyReq> _instance;
} _StoreBuyReq_default_instance_;
class StoreBuyAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoreBuyAck> _instance;
} _StoreBuyAck_default_instance_;
class ObjectChangeNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectChangeNotify> _instance;
} _ObjectChangeNotify_default_instance_;
class HitEffectItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HitEffectItem> _instance;
} _HitEffectItem_default_instance_;
class HitEffectNtfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HitEffectNtf> _instance;
} _HitEffectNtf_default_instance_;
class UseItemReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseItemReq> _instance;
} _UseItemReq_default_instance_;
class UseItemAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseItemAck> _instance;
} _UseItemAck_default_instance_;
class MsgGetRandomNameReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgGetRandomNameReq> _instance;
} _MsgGetRandomNameReq_default_instance_;
class MsgGetRandomNameAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgGetRandomNameAck> _instance;
} _MsgGetRandomNameAck_default_instance_;
class Msg_DbErrorCountNtyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_DbErrorCountNty> _instance;
} _Msg_DbErrorCountNty_default_instance_;
class Msg_GameParamReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_GameParamReq> _instance;
} _Msg_GameParamReq_default_instance_;
class Msg_GameParamAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_GameParamAck> _instance;
} _Msg_GameParamAck_default_instance_;
static void InitDefaultsscc_info_AbortSceneAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AbortSceneAck_default_instance_;
    new (ptr) ::AbortSceneAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AbortSceneAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AbortSceneAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AbortSceneAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_AbortSceneNty_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AbortSceneNty_default_instance_;
    new (ptr) ::AbortSceneNty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AbortSceneNty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AbortSceneNty_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AbortSceneNty_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_AbortSceneReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AbortSceneReq_default_instance_;
    new (ptr) ::AbortSceneReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AbortSceneReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AbortSceneReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AbortSceneReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_BackToCityAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BackToCityAck_default_instance_;
    new (ptr) ::BackToCityAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BackToCityAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BackToCityAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BackToCityAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_BackToCityReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BackToCityReq_default_instance_;
    new (ptr) ::BackToCityReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BackToCityReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BackToCityReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BackToCityReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_BroadMessageNotify_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BroadMessageNotify_default_instance_;
    new (ptr) ::BroadMessageNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BroadMessageNotify::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadMessageNotify_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BroadMessageNotify_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_ChatMessageAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChatMessageAck_default_instance_;
    new (ptr) ::ChatMessageAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatMessageAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChatMessageAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_ChatMessageNty_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChatMessageNty_default_instance_;
    new (ptr) ::ChatMessageNty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageNty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatMessageNty_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChatMessageNty_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_ChatMessageReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChatMessageReq_default_instance_;
    new (ptr) ::ChatMessageReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatMessageReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChatMessageReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_CommonAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CommonAck_default_instance_;
    new (ptr) ::CommonAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CommonAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommonAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommonAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_CommonReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CommonReq_default_instance_;
    new (ptr) ::CommonReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CommonReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommonReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommonReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_CopyInsItem_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CopyInsItem_default_instance_;
    new (ptr) ::CopyInsItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CopyInsItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CopyInsItem_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CopyInsItem_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_CopyReportReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CopyReportReq_default_instance_;
    new (ptr) ::CopyReportReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CopyReportReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CopyReportReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CopyReportReq_Msg_5fGame_2eproto}, {
      &scc_info_CopyInsItem_Msg_5fGame_2eproto.base,}};

static void InitDefaultsscc_info_CreateNewSceneAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CreateNewSceneAck_default_instance_;
    new (ptr) ::CreateNewSceneAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CreateNewSceneAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateNewSceneAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateNewSceneAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_CreateNewSceneReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CreateNewSceneReq_default_instance_;
    new (ptr) ::CreateNewSceneReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CreateNewSceneReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateNewSceneReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateNewSceneReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_EnterSceneAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EnterSceneAck_default_instance_;
    new (ptr) ::EnterSceneAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EnterSceneAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnterSceneAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EnterSceneAck_Msg_5fGame_2eproto}, {
      &scc_info_SkillItem_Msg_5fBase_2eproto.base,}};

static void InitDefaultsscc_info_EnterSceneReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EnterSceneReq_default_instance_;
    new (ptr) ::EnterSceneReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EnterSceneReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnterSceneReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnterSceneReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_GmStopServerAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GmStopServerAck_default_instance_;
    new (ptr) ::GmStopServerAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GmStopServerAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GmStopServerAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GmStopServerAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_GmStopServerReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GmStopServerReq_default_instance_;
    new (ptr) ::GmStopServerReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GmStopServerReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GmStopServerReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GmStopServerReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_HitEffectItem_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HitEffectItem_default_instance_;
    new (ptr) ::HitEffectItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HitEffectItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HitEffectItem_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HitEffectItem_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_HitEffectNtf_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HitEffectNtf_default_instance_;
    new (ptr) ::HitEffectNtf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HitEffectNtf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HitEffectNtf_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HitEffectNtf_Msg_5fGame_2eproto}, {
      &scc_info_HitEffectItem_Msg_5fGame_2eproto.base,}};

static void InitDefaultsscc_info_LeaveSceneAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LeaveSceneAck_default_instance_;
    new (ptr) ::LeaveSceneAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LeaveSceneAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaveSceneAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeaveSceneAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_LeaveSceneReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LeaveSceneReq_default_instance_;
    new (ptr) ::LeaveSceneReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LeaveSceneReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaveSceneReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeaveSceneReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_LogicRegToDbSvrAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LogicRegToDbSvrAck_default_instance_;
    new (ptr) ::LogicRegToDbSvrAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicRegToDbSvrAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogicRegToDbSvrAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogicRegToDbSvrAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_LogicRegToDbSvrReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LogicRegToDbSvrReq_default_instance_;
    new (ptr) ::LogicRegToDbSvrReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicRegToDbSvrReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogicRegToDbSvrReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogicRegToDbSvrReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_LogicRegToLoginAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LogicRegToLoginAck_default_instance_;
    new (ptr) ::LogicRegToLoginAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicRegToLoginAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogicRegToLoginAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogicRegToLoginAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_LogicRegToLoginReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LogicRegToLoginReq_default_instance_;
    new (ptr) ::LogicRegToLoginReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicRegToLoginReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogicRegToLoginReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogicRegToLoginReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_LogicUpdateInfoAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LogicUpdateInfoAck_default_instance_;
    new (ptr) ::LogicUpdateInfoAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicUpdateInfoAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogicUpdateInfoAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogicUpdateInfoAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_LogicUpdateInfoReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LogicUpdateInfoReq_default_instance_;
    new (ptr) ::LogicUpdateInfoReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicUpdateInfoReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogicUpdateInfoReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogicUpdateInfoReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_MsgGetRandomNameAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgGetRandomNameAck_default_instance_;
    new (ptr) ::MsgGetRandomNameAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MsgGetRandomNameAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgGetRandomNameAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgGetRandomNameAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_MsgGetRandomNameReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgGetRandomNameReq_default_instance_;
    new (ptr) ::MsgGetRandomNameReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MsgGetRandomNameReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgGetRandomNameReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgGetRandomNameReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_Msg_DbErrorCountNty_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Msg_DbErrorCountNty_default_instance_;
    new (ptr) ::Msg_DbErrorCountNty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Msg_DbErrorCountNty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_DbErrorCountNty_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Msg_DbErrorCountNty_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_Msg_GameParamAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Msg_GameParamAck_default_instance_;
    new (ptr) ::Msg_GameParamAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Msg_GameParamAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_GameParamAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Msg_GameParamAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_Msg_GameParamReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Msg_GameParamReq_default_instance_;
    new (ptr) ::Msg_GameParamReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Msg_GameParamReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_GameParamReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Msg_GameParamReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_Msg_GiftCodeAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Msg_GiftCodeAck_default_instance_;
    new (ptr) ::Msg_GiftCodeAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Msg_GiftCodeAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Msg_GiftCodeAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Msg_GiftCodeAck_Msg_5fGame_2eproto}, {
      &scc_info_ItemData_Msg_5fBase_2eproto.base,}};

static void InitDefaultsscc_info_Msg_GiftCodeReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Msg_GiftCodeReq_default_instance_;
    new (ptr) ::Msg_GiftCodeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Msg_GiftCodeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_GiftCodeReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Msg_GiftCodeReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_NearByRoleItem_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NearByRoleItem_default_instance_;
    new (ptr) ::NearByRoleItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NearByRoleItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NearByRoleItem_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NearByRoleItem_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_NotifyIntoScene_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NotifyIntoScene_default_instance_;
    new (ptr) ::NotifyIntoScene();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NotifyIntoScene::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NotifyIntoScene_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NotifyIntoScene_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_ObjectChangeNotify_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ObjectChangeNotify_default_instance_;
    new (ptr) ::ObjectChangeNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ObjectChangeNotify::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectChangeNotify_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObjectChangeNotify_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_RemoveConnectNty_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RemoveConnectNty_default_instance_;
    new (ptr) ::RemoveConnectNty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RemoveConnectNty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveConnectNty_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveConnectNty_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_RoleDisconnectAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RoleDisconnectAck_default_instance_;
    new (ptr) ::RoleDisconnectAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoleDisconnectAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleDisconnectAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoleDisconnectAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_RoleDisconnectReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RoleDisconnectReq_default_instance_;
    new (ptr) ::RoleDisconnectReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoleDisconnectReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleDisconnectReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoleDisconnectReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_RoleReconnectAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RoleReconnectAck_default_instance_;
    new (ptr) ::RoleReconnectAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoleReconnectAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleReconnectAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoleReconnectAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_RoleReconnectReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RoleReconnectReq_default_instance_;
    new (ptr) ::RoleReconnectReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoleReconnectReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleReconnectReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoleReconnectReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_SetupEquipAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetupEquipAck_default_instance_;
    new (ptr) ::SetupEquipAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SetupEquipAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetupEquipAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetupEquipAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_SetupEquipReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetupEquipReq_default_instance_;
    new (ptr) ::SetupEquipReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SetupEquipReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetupEquipReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetupEquipReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_SetupGemAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetupGemAck_default_instance_;
    new (ptr) ::SetupGemAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SetupGemAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetupGemAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetupGemAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_SetupGemReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetupGemReq_default_instance_;
    new (ptr) ::SetupGemReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SetupGemReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetupGemReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetupGemReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_SetupMountAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetupMountAck_default_instance_;
    new (ptr) ::SetupMountAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SetupMountAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetupMountAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetupMountAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_SetupMountReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetupMountReq_default_instance_;
    new (ptr) ::SetupMountReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SetupMountReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetupMountReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetupMountReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_SetupPartnerAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetupPartnerAck_default_instance_;
    new (ptr) ::SetupPartnerAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SetupPartnerAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetupPartnerAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetupPartnerAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_SetupPartnerReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetupPartnerReq_default_instance_;
    new (ptr) ::SetupPartnerReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SetupPartnerReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetupPartnerReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetupPartnerReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_SetupPetAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetupPetAck_default_instance_;
    new (ptr) ::SetupPetAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SetupPetAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetupPetAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetupPetAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_SetupPetReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetupPetReq_default_instance_;
    new (ptr) ::SetupPetReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SetupPetReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetupPetReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetupPetReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_StoreBuyAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StoreBuyAck_default_instance_;
    new (ptr) ::StoreBuyAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StoreBuyAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StoreBuyAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StoreBuyAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_StoreBuyReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StoreBuyReq_default_instance_;
    new (ptr) ::StoreBuyReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StoreBuyReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StoreBuyReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StoreBuyReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_SvrRegToSvrAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SvrRegToSvrAck_default_instance_;
    new (ptr) ::SvrRegToSvrAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrRegToSvrAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SvrRegToSvrAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SvrRegToSvrAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_SvrRegToSvrReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SvrRegToSvrReq_default_instance_;
    new (ptr) ::SvrRegToSvrReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SvrRegToSvrReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SvrRegToSvrReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SvrRegToSvrReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_TransPartnerData_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransPartnerData_default_instance_;
    new (ptr) ::TransPartnerData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransPartnerData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransPartnerData_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransPartnerData_Msg_5fGame_2eproto}, {
      &scc_info_SkillItem_Msg_5fBase_2eproto.base,}};

static void InitDefaultsscc_info_TransPetData_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransPetData_default_instance_;
    new (ptr) ::TransPetData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransPetData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransPetData_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransPetData_Msg_5fGame_2eproto}, {
      &scc_info_SkillItem_Msg_5fBase_2eproto.base,}};

static void InitDefaultsscc_info_TransRoleData_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransRoleData_default_instance_;
    new (ptr) ::TransRoleData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransRoleData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransRoleData_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransRoleData_Msg_5fGame_2eproto}, {
      &scc_info_SkillItem_Msg_5fBase_2eproto.base,}};

static void InitDefaultsscc_info_TransferDataAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransferDataAck_default_instance_;
    new (ptr) ::TransferDataAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransferDataAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferDataAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransferDataAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_TransferDataItem_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransferDataItem_default_instance_;
    new (ptr) ::TransferDataItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransferDataItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TransferDataItem_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TransferDataItem_Msg_5fGame_2eproto}, {
      &scc_info_TransRoleData_Msg_5fGame_2eproto.base,
      &scc_info_TransPetData_Msg_5fGame_2eproto.base,
      &scc_info_TransPartnerData_Msg_5fGame_2eproto.base,}};

static void InitDefaultsscc_info_TransferDataReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransferDataReq_default_instance_;
    new (ptr) ::TransferDataReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransferDataReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferDataReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransferDataReq_Msg_5fGame_2eproto}, {
      &scc_info_TransferDataItem_Msg_5fGame_2eproto.base,}};

static void InitDefaultsscc_info_UnsetEquipAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnsetEquipAck_default_instance_;
    new (ptr) ::UnsetEquipAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnsetEquipAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnsetEquipAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnsetEquipAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_UnsetEquipReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnsetEquipReq_default_instance_;
    new (ptr) ::UnsetEquipReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnsetEquipReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnsetEquipReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnsetEquipReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_UnsetGemAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnsetGemAck_default_instance_;
    new (ptr) ::UnsetGemAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnsetGemAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnsetGemAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnsetGemAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_UnsetGemReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnsetGemReq_default_instance_;
    new (ptr) ::UnsetGemReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnsetGemReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnsetGemReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnsetGemReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_UnsetMountAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnsetMountAck_default_instance_;
    new (ptr) ::UnsetMountAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnsetMountAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnsetMountAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnsetMountAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_UnsetMountReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnsetMountReq_default_instance_;
    new (ptr) ::UnsetMountReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnsetMountReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnsetMountReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnsetMountReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_UnsetPartnerAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnsetPartnerAck_default_instance_;
    new (ptr) ::UnsetPartnerAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnsetPartnerAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnsetPartnerAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnsetPartnerAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_UnsetPartnerReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnsetPartnerReq_default_instance_;
    new (ptr) ::UnsetPartnerReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnsetPartnerReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnsetPartnerReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnsetPartnerReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_UnsetPetAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnsetPetAck_default_instance_;
    new (ptr) ::UnsetPetAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnsetPetAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnsetPetAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnsetPetAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_UnsetPetReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnsetPetReq_default_instance_;
    new (ptr) ::UnsetPetReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnsetPetReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnsetPetReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnsetPetReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_UseHpBottleAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UseHpBottleAck_default_instance_;
    new (ptr) ::UseHpBottleAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UseHpBottleAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseHpBottleAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UseHpBottleAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_UseHpBottleReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UseHpBottleReq_default_instance_;
    new (ptr) ::UseHpBottleReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UseHpBottleReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseHpBottleReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UseHpBottleReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_UseItemAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UseItemAck_default_instance_;
    new (ptr) ::UseItemAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UseItemAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseItemAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UseItemAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_UseItemReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UseItemReq_default_instance_;
    new (ptr) ::UseItemReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UseItemReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseItemReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UseItemReq_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_UseMpBottleAck_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UseMpBottleAck_default_instance_;
    new (ptr) ::UseMpBottleAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UseMpBottleAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseMpBottleAck_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UseMpBottleAck_Msg_5fGame_2eproto}, {}};

static void InitDefaultsscc_info_UseMpBottleReq_Msg_5fGame_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UseMpBottleReq_default_instance_;
    new (ptr) ::UseMpBottleReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UseMpBottleReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseMpBottleReq_Msg_5fGame_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UseMpBottleReq_Msg_5fGame_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Msg_5fGame_2eproto[80];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Msg_5fGame_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Msg_5fGame_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Msg_5fGame_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GmStopServerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GmStopServerReq, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GmStopServerAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GmStopServerAck, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrRegToSvrReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrRegToSvrReq, serverid_),
  PROTOBUF_FIELD_OFFSET(::SvrRegToSvrReq, servername_),
  PROTOBUF_FIELD_OFFSET(::SvrRegToSvrReq, serverip_),
  PROTOBUF_FIELD_OFFSET(::SvrRegToSvrReq, serverport_),
  PROTOBUF_FIELD_OFFSET(::SvrRegToSvrReq, httpport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SvrRegToSvrAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SvrRegToSvrAck, retcode_),
  PROTOBUF_FIELD_OFFSET(::SvrRegToSvrAck, newsvrname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoleDisconnectReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoleDisconnectReq, accountid_),
  PROTOBUF_FIELD_OFFSET(::RoleDisconnectReq, roleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoleDisconnectAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoleDisconnectAck, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoleReconnectReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoleReconnectReq, roleid_),
  PROTOBUF_FIELD_OFFSET(::RoleReconnectReq, accountid_),
  PROTOBUF_FIELD_OFFSET(::RoleReconnectReq, logincode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoleReconnectAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoleReconnectAck, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RemoveConnectNty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RemoveConnectNty, roleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CreateNewSceneReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CreateNewSceneReq, copyid_),
  PROTOBUF_FIELD_OFFSET(::CreateNewSceneReq, copytype_),
  PROTOBUF_FIELD_OFFSET(::CreateNewSceneReq, playernum_),
  PROTOBUF_FIELD_OFFSET(::CreateNewSceneReq, createparam_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CreateNewSceneAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CreateNewSceneAck, retcode_),
  PROTOBUF_FIELD_OFFSET(::CreateNewSceneAck, copyid_),
  PROTOBUF_FIELD_OFFSET(::CreateNewSceneAck, copyguid_),
  PROTOBUF_FIELD_OFFSET(::CreateNewSceneAck, createparam_),
  PROTOBUF_FIELD_OFFSET(::CreateNewSceneAck, serverid_),
  PROTOBUF_FIELD_OFFSET(::CreateNewSceneAck, copytype_),
  PROTOBUF_FIELD_OFFSET(::CreateNewSceneAck, playernum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnterSceneReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EnterSceneReq, roleid_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneReq, serverid_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneReq, copyguid_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneReq, copyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, retcode_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, copyid_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, copyguid_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, roleid_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, carrer_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, actorid_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, rolename_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, camp_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, x_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, y_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, z_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, ft_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, hp_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, mp_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, hpmax_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, mpmax_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, speed_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, mountid_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, equips_),
  PROTOBUF_FIELD_OFFSET(::EnterSceneAck, skills_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BackToCityReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BackToCityReq, param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BackToCityAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BackToCityAck, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LeaveSceneReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LeaveSceneReq, roleid_),
  PROTOBUF_FIELD_OFFSET(::LeaveSceneReq, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LeaveSceneAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LeaveSceneAck, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AbortSceneReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AbortSceneReq, roleid_),
  PROTOBUF_FIELD_OFFSET(::AbortSceneReq, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AbortSceneAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AbortSceneAck, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AbortSceneNty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AbortSceneNty, roleid_),
  PROTOBUF_FIELD_OFFSET(::AbortSceneNty, copyid_),
  PROTOBUF_FIELD_OFFSET(::AbortSceneNty, copyguid_),
  PROTOBUF_FIELD_OFFSET(::AbortSceneNty, copytype_),
  PROTOBUF_FIELD_OFFSET(::AbortSceneNty, serverid_),
  PROTOBUF_FIELD_OFFSET(::AbortSceneNty, param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransRoleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransRoleData, roleid_),
  PROTOBUF_FIELD_OFFSET(::TransRoleData, name_),
  PROTOBUF_FIELD_OFFSET(::TransRoleData, carrerid_),
  PROTOBUF_FIELD_OFFSET(::TransRoleData, actorid_),
  PROTOBUF_FIELD_OFFSET(::TransRoleData, level_),
  PROTOBUF_FIELD_OFFSET(::TransRoleData, mountid_),
  PROTOBUF_FIELD_OFFSET(::TransRoleData, robot_),
  PROTOBUF_FIELD_OFFSET(::TransRoleData, equips_),
  PROTOBUF_FIELD_OFFSET(::TransRoleData, propertys_),
  PROTOBUF_FIELD_OFFSET(::TransRoleData, skills_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransPetData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransPetData, petguid_),
  PROTOBUF_FIELD_OFFSET(::TransPetData, petid_),
  PROTOBUF_FIELD_OFFSET(::TransPetData, actorid_),
  PROTOBUF_FIELD_OFFSET(::TransPetData, name_),
  PROTOBUF_FIELD_OFFSET(::TransPetData, level_),
  PROTOBUF_FIELD_OFFSET(::TransPetData, propertys_),
  PROTOBUF_FIELD_OFFSET(::TransPetData, skills_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransPartnerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransPartnerData, partnerguid_),
  PROTOBUF_FIELD_OFFSET(::TransPartnerData, partnerid_),
  PROTOBUF_FIELD_OFFSET(::TransPartnerData, actorid_),
  PROTOBUF_FIELD_OFFSET(::TransPartnerData, name_),
  PROTOBUF_FIELD_OFFSET(::TransPartnerData, level_),
  PROTOBUF_FIELD_OFFSET(::TransPartnerData, propertys_),
  PROTOBUF_FIELD_OFFSET(::TransPartnerData, skills_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransferDataItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransferDataItem, camp_),
  PROTOBUF_FIELD_OFFSET(::TransferDataItem, roledata_),
  PROTOBUF_FIELD_OFFSET(::TransferDataItem, petdata_),
  PROTOBUF_FIELD_OFFSET(::TransferDataItem, partnerdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransferDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransferDataReq, transdatas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransferDataAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransferDataAck, retcode_),
  PROTOBUF_FIELD_OFFSET(::TransferDataAck, roleid_),
  PROTOBUF_FIELD_OFFSET(::TransferDataAck, copyid_),
  PROTOBUF_FIELD_OFFSET(::TransferDataAck, copyguid_),
  PROTOBUF_FIELD_OFFSET(::TransferDataAck, serverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NotifyIntoScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NotifyIntoScene, roleid_),
  PROTOBUF_FIELD_OFFSET(::NotifyIntoScene, copyid_),
  PROTOBUF_FIELD_OFFSET(::NotifyIntoScene, copyguid_),
  PROTOBUF_FIELD_OFFSET(::NotifyIntoScene, serverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NearByRoleItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NearByRoleItem, roleid_),
  PROTOBUF_FIELD_OFFSET(::NearByRoleItem, actorid_),
  PROTOBUF_FIELD_OFFSET(::NearByRoleItem, level_),
  PROTOBUF_FIELD_OFFSET(::NearByRoleItem, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CopyInsItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CopyInsItem, copyguid_),
  PROTOBUF_FIELD_OFFSET(::CopyInsItem, copyid_),
  PROTOBUF_FIELD_OFFSET(::CopyInsItem, copytype_),
  PROTOBUF_FIELD_OFFSET(::CopyInsItem, serverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CopyReportReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CopyReportReq, serverid_),
  PROTOBUF_FIELD_OFFSET(::CopyReportReq, copylist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UseHpBottleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UseHpBottleAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UseHpBottleAck, retcode_),
  PROTOBUF_FIELD_OFFSET(::UseHpBottleAck, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UseMpBottleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UseMpBottleAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UseMpBottleAck, retcode_),
  PROTOBUF_FIELD_OFFSET(::UseMpBottleAck, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageReq, srcname_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageReq, srcid_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageReq, targetid_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageReq, chatchl_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageReq, guildid_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageReq, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageAck, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageNty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageNty, srcname_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageNty, srcid_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageNty, srclevel_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageNty, targetid_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageNty, chatchl_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageNty, guildid_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageNty, timestamp_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageNty, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CommonReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonReq, param1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CommonAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CommonAck, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BroadMessageNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BroadMessageNotify, msgid_),
  PROTOBUF_FIELD_OFFSET(::BroadMessageNotify, connid_),
  PROTOBUF_FIELD_OFFSET(::BroadMessageNotify, msgdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicRegToLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogicRegToLoginReq, serverid_),
  PROTOBUF_FIELD_OFFSET(::LogicRegToLoginReq, servername_),
  PROTOBUF_FIELD_OFFSET(::LogicRegToLoginReq, svrinnerip_),
  PROTOBUF_FIELD_OFFSET(::LogicRegToLoginReq, serverport_),
  PROTOBUF_FIELD_OFFSET(::LogicRegToLoginReq, httpport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicRegToLoginAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogicRegToLoginAck, retcode_),
  PROTOBUF_FIELD_OFFSET(::LogicRegToLoginAck, newsvrname_),
  PROTOBUF_FIELD_OFFSET(::LogicRegToLoginAck, svropentime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicRegToDbSvrReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogicRegToDbSvrReq, serverid_),
  PROTOBUF_FIELD_OFFSET(::LogicRegToDbSvrReq, servername_),
  PROTOBUF_FIELD_OFFSET(::LogicRegToDbSvrReq, processid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicRegToDbSvrAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogicRegToDbSvrAck, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicUpdateInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogicUpdateInfoReq, serverid_),
  PROTOBUF_FIELD_OFFSET(::LogicUpdateInfoReq, servername_),
  PROTOBUF_FIELD_OFFSET(::LogicUpdateInfoReq, maxonline_),
  PROTOBUF_FIELD_OFFSET(::LogicUpdateInfoReq, curonline_),
  PROTOBUF_FIELD_OFFSET(::LogicUpdateInfoReq, totalnum_),
  PROTOBUF_FIELD_OFFSET(::LogicUpdateInfoReq, cachenum_),
  PROTOBUF_FIELD_OFFSET(::LogicUpdateInfoReq, status_),
  PROTOBUF_FIELD_OFFSET(::LogicUpdateInfoReq, dberrcnt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicUpdateInfoAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogicUpdateInfoAck, retcode_),
  PROTOBUF_FIELD_OFFSET(::LogicUpdateInfoAck, svropentime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetupEquipReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetupEquipReq, equipguid_),
  PROTOBUF_FIELD_OFFSET(::SetupEquipReq, bagguid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetupEquipAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetupEquipAck, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Msg_GiftCodeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Msg_GiftCodeReq, roleid_),
  PROTOBUF_FIELD_OFFSET(::Msg_GiftCodeReq, giftcode_),
  PROTOBUF_FIELD_OFFSET(::Msg_GiftCodeReq, channel_),
  PROTOBUF_FIELD_OFFSET(::Msg_GiftCodeReq, accountid_),
  PROTOBUF_FIELD_OFFSET(::Msg_GiftCodeReq, areaid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Msg_GiftCodeAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Msg_GiftCodeAck, retcode_),
  PROTOBUF_FIELD_OFFSET(::Msg_GiftCodeAck, roleid_),
  PROTOBUF_FIELD_OFFSET(::Msg_GiftCodeAck, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnsetEquipReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnsetEquipReq, equipguid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnsetEquipAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnsetEquipAck, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetupGemReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetupGemReq, gemguid_),
  PROTOBUF_FIELD_OFFSET(::SetupGemReq, bagguid_),
  PROTOBUF_FIELD_OFFSET(::SetupGemReq, targetpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetupGemAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetupGemAck, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnsetGemReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnsetGemReq, gemguid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnsetGemAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnsetGemAck, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetupPartnerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetupPartnerReq, partnerguid_),
  PROTOBUF_FIELD_OFFSET(::SetupPartnerReq, targetpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetupPartnerAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetupPartnerAck, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnsetPartnerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnsetPartnerReq, targetpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnsetPartnerAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnsetPartnerAck, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetupMountReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetupMountReq, mountguid_),
  PROTOBUF_FIELD_OFFSET(::SetupMountReq, targetpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetupMountAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetupMountAck, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnsetMountReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnsetMountReq, mountguid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnsetMountAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnsetMountAck, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetupPetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetupPetReq, petguid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetupPetAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetupPetAck, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnsetPetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnsetPetReq, petguid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UnsetPetAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UnsetPetAck, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StoreBuyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StoreBuyReq, storetype_),
  PROTOBUF_FIELD_OFFSET(::StoreBuyReq, storeid_),
  PROTOBUF_FIELD_OFFSET(::StoreBuyReq, buynum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StoreBuyAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StoreBuyAck, retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ObjectChangeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ObjectChangeNotify, roleid_),
  PROTOBUF_FIELD_OFFSET(::ObjectChangeNotify, changetype_),
  PROTOBUF_FIELD_OFFSET(::ObjectChangeNotify, intvalue1_),
  PROTOBUF_FIELD_OFFSET(::ObjectChangeNotify, intvalue2_),
  PROTOBUF_FIELD_OFFSET(::ObjectChangeNotify, strvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HitEffectItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HitEffectItem, castguid_),
  PROTOBUF_FIELD_OFFSET(::HitEffectItem, targetguid_),
  PROTOBUF_FIELD_OFFSET(::HitEffectItem, hurtvalue_),
  PROTOBUF_FIELD_OFFSET(::HitEffectItem, crit_),
  PROTOBUF_FIELD_OFFSET(::HitEffectItem, hitactionid_),
  PROTOBUF_FIELD_OFFSET(::HitEffectItem, hiteffectid_),
  PROTOBUF_FIELD_OFFSET(::HitEffectItem, hitdistance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HitEffectNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HitEffectNtf, itemlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UseItemReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UseItemAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgGetRandomNameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgGetRandomNameReq, sex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgGetRandomNameAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgGetRandomNameAck, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Msg_DbErrorCountNty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Msg_DbErrorCountNty, errorcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Msg_GameParamReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Msg_GameParamReq, channel_),
  PROTOBUF_FIELD_OFFSET(::Msg_GameParamReq, clientver_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Msg_GameParamAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Msg_GameParamAck, paramkey_),
  PROTOBUF_FIELD_OFFSET(::Msg_GameParamAck, paramvalue_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::GmStopServerReq)},
  { 6, -1, sizeof(::GmStopServerAck)},
  { 12, -1, sizeof(::SvrRegToSvrReq)},
  { 22, -1, sizeof(::SvrRegToSvrAck)},
  { 29, -1, sizeof(::RoleDisconnectReq)},
  { 36, -1, sizeof(::RoleDisconnectAck)},
  { 42, -1, sizeof(::RoleReconnectReq)},
  { 50, -1, sizeof(::RoleReconnectAck)},
  { 56, -1, sizeof(::RemoveConnectNty)},
  { 62, -1, sizeof(::CreateNewSceneReq)},
  { 71, -1, sizeof(::CreateNewSceneAck)},
  { 83, -1, sizeof(::EnterSceneReq)},
  { 92, -1, sizeof(::EnterSceneAck)},
  { 117, -1, sizeof(::BackToCityReq)},
  { 123, -1, sizeof(::BackToCityAck)},
  { 129, -1, sizeof(::LeaveSceneReq)},
  { 136, -1, sizeof(::LeaveSceneAck)},
  { 142, -1, sizeof(::AbortSceneReq)},
  { 149, -1, sizeof(::AbortSceneAck)},
  { 155, -1, sizeof(::AbortSceneNty)},
  { 166, -1, sizeof(::TransRoleData)},
  { 181, -1, sizeof(::TransPetData)},
  { 193, -1, sizeof(::TransPartnerData)},
  { 205, -1, sizeof(::TransferDataItem)},
  { 214, -1, sizeof(::TransferDataReq)},
  { 220, -1, sizeof(::TransferDataAck)},
  { 230, -1, sizeof(::NotifyIntoScene)},
  { 239, -1, sizeof(::NearByRoleItem)},
  { 248, -1, sizeof(::CopyInsItem)},
  { 257, -1, sizeof(::CopyReportReq)},
  { 264, -1, sizeof(::UseHpBottleReq)},
  { 269, -1, sizeof(::UseHpBottleAck)},
  { 276, -1, sizeof(::UseMpBottleReq)},
  { 281, -1, sizeof(::UseMpBottleAck)},
  { 288, -1, sizeof(::ChatMessageReq)},
  { 299, -1, sizeof(::ChatMessageAck)},
  { 305, -1, sizeof(::ChatMessageNty)},
  { 318, -1, sizeof(::CommonReq)},
  { 324, -1, sizeof(::CommonAck)},
  { 330, -1, sizeof(::BroadMessageNotify)},
  { 338, -1, sizeof(::LogicRegToLoginReq)},
  { 348, -1, sizeof(::LogicRegToLoginAck)},
  { 356, -1, sizeof(::LogicRegToDbSvrReq)},
  { 364, -1, sizeof(::LogicRegToDbSvrAck)},
  { 370, -1, sizeof(::LogicUpdateInfoReq)},
  { 383, -1, sizeof(::LogicUpdateInfoAck)},
  { 390, -1, sizeof(::SetupEquipReq)},
  { 397, -1, sizeof(::SetupEquipAck)},
  { 403, -1, sizeof(::Msg_GiftCodeReq)},
  { 413, -1, sizeof(::Msg_GiftCodeAck)},
  { 421, -1, sizeof(::UnsetEquipReq)},
  { 427, -1, sizeof(::UnsetEquipAck)},
  { 433, -1, sizeof(::SetupGemReq)},
  { 441, -1, sizeof(::SetupGemAck)},
  { 447, -1, sizeof(::UnsetGemReq)},
  { 453, -1, sizeof(::UnsetGemAck)},
  { 459, -1, sizeof(::SetupPartnerReq)},
  { 466, -1, sizeof(::SetupPartnerAck)},
  { 472, -1, sizeof(::UnsetPartnerReq)},
  { 478, -1, sizeof(::UnsetPartnerAck)},
  { 484, -1, sizeof(::SetupMountReq)},
  { 491, -1, sizeof(::SetupMountAck)},
  { 497, -1, sizeof(::UnsetMountReq)},
  { 503, -1, sizeof(::UnsetMountAck)},
  { 509, -1, sizeof(::SetupPetReq)},
  { 515, -1, sizeof(::SetupPetAck)},
  { 521, -1, sizeof(::UnsetPetReq)},
  { 527, -1, sizeof(::UnsetPetAck)},
  { 533, -1, sizeof(::StoreBuyReq)},
  { 541, -1, sizeof(::StoreBuyAck)},
  { 547, -1, sizeof(::ObjectChangeNotify)},
  { 557, -1, sizeof(::HitEffectItem)},
  { 569, -1, sizeof(::HitEffectNtf)},
  { 575, -1, sizeof(::UseItemReq)},
  { 580, -1, sizeof(::UseItemAck)},
  { 585, -1, sizeof(::MsgGetRandomNameReq)},
  { 591, -1, sizeof(::MsgGetRandomNameAck)},
  { 597, -1, sizeof(::Msg_DbErrorCountNty)},
  { 603, -1, sizeof(::Msg_GameParamReq)},
  { 610, -1, sizeof(::Msg_GameParamAck)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GmStopServerReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GmStopServerAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SvrRegToSvrReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SvrRegToSvrAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RoleDisconnectReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RoleDisconnectAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RoleReconnectReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RoleReconnectAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RemoveConnectNty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CreateNewSceneReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CreateNewSceneAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EnterSceneReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EnterSceneAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BackToCityReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BackToCityAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LeaveSceneReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LeaveSceneAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AbortSceneReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AbortSceneAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AbortSceneNty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransRoleData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransPetData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransPartnerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransferDataItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransferDataReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransferDataAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NotifyIntoScene_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NearByRoleItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CopyInsItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CopyReportReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UseHpBottleReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UseHpBottleAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UseMpBottleReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UseMpBottleAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChatMessageReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChatMessageAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChatMessageNty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CommonReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CommonAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BroadMessageNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LogicRegToLoginReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LogicRegToLoginAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LogicRegToDbSvrReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LogicRegToDbSvrAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LogicUpdateInfoReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LogicUpdateInfoAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetupEquipReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetupEquipAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Msg_GiftCodeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Msg_GiftCodeAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnsetEquipReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnsetEquipAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetupGemReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetupGemAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnsetGemReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnsetGemAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetupPartnerReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetupPartnerAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnsetPartnerReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnsetPartnerAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetupMountReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetupMountAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnsetMountReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnsetMountAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetupPetReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetupPetAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnsetPetReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UnsetPetAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StoreBuyReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StoreBuyAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ObjectChangeNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HitEffectItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HitEffectNtf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UseItemReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UseItemAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgGetRandomNameReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgGetRandomNameAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Msg_DbErrorCountNty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Msg_GameParamReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Msg_GameParamAck_default_instance_),
};

const char descriptor_table_protodef_Msg_5fGame_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Msg_Game.proto\032\016Msg_Base.proto\"\037\n\017GmSt"
  "opServerReq\022\014\n\004Data\030\001 \001(\r\"\"\n\017GmStopServe"
  "rAck\022\017\n\007RetCode\030\001 \001(\r\"n\n\016SvrRegToSvrReq\022"
  "\020\n\010ServerID\030\001 \001(\005\022\022\n\nServerName\030\002 \001(\t\022\020\n"
  "\010ServerIp\030\003 \001(\t\022\022\n\nServerPort\030\004 \001(\005\022\020\n\010H"
  "ttpPort\030\005 \001(\005\"5\n\016SvrRegToSvrAck\022\017\n\007RetCo"
  "de\030\001 \001(\r\022\022\n\nNewSvrName\030\002 \001(\t\"6\n\021RoleDisc"
  "onnectReq\022\021\n\tAccountID\030\001 \001(\004\022\016\n\006RoleID\030\002"
  " \001(\004\"$\n\021RoleDisconnectAck\022\017\n\007RetCode\030\001 \001"
  "(\r\"H\n\020RoleReconnectReq\022\016\n\006RoleID\030\001 \001(\004\022\021"
  "\n\tAccountID\030\002 \001(\004\022\021\n\tLoginCode\030\003 \001(\r\"#\n\020"
  "RoleReconnectAck\022\017\n\007RetCode\030\001 \001(\r\"\"\n\020Rem"
  "oveConnectNty\022\016\n\006RoleID\030\001 \001(\004\"]\n\021CreateN"
  "ewSceneReq\022\016\n\006CopyID\030\001 \001(\005\022\020\n\010CopyType\030\002"
  " \001(\005\022\021\n\tPlayerNum\030\003 \001(\005\022\023\n\013CreateParam\030\004"
  " \001(\004\"\222\001\n\021CreateNewSceneAck\022\017\n\007RetCode\030\001 "
  "\001(\r\022\016\n\006CopyID\030\002 \001(\005\022\020\n\010CopyGuid\030\003 \001(\005\022\023\n"
  "\013CreateParam\030\004 \001(\004\022\020\n\010ServerID\030\005 \001(\005\022\020\n\010"
  "CopyType\030\006 \001(\005\022\021\n\tPlayerNum\030\007 \001(\005\"S\n\rEnt"
  "erSceneReq\022\016\n\006RoleID\030\001 \001(\004\022\020\n\010ServerID\030\002"
  " \001(\005\022\020\n\010CopyGuid\030\003 \001(\005\022\016\n\006CopyID\030\004 \001(\005\"\302"
  "\002\n\rEnterSceneAck\022\017\n\007RetCode\030\001 \001(\r\022\016\n\006Cop"
  "yID\030\002 \001(\005\022\020\n\010CopyGuid\030\003 \001(\005\022\016\n\006RoleID\030\004 "
  "\001(\004\022\016\n\006Carrer\030\005 \001(\005\022\017\n\007ActorID\030\006 \001(\005\022\020\n\010"
  "RoleName\030\007 \001(\t\022\014\n\004Camp\030\010 \001(\005\022\t\n\001X\030\t \001(\002\022"
  "\t\n\001Y\030\n \001(\002\022\t\n\001Z\030\013 \001(\002\022\n\n\002Ft\030\014 \001(\002\022\n\n\002Hp\030"
  "\r \001(\005\022\n\n\002Mp\030\016 \001(\005\022\r\n\005HpMax\030\017 \001(\005\022\r\n\005MpMa"
  "x\030\020 \001(\005\022\r\n\005Speed\030\021 \001(\005\022\017\n\007MountID\030\022 \001(\005\022"
  "\016\n\006Equips\030\023 \003(\005\022\032\n\006Skills\030\024 \003(\0132\n.SkillI"
  "tem\"\036\n\rBackToCityReq\022\r\n\005Param\030\001 \001(\r\" \n\rB"
  "ackToCityAck\022\017\n\007RetCode\030\001 \001(\r\"/\n\rLeaveSc"
  "eneReq\022\016\n\006RoleID\030\001 \001(\004\022\016\n\006Reason\030\002 \001(\005\" "
  "\n\rLeaveSceneAck\022\017\n\007RetCode\030\001 \001(\r\"/\n\rAbor"
  "tSceneReq\022\016\n\006RoleID\030\001 \001(\004\022\016\n\006Reason\030\002 \001("
  "\005\" \n\rAbortSceneAck\022\017\n\007RetCode\030\001 \001(\r\"t\n\rA"
  "bortSceneNty\022\016\n\006RoleID\030\001 \001(\004\022\016\n\006CopyID\030\002"
  " \001(\005\022\020\n\010CopyGuid\030\003 \001(\005\022\020\n\010CopyType\030\004 \001(\005"
  "\022\020\n\010ServerID\030\005 \001(\005\022\r\n\005Param\030\006 \001(\005\"\276\001\n\rTr"
  "ansRoleData\022\016\n\006RoleID\030\001 \001(\004\022\014\n\004Name\030\002 \001("
  "\t\022\020\n\010CarrerID\030\003 \001(\005\022\017\n\007ActorID\030\004 \001(\005\022\r\n\005"
  "Level\030\005 \001(\005\022\017\n\007MountID\030\006 \001(\005\022\r\n\005Robot\030\007 "
  "\001(\005\022\016\n\006Equips\030\010 \003(\005\022\021\n\tPropertys\030\t \003(\005\022\032"
  "\n\006Skills\030\n \003(\0132\n.SkillItem\"\213\001\n\014TransPetD"
  "ata\022\017\n\007PetGuid\030\001 \001(\004\022\r\n\005PetID\030\002 \001(\005\022\017\n\007A"
  "ctorID\030\003 \001(\005\022\014\n\004Name\030\004 \001(\t\022\r\n\005Level\030\005 \001("
  "\005\022\021\n\tPropertys\030\006 \003(\005\022\032\n\006Skills\030\007 \003(\0132\n.S"
  "killItem\"\227\001\n\020TransPartnerData\022\023\n\013Partner"
  "Guid\030\001 \001(\004\022\021\n\tPartnerID\030\002 \001(\005\022\017\n\007ActorID"
  "\030\003 \001(\005\022\014\n\004Name\030\004 \001(\t\022\r\n\005Level\030\005 \001(\005\022\021\n\tP"
  "ropertys\030\006 \003(\005\022\032\n\006Skills\030\007 \003(\0132\n.SkillIt"
  "em\"\212\001\n\020TransferDataItem\022\014\n\004Camp\030\001 \001(\005\022 \n"
  "\010RoleData\030\002 \001(\0132\016.TransRoleData\022\036\n\007PetDa"
  "ta\030\003 \001(\0132\r.TransPetData\022&\n\013PartnerData\030\004"
  " \001(\0132\021.TransPartnerData\"8\n\017TransferDataR"
  "eq\022%\n\nTransDatas\030\001 \003(\0132\021.TransferDataIte"
  "m\"f\n\017TransferDataAck\022\017\n\007RetCode\030\001 \001(\r\022\016\n"
  "\006RoleID\030\002 \001(\004\022\016\n\006CopyID\030\003 \001(\005\022\020\n\010CopyGui"
  "d\030\004 \001(\005\022\020\n\010ServerID\030\005 \001(\005\"U\n\017NotifyIntoS"
  "cene\022\016\n\006RoleID\030\001 \001(\004\022\016\n\006CopyID\030\002 \001(\005\022\020\n\010"
  "CopyGuid\030\003 \001(\005\022\020\n\010ServerID\030\004 \001(\005\"N\n\016Near"
  "ByRoleItem\022\016\n\006RoleID\030\001 \001(\004\022\017\n\007ActorID\030\002 "
  "\001(\005\022\r\n\005Level\030\003 \001(\005\022\014\n\004Name\030\004 \001(\t\"S\n\013Copy"
  "InsItem\022\020\n\010CopyGuid\030\001 \001(\r\022\016\n\006CopyID\030\002 \001("
  "\005\022\020\n\010CopyType\030\003 \001(\005\022\020\n\010ServerID\030\004 \001(\005\"A\n"
  "\rCopyReportReq\022\020\n\010ServerID\030\001 \001(\005\022\036\n\010Copy"
  "List\030\002 \003(\0132\014.CopyInsItem\"\020\n\016UseHpBottleR"
  "eq\"0\n\016UseHpBottleAck\022\017\n\007RetCode\030\001 \001(\r\022\r\n"
  "\005Count\030\002 \001(\005\"\020\n\016UseMpBottleReq\"0\n\016UseMpB"
  "ottleAck\022\017\n\007RetCode\030\001 \001(\r\022\r\n\005Count\030\002 \001(\005"
  "\"u\n\016ChatMessageReq\022\017\n\007SrcName\030\001 \001(\t\022\r\n\005S"
  "rcID\030\002 \001(\004\022\020\n\010TargetID\030\003 \001(\004\022\017\n\007ChatChl\030"
  "\004 \001(\005\022\017\n\007GuildID\030\005 \001(\004\022\017\n\007Content\030\006 \001(\t\""
  "!\n\016ChatMessageAck\022\017\n\007RetCode\030\001 \001(\r\"\232\001\n\016C"
  "hatMessageNty\022\017\n\007SrcName\030\001 \001(\t\022\r\n\005SrcID\030"
  "\002 \001(\004\022\020\n\010SrcLevel\030\003 \001(\005\022\020\n\010TargetID\030\004 \001("
  "\004\022\017\n\007ChatChl\030\005 \001(\005\022\017\n\007GuildID\030\006 \001(\004\022\021\n\tT"
  "imeStamp\030\007 \001(\004\022\017\n\007Content\030\010 \001(\t\"\033\n\tCommo"
  "nReq\022\016\n\006Param1\030\001 \001(\r\"\034\n\tCommonAck\022\017\n\007Ret"
  "Code\030\001 \001(\r\"D\n\022BroadMessageNotify\022\r\n\005MsgI"
  "D\030\001 \001(\r\022\016\n\006ConnID\030\002 \003(\r\022\017\n\007MsgData\030\003 \001(\014"
  "\"t\n\022LogicRegToLoginReq\022\020\n\010ServerID\030\001 \001(\005"
  "\022\022\n\nServerName\030\002 \001(\t\022\022\n\nSvrInnerIp\030\003 \001(\t"
  "\022\022\n\nServerPort\030\004 \001(\005\022\020\n\010HttpPort\030\005 \001(\005\"N"
  "\n\022LogicRegToLoginAck\022\017\n\007RetCode\030\001 \001(\r\022\022\n"
  "\nNewSvrName\030\002 \001(\t\022\023\n\013SvrOpenTime\030\003 \001(\004\"M"
  "\n\022LogicRegToDbSvrReq\022\020\n\010ServerID\030\001 \001(\005\022\022"
  "\n\nServerName\030\002 \001(\t\022\021\n\tProcessID\030\003 \001(\r\"%\n"
  "\022LogicRegToDbSvrAck\022\017\n\007RetCode\030\001 \001(\r\"\246\001\n"
  "\022LogicUpdateInfoReq\022\020\n\010ServerID\030\001 \001(\005\022\022\n"
  "\nServerName\030\002 \001(\t\022\021\n\tMaxOnline\030\003 \001(\005\022\021\n\t"
  "CurOnline\030\004 \001(\005\022\020\n\010TotalNum\030\005 \001(\005\022\020\n\010Cac"
  "heNum\030\006 \001(\005\022\016\n\006Status\030\007 \001(\005\022\020\n\010DbErrCnt\030"
  "\010 \001(\005\":\n\022LogicUpdateInfoAck\022\017\n\007RetCode\030\001"
  " \001(\r\022\023\n\013SvrOpenTime\030\002 \001(\004\"3\n\rSetupEquipR"
  "eq\022\021\n\tEquipGuid\030\001 \001(\004\022\017\n\007BagGuid\030\002 \001(\004\" "
  "\n\rSetupEquipAck\022\017\n\007RetCode\030\001 \001(\r\"g\n\017Msg_"
  "GiftCodeReq\022\016\n\006RoleID\030\001 \001(\004\022\020\n\010GiftCode\030"
  "\002 \001(\t\022\017\n\007Channel\030\003 \001(\r\022\021\n\tAccountID\030\004 \001("
  "\004\022\016\n\006AreaID\030\005 \001(\005\"L\n\017Msg_GiftCodeAck\022\017\n\007"
  "RetCode\030\001 \001(\r\022\016\n\006RoleID\030\002 \001(\004\022\030\n\005items\030\003"
  " \003(\0132\t.ItemData\"\"\n\rUnsetEquipReq\022\021\n\tEqui"
  "pGuid\030\001 \001(\004\" \n\rUnsetEquipAck\022\017\n\007RetCode\030"
  "\001 \001(\r\"B\n\013SetupGemReq\022\017\n\007GemGuid\030\001 \001(\004\022\017\n"
  "\007BagGuid\030\002 \001(\004\022\021\n\tTargetPos\030\003 \001(\005\"\036\n\013Set"
  "upGemAck\022\017\n\007RetCode\030\001 \001(\r\"\036\n\013UnsetGemReq"
  "\022\017\n\007GemGuid\030\001 \001(\004\"\036\n\013UnsetGemAck\022\017\n\007RetC"
  "ode\030\001 \001(\r\"9\n\017SetupPartnerReq\022\023\n\013PartnerG"
  "uid\030\001 \001(\004\022\021\n\tTargetPos\030\002 \001(\005\"\"\n\017SetupPar"
  "tnerAck\022\017\n\007RetCode\030\001 \001(\r\"$\n\017UnsetPartner"
  "Req\022\021\n\tTargetPos\030\001 \001(\005\"\"\n\017UnsetPartnerAc"
  "k\022\017\n\007RetCode\030\001 \001(\r\"5\n\rSetupMountReq\022\021\n\tM"
  "ountGuid\030\001 \001(\004\022\021\n\tTargetPos\030\002 \001(\005\" \n\rSet"
  "upMountAck\022\017\n\007RetCode\030\001 \001(\r\"\"\n\rUnsetMoun"
  "tReq\022\021\n\tMountGuid\030\001 \001(\004\" \n\rUnsetMountAck"
  "\022\017\n\007RetCode\030\001 \001(\r\"\036\n\013SetupPetReq\022\017\n\007PetG"
  "uid\030\001 \001(\004\"\036\n\013SetupPetAck\022\017\n\007RetCode\030\001 \001("
  "\r\"\036\n\013UnsetPetReq\022\017\n\007PetGuid\030\001 \001(\004\"\036\n\013Uns"
  "etPetAck\022\017\n\007RetCode\030\001 \001(\r\"A\n\013StoreBuyReq"
  "\022\021\n\tStoreType\030\001 \001(\005\022\017\n\007StoreID\030\002 \001(\005\022\016\n\006"
  "BuyNum\030\003 \001(\005\"\036\n\013StoreBuyAck\022\017\n\007RetCode\030\001"
  " \001(\r\"p\n\022ObjectChangeNotify\022\016\n\006RoleID\030\001 \001"
  "(\003\022\022\n\nChangeType\030\002 \001(\005\022\021\n\tIntValue1\030\003 \001("
  "\003\022\021\n\tIntValue2\030\004 \001(\003\022\020\n\010StrValue\030\005 \001(\t\"\225"
  "\001\n\rHitEffectItem\022\020\n\010CastGuid\030\001 \001(\004\022\022\n\nTa"
  "rgetGuid\030\002 \001(\004\022\021\n\tHurtValue\030\003 \001(\005\022\014\n\004Cri"
  "t\030\004 \001(\010\022\023\n\013HitActionID\030\005 \001(\r\022\023\n\013HitEffec"
  "tID\030\006 \001(\r\022\023\n\013HitDistance\030\007 \001(\002\"0\n\014HitEff"
  "ectNtf\022 \n\010ItemList\030\001 \003(\0132\016.HitEffectItem"
  "\"\014\n\nUseItemReq\"\014\n\nUseItemAck\"\"\n\023MsgGetRa"
  "ndomNameReq\022\013\n\003Sex\030\001 \001(\005\"#\n\023MsgGetRandom"
  "NameAck\022\014\n\004Name\030\001 \001(\t\")\n\023Msg_DbErrorCoun"
  "tNty\022\022\n\nErrorCount\030\001 \001(\r\"6\n\020Msg_GamePara"
  "mReq\022\017\n\007Channel\030\001 \001(\005\022\021\n\tClientVer\030\002 \001(\t"
  "\"8\n\020Msg_GameParamAck\022\020\n\010ParamKey\030\001 \003(\t\022\022"
  "\n\nParamValue\030\002 \003(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Msg_5fGame_2eproto_deps[1] = {
  &::descriptor_table_Msg_5fBase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Msg_5fGame_2eproto_sccs[80] = {
  &scc_info_AbortSceneAck_Msg_5fGame_2eproto.base,
  &scc_info_AbortSceneNty_Msg_5fGame_2eproto.base,
  &scc_info_AbortSceneReq_Msg_5fGame_2eproto.base,
  &scc_info_BackToCityAck_Msg_5fGame_2eproto.base,
  &scc_info_BackToCityReq_Msg_5fGame_2eproto.base,
  &scc_info_BroadMessageNotify_Msg_5fGame_2eproto.base,
  &scc_info_ChatMessageAck_Msg_5fGame_2eproto.base,
  &scc_info_ChatMessageNty_Msg_5fGame_2eproto.base,
  &scc_info_ChatMessageReq_Msg_5fGame_2eproto.base,
  &scc_info_CommonAck_Msg_5fGame_2eproto.base,
  &scc_info_CommonReq_Msg_5fGame_2eproto.base,
  &scc_info_CopyInsItem_Msg_5fGame_2eproto.base,
  &scc_info_CopyReportReq_Msg_5fGame_2eproto.base,
  &scc_info_CreateNewSceneAck_Msg_5fGame_2eproto.base,
  &scc_info_CreateNewSceneReq_Msg_5fGame_2eproto.base,
  &scc_info_EnterSceneAck_Msg_5fGame_2eproto.base,
  &scc_info_EnterSceneReq_Msg_5fGame_2eproto.base,
  &scc_info_GmStopServerAck_Msg_5fGame_2eproto.base,
  &scc_info_GmStopServerReq_Msg_5fGame_2eproto.base,
  &scc_info_HitEffectItem_Msg_5fGame_2eproto.base,
  &scc_info_HitEffectNtf_Msg_5fGame_2eproto.base,
  &scc_info_LeaveSceneAck_Msg_5fGame_2eproto.base,
  &scc_info_LeaveSceneReq_Msg_5fGame_2eproto.base,
  &scc_info_LogicRegToDbSvrAck_Msg_5fGame_2eproto.base,
  &scc_info_LogicRegToDbSvrReq_Msg_5fGame_2eproto.base,
  &scc_info_LogicRegToLoginAck_Msg_5fGame_2eproto.base,
  &scc_info_LogicRegToLoginReq_Msg_5fGame_2eproto.base,
  &scc_info_LogicUpdateInfoAck_Msg_5fGame_2eproto.base,
  &scc_info_LogicUpdateInfoReq_Msg_5fGame_2eproto.base,
  &scc_info_MsgGetRandomNameAck_Msg_5fGame_2eproto.base,
  &scc_info_MsgGetRandomNameReq_Msg_5fGame_2eproto.base,
  &scc_info_Msg_DbErrorCountNty_Msg_5fGame_2eproto.base,
  &scc_info_Msg_GameParamAck_Msg_5fGame_2eproto.base,
  &scc_info_Msg_GameParamReq_Msg_5fGame_2eproto.base,
  &scc_info_Msg_GiftCodeAck_Msg_5fGame_2eproto.base,
  &scc_info_Msg_GiftCodeReq_Msg_5fGame_2eproto.base,
  &scc_info_NearByRoleItem_Msg_5fGame_2eproto.base,
  &scc_info_NotifyIntoScene_Msg_5fGame_2eproto.base,
  &scc_info_ObjectChangeNotify_Msg_5fGame_2eproto.base,
  &scc_info_RemoveConnectNty_Msg_5fGame_2eproto.base,
  &scc_info_RoleDisconnectAck_Msg_5fGame_2eproto.base,
  &scc_info_RoleDisconnectReq_Msg_5fGame_2eproto.base,
  &scc_info_RoleReconnectAck_Msg_5fGame_2eproto.base,
  &scc_info_RoleReconnectReq_Msg_5fGame_2eproto.base,
  &scc_info_SetupEquipAck_Msg_5fGame_2eproto.base,
  &scc_info_SetupEquipReq_Msg_5fGame_2eproto.base,
  &scc_info_SetupGemAck_Msg_5fGame_2eproto.base,
  &scc_info_SetupGemReq_Msg_5fGame_2eproto.base,
  &scc_info_SetupMountAck_Msg_5fGame_2eproto.base,
  &scc_info_SetupMountReq_Msg_5fGame_2eproto.base,
  &scc_info_SetupPartnerAck_Msg_5fGame_2eproto.base,
  &scc_info_SetupPartnerReq_Msg_5fGame_2eproto.base,
  &scc_info_SetupPetAck_Msg_5fGame_2eproto.base,
  &scc_info_SetupPetReq_Msg_5fGame_2eproto.base,
  &scc_info_StoreBuyAck_Msg_5fGame_2eproto.base,
  &scc_info_StoreBuyReq_Msg_5fGame_2eproto.base,
  &scc_info_SvrRegToSvrAck_Msg_5fGame_2eproto.base,
  &scc_info_SvrRegToSvrReq_Msg_5fGame_2eproto.base,
  &scc_info_TransPartnerData_Msg_5fGame_2eproto.base,
  &scc_info_TransPetData_Msg_5fGame_2eproto.base,
  &scc_info_TransRoleData_Msg_5fGame_2eproto.base,
  &scc_info_TransferDataAck_Msg_5fGame_2eproto.base,
  &scc_info_TransferDataItem_Msg_5fGame_2eproto.base,
  &scc_info_TransferDataReq_Msg_5fGame_2eproto.base,
  &scc_info_UnsetEquipAck_Msg_5fGame_2eproto.base,
  &scc_info_UnsetEquipReq_Msg_5fGame_2eproto.base,
  &scc_info_UnsetGemAck_Msg_5fGame_2eproto.base,
  &scc_info_UnsetGemReq_Msg_5fGame_2eproto.base,
  &scc_info_UnsetMountAck_Msg_5fGame_2eproto.base,
  &scc_info_UnsetMountReq_Msg_5fGame_2eproto.base,
  &scc_info_UnsetPartnerAck_Msg_5fGame_2eproto.base,
  &scc_info_UnsetPartnerReq_Msg_5fGame_2eproto.base,
  &scc_info_UnsetPetAck_Msg_5fGame_2eproto.base,
  &scc_info_UnsetPetReq_Msg_5fGame_2eproto.base,
  &scc_info_UseHpBottleAck_Msg_5fGame_2eproto.base,
  &scc_info_UseHpBottleReq_Msg_5fGame_2eproto.base,
  &scc_info_UseItemAck_Msg_5fGame_2eproto.base,
  &scc_info_UseItemReq_Msg_5fGame_2eproto.base,
  &scc_info_UseMpBottleAck_Msg_5fGame_2eproto.base,
  &scc_info_UseMpBottleReq_Msg_5fGame_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Msg_5fGame_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Msg_5fGame_2eproto = {
  false, false, descriptor_table_protodef_Msg_5fGame_2eproto, "Msg_Game.proto", 5386,
  &descriptor_table_Msg_5fGame_2eproto_once, descriptor_table_Msg_5fGame_2eproto_sccs, descriptor_table_Msg_5fGame_2eproto_deps, 80, 1,
  schemas, file_default_instances, TableStruct_Msg_5fGame_2eproto::offsets,
  file_level_metadata_Msg_5fGame_2eproto, 80, file_level_enum_descriptors_Msg_5fGame_2eproto, file_level_service_descriptors_Msg_5fGame_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Msg_5fGame_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Msg_5fGame_2eproto)), true);

// ===================================================================

void GmStopServerReq::InitAsDefaultInstance() {
}
class GmStopServerReq::_Internal {
 public:
};

GmStopServerReq::GmStopServerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GmStopServerReq)
}
GmStopServerReq::GmStopServerReq(const GmStopServerReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:GmStopServerReq)
}

void GmStopServerReq::SharedCtor() {
  data_ = 0u;
}

GmStopServerReq::~GmStopServerReq() {
  // @@protoc_insertion_point(destructor:GmStopServerReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GmStopServerReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GmStopServerReq::ArenaDtor(void* object) {
  GmStopServerReq* _this = reinterpret_cast< GmStopServerReq* >(object);
  (void)_this;
}
void GmStopServerReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GmStopServerReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GmStopServerReq& GmStopServerReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GmStopServerReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void GmStopServerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:GmStopServerReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GmStopServerReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GmStopServerReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GmStopServerReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Data = 1;
  if (this->data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GmStopServerReq)
  return target;
}

size_t GmStopServerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GmStopServerReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Data = 1;
  if (this->data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GmStopServerReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GmStopServerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GmStopServerReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GmStopServerReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GmStopServerReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GmStopServerReq)
    MergeFrom(*source);
  }
}

void GmStopServerReq::MergeFrom(const GmStopServerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GmStopServerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data() != 0) {
    _internal_set_data(from._internal_data());
  }
}

void GmStopServerReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GmStopServerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GmStopServerReq::CopyFrom(const GmStopServerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GmStopServerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GmStopServerReq::IsInitialized() const {
  return true;
}

void GmStopServerReq::InternalSwap(GmStopServerReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GmStopServerReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GmStopServerAck::InitAsDefaultInstance() {
}
class GmStopServerAck::_Internal {
 public:
};

GmStopServerAck::GmStopServerAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GmStopServerAck)
}
GmStopServerAck::GmStopServerAck(const GmStopServerAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:GmStopServerAck)
}

void GmStopServerAck::SharedCtor() {
  retcode_ = 0u;
}

GmStopServerAck::~GmStopServerAck() {
  // @@protoc_insertion_point(destructor:GmStopServerAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GmStopServerAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GmStopServerAck::ArenaDtor(void* object) {
  GmStopServerAck* _this = reinterpret_cast< GmStopServerAck* >(object);
  (void)_this;
}
void GmStopServerAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GmStopServerAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GmStopServerAck& GmStopServerAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GmStopServerAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void GmStopServerAck::Clear() {
// @@protoc_insertion_point(message_clear_start:GmStopServerAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GmStopServerAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GmStopServerAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GmStopServerAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GmStopServerAck)
  return target;
}

size_t GmStopServerAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GmStopServerAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GmStopServerAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GmStopServerAck)
  GOOGLE_DCHECK_NE(&from, this);
  const GmStopServerAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GmStopServerAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GmStopServerAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GmStopServerAck)
    MergeFrom(*source);
  }
}

void GmStopServerAck::MergeFrom(const GmStopServerAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GmStopServerAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void GmStopServerAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GmStopServerAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GmStopServerAck::CopyFrom(const GmStopServerAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GmStopServerAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GmStopServerAck::IsInitialized() const {
  return true;
}

void GmStopServerAck::InternalSwap(GmStopServerAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GmStopServerAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SvrRegToSvrReq::InitAsDefaultInstance() {
}
class SvrRegToSvrReq::_Internal {
 public:
};

SvrRegToSvrReq::SvrRegToSvrReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SvrRegToSvrReq)
}
SvrRegToSvrReq::SvrRegToSvrReq(const SvrRegToSvrReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servername().empty()) {
    servername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_servername(),
      GetArena());
  }
  serverip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serverip().empty()) {
    serverip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_serverip(),
      GetArena());
  }
  ::memcpy(&serverid_, &from.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&httpport_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(httpport_));
  // @@protoc_insertion_point(copy_constructor:SvrRegToSvrReq)
}

void SvrRegToSvrReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SvrRegToSvrReq_Msg_5fGame_2eproto.base);
  servername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&httpport_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(httpport_));
}

SvrRegToSvrReq::~SvrRegToSvrReq() {
  // @@protoc_insertion_point(destructor:SvrRegToSvrReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SvrRegToSvrReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SvrRegToSvrReq::ArenaDtor(void* object) {
  SvrRegToSvrReq* _this = reinterpret_cast< SvrRegToSvrReq* >(object);
  (void)_this;
}
void SvrRegToSvrReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SvrRegToSvrReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SvrRegToSvrReq& SvrRegToSvrReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SvrRegToSvrReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void SvrRegToSvrReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrRegToSvrReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serverip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&httpport_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(httpport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SvrRegToSvrReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ServerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ServerName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_servername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SvrRegToSvrReq.ServerName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ServerIp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_serverip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SvrRegToSvrReq.ServerIp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ServerPort = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          serverport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 HttpPort = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          httpport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SvrRegToSvrReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SvrRegToSvrReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ServerID = 1;
  if (this->serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serverid(), target);
  }

  // string ServerName = 2;
  if (this->servername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servername().data(), static_cast<int>(this->_internal_servername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SvrRegToSvrReq.ServerName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_servername(), target);
  }

  // string ServerIp = 3;
  if (this->serverip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverip().data(), static_cast<int>(this->_internal_serverip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SvrRegToSvrReq.ServerIp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serverip(), target);
  }

  // int32 ServerPort = 4;
  if (this->serverport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_serverport(), target);
  }

  // int32 HttpPort = 5;
  if (this->httpport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_httpport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrRegToSvrReq)
  return target;
}

size_t SvrRegToSvrReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrRegToSvrReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ServerName = 2;
  if (this->servername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servername());
  }

  // string ServerIp = 3;
  if (this->serverip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverip());
  }

  // int32 ServerID = 1;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverid());
  }

  // int32 ServerPort = 4;
  if (this->serverport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverport());
  }

  // int32 HttpPort = 5;
  if (this->httpport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_httpport());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SvrRegToSvrReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrRegToSvrReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SvrRegToSvrReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SvrRegToSvrReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrRegToSvrReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrRegToSvrReq)
    MergeFrom(*source);
  }
}

void SvrRegToSvrReq::MergeFrom(const SvrRegToSvrReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrRegToSvrReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servername().size() > 0) {
    _internal_set_servername(from._internal_servername());
  }
  if (from.serverip().size() > 0) {
    _internal_set_serverip(from._internal_serverip());
  }
  if (from.serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from.serverport() != 0) {
    _internal_set_serverport(from._internal_serverport());
  }
  if (from.httpport() != 0) {
    _internal_set_httpport(from._internal_httpport());
  }
}

void SvrRegToSvrReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrRegToSvrReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvrRegToSvrReq::CopyFrom(const SvrRegToSvrReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrRegToSvrReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrRegToSvrReq::IsInitialized() const {
  return true;
}

void SvrRegToSvrReq::InternalSwap(SvrRegToSvrReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servername_.Swap(&other->servername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serverip_.Swap(&other->serverip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SvrRegToSvrReq, httpport_)
      + sizeof(SvrRegToSvrReq::httpport_)
      - PROTOBUF_FIELD_OFFSET(SvrRegToSvrReq, serverid_)>(
          reinterpret_cast<char*>(&serverid_),
          reinterpret_cast<char*>(&other->serverid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SvrRegToSvrReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SvrRegToSvrAck::InitAsDefaultInstance() {
}
class SvrRegToSvrAck::_Internal {
 public:
};

SvrRegToSvrAck::SvrRegToSvrAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SvrRegToSvrAck)
}
SvrRegToSvrAck::SvrRegToSvrAck(const SvrRegToSvrAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  newsvrname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_newsvrname().empty()) {
    newsvrname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_newsvrname(),
      GetArena());
  }
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:SvrRegToSvrAck)
}

void SvrRegToSvrAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SvrRegToSvrAck_Msg_5fGame_2eproto.base);
  newsvrname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  retcode_ = 0u;
}

SvrRegToSvrAck::~SvrRegToSvrAck() {
  // @@protoc_insertion_point(destructor:SvrRegToSvrAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SvrRegToSvrAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  newsvrname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SvrRegToSvrAck::ArenaDtor(void* object) {
  SvrRegToSvrAck* _this = reinterpret_cast< SvrRegToSvrAck* >(object);
  (void)_this;
}
void SvrRegToSvrAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SvrRegToSvrAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SvrRegToSvrAck& SvrRegToSvrAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SvrRegToSvrAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void SvrRegToSvrAck::Clear() {
// @@protoc_insertion_point(message_clear_start:SvrRegToSvrAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  newsvrname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SvrRegToSvrAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string NewSvrName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_newsvrname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SvrRegToSvrAck.NewSvrName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SvrRegToSvrAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SvrRegToSvrAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // string NewSvrName = 2;
  if (this->newsvrname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newsvrname().data(), static_cast<int>(this->_internal_newsvrname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SvrRegToSvrAck.NewSvrName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_newsvrname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SvrRegToSvrAck)
  return target;
}

size_t SvrRegToSvrAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SvrRegToSvrAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string NewSvrName = 2;
  if (this->newsvrname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newsvrname());
  }

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SvrRegToSvrAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SvrRegToSvrAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SvrRegToSvrAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SvrRegToSvrAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SvrRegToSvrAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SvrRegToSvrAck)
    MergeFrom(*source);
  }
}

void SvrRegToSvrAck::MergeFrom(const SvrRegToSvrAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SvrRegToSvrAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.newsvrname().size() > 0) {
    _internal_set_newsvrname(from._internal_newsvrname());
  }
  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void SvrRegToSvrAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SvrRegToSvrAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvrRegToSvrAck::CopyFrom(const SvrRegToSvrAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SvrRegToSvrAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrRegToSvrAck::IsInitialized() const {
  return true;
}

void SvrRegToSvrAck::InternalSwap(SvrRegToSvrAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  newsvrname_.Swap(&other->newsvrname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SvrRegToSvrAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleDisconnectReq::InitAsDefaultInstance() {
}
class RoleDisconnectReq::_Internal {
 public:
};

RoleDisconnectReq::RoleDisconnectReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoleDisconnectReq)
}
RoleDisconnectReq::RoleDisconnectReq(const RoleDisconnectReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roleid_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(roleid_));
  // @@protoc_insertion_point(copy_constructor:RoleDisconnectReq)
}

void RoleDisconnectReq::SharedCtor() {
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roleid_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(roleid_));
}

RoleDisconnectReq::~RoleDisconnectReq() {
  // @@protoc_insertion_point(destructor:RoleDisconnectReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoleDisconnectReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoleDisconnectReq::ArenaDtor(void* object) {
  RoleDisconnectReq* _this = reinterpret_cast< RoleDisconnectReq* >(object);
  (void)_this;
}
void RoleDisconnectReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleDisconnectReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleDisconnectReq& RoleDisconnectReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleDisconnectReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void RoleDisconnectReq::Clear() {
// @@protoc_insertion_point(message_clear_start:RoleDisconnectReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roleid_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(roleid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleDisconnectReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 AccountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 RoleID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleDisconnectReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoleDisconnectReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 AccountID = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accountid(), target);
  }

  // uint64 RoleID = 2;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoleDisconnectReq)
  return target;
}

size_t RoleDisconnectReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoleDisconnectReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 AccountID = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accountid());
  }

  // uint64 RoleID = 2;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleDisconnectReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoleDisconnectReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleDisconnectReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleDisconnectReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoleDisconnectReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoleDisconnectReq)
    MergeFrom(*source);
  }
}

void RoleDisconnectReq::MergeFrom(const RoleDisconnectReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoleDisconnectReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
}

void RoleDisconnectReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoleDisconnectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDisconnectReq::CopyFrom(const RoleDisconnectReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoleDisconnectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDisconnectReq::IsInitialized() const {
  return true;
}

void RoleDisconnectReq::InternalSwap(RoleDisconnectReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleDisconnectReq, roleid_)
      + sizeof(RoleDisconnectReq::roleid_)
      - PROTOBUF_FIELD_OFFSET(RoleDisconnectReq, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleDisconnectReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleDisconnectAck::InitAsDefaultInstance() {
}
class RoleDisconnectAck::_Internal {
 public:
};

RoleDisconnectAck::RoleDisconnectAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoleDisconnectAck)
}
RoleDisconnectAck::RoleDisconnectAck(const RoleDisconnectAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:RoleDisconnectAck)
}

void RoleDisconnectAck::SharedCtor() {
  retcode_ = 0u;
}

RoleDisconnectAck::~RoleDisconnectAck() {
  // @@protoc_insertion_point(destructor:RoleDisconnectAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoleDisconnectAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoleDisconnectAck::ArenaDtor(void* object) {
  RoleDisconnectAck* _this = reinterpret_cast< RoleDisconnectAck* >(object);
  (void)_this;
}
void RoleDisconnectAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleDisconnectAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleDisconnectAck& RoleDisconnectAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleDisconnectAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void RoleDisconnectAck::Clear() {
// @@protoc_insertion_point(message_clear_start:RoleDisconnectAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleDisconnectAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleDisconnectAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoleDisconnectAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoleDisconnectAck)
  return target;
}

size_t RoleDisconnectAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoleDisconnectAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleDisconnectAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoleDisconnectAck)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleDisconnectAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleDisconnectAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoleDisconnectAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoleDisconnectAck)
    MergeFrom(*source);
  }
}

void RoleDisconnectAck::MergeFrom(const RoleDisconnectAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoleDisconnectAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void RoleDisconnectAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoleDisconnectAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDisconnectAck::CopyFrom(const RoleDisconnectAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoleDisconnectAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDisconnectAck::IsInitialized() const {
  return true;
}

void RoleDisconnectAck::InternalSwap(RoleDisconnectAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleDisconnectAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleReconnectReq::InitAsDefaultInstance() {
}
class RoleReconnectReq::_Internal {
 public:
};

RoleReconnectReq::RoleReconnectReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoleReconnectReq)
}
RoleReconnectReq::RoleReconnectReq(const RoleReconnectReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&logincode_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(logincode_));
  // @@protoc_insertion_point(copy_constructor:RoleReconnectReq)
}

void RoleReconnectReq::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logincode_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(logincode_));
}

RoleReconnectReq::~RoleReconnectReq() {
  // @@protoc_insertion_point(destructor:RoleReconnectReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoleReconnectReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoleReconnectReq::ArenaDtor(void* object) {
  RoleReconnectReq* _this = reinterpret_cast< RoleReconnectReq* >(object);
  (void)_this;
}
void RoleReconnectReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleReconnectReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleReconnectReq& RoleReconnectReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleReconnectReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void RoleReconnectReq::Clear() {
// @@protoc_insertion_point(message_clear_start:RoleReconnectReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logincode_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(logincode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleReconnectReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 AccountID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LoginCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          logincode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleReconnectReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoleReconnectReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // uint64 AccountID = 2;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_accountid(), target);
  }

  // uint32 LoginCode = 3;
  if (this->logincode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_logincode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoleReconnectReq)
  return target;
}

size_t RoleReconnectReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoleReconnectReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint64 AccountID = 2;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accountid());
  }

  // uint32 LoginCode = 3;
  if (this->logincode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_logincode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleReconnectReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoleReconnectReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleReconnectReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleReconnectReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoleReconnectReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoleReconnectReq)
    MergeFrom(*source);
  }
}

void RoleReconnectReq::MergeFrom(const RoleReconnectReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoleReconnectReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.logincode() != 0) {
    _internal_set_logincode(from._internal_logincode());
  }
}

void RoleReconnectReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoleReconnectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleReconnectReq::CopyFrom(const RoleReconnectReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoleReconnectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleReconnectReq::IsInitialized() const {
  return true;
}

void RoleReconnectReq::InternalSwap(RoleReconnectReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleReconnectReq, logincode_)
      + sizeof(RoleReconnectReq::logincode_)
      - PROTOBUF_FIELD_OFFSET(RoleReconnectReq, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleReconnectReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoleReconnectAck::InitAsDefaultInstance() {
}
class RoleReconnectAck::_Internal {
 public:
};

RoleReconnectAck::RoleReconnectAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoleReconnectAck)
}
RoleReconnectAck::RoleReconnectAck(const RoleReconnectAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:RoleReconnectAck)
}

void RoleReconnectAck::SharedCtor() {
  retcode_ = 0u;
}

RoleReconnectAck::~RoleReconnectAck() {
  // @@protoc_insertion_point(destructor:RoleReconnectAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoleReconnectAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoleReconnectAck::ArenaDtor(void* object) {
  RoleReconnectAck* _this = reinterpret_cast< RoleReconnectAck* >(object);
  (void)_this;
}
void RoleReconnectAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleReconnectAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleReconnectAck& RoleReconnectAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleReconnectAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void RoleReconnectAck::Clear() {
// @@protoc_insertion_point(message_clear_start:RoleReconnectAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleReconnectAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleReconnectAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoleReconnectAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoleReconnectAck)
  return target;
}

size_t RoleReconnectAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoleReconnectAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleReconnectAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoleReconnectAck)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleReconnectAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleReconnectAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoleReconnectAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoleReconnectAck)
    MergeFrom(*source);
  }
}

void RoleReconnectAck::MergeFrom(const RoleReconnectAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoleReconnectAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void RoleReconnectAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoleReconnectAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleReconnectAck::CopyFrom(const RoleReconnectAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoleReconnectAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleReconnectAck::IsInitialized() const {
  return true;
}

void RoleReconnectAck::InternalSwap(RoleReconnectAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleReconnectAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveConnectNty::InitAsDefaultInstance() {
}
class RemoveConnectNty::_Internal {
 public:
};

RemoveConnectNty::RemoveConnectNty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RemoveConnectNty)
}
RemoveConnectNty::RemoveConnectNty(const RemoveConnectNty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roleid_ = from.roleid_;
  // @@protoc_insertion_point(copy_constructor:RemoveConnectNty)
}

void RemoveConnectNty::SharedCtor() {
  roleid_ = PROTOBUF_ULONGLONG(0);
}

RemoveConnectNty::~RemoveConnectNty() {
  // @@protoc_insertion_point(destructor:RemoveConnectNty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveConnectNty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoveConnectNty::ArenaDtor(void* object) {
  RemoveConnectNty* _this = reinterpret_cast< RemoveConnectNty* >(object);
  (void)_this;
}
void RemoveConnectNty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveConnectNty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveConnectNty& RemoveConnectNty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveConnectNty_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void RemoveConnectNty::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoveConnectNty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roleid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveConnectNty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveConnectNty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoveConnectNty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoveConnectNty)
  return target;
}

size_t RemoveConnectNty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoveConnectNty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveConnectNty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemoveConnectNty)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveConnectNty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveConnectNty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemoveConnectNty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemoveConnectNty)
    MergeFrom(*source);
  }
}

void RemoveConnectNty::MergeFrom(const RemoveConnectNty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemoveConnectNty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
}

void RemoveConnectNty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemoveConnectNty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveConnectNty::CopyFrom(const RemoveConnectNty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoveConnectNty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveConnectNty::IsInitialized() const {
  return true;
}

void RemoveConnectNty::InternalSwap(RemoveConnectNty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(roleid_, other->roleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveConnectNty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateNewSceneReq::InitAsDefaultInstance() {
}
class CreateNewSceneReq::_Internal {
 public:
};

CreateNewSceneReq::CreateNewSceneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CreateNewSceneReq)
}
CreateNewSceneReq::CreateNewSceneReq(const CreateNewSceneReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&copyid_, &from.copyid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playernum_) -
    reinterpret_cast<char*>(&copyid_)) + sizeof(playernum_));
  // @@protoc_insertion_point(copy_constructor:CreateNewSceneReq)
}

void CreateNewSceneReq::SharedCtor() {
  ::memset(&copyid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playernum_) -
      reinterpret_cast<char*>(&copyid_)) + sizeof(playernum_));
}

CreateNewSceneReq::~CreateNewSceneReq() {
  // @@protoc_insertion_point(destructor:CreateNewSceneReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateNewSceneReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateNewSceneReq::ArenaDtor(void* object) {
  CreateNewSceneReq* _this = reinterpret_cast< CreateNewSceneReq* >(object);
  (void)_this;
}
void CreateNewSceneReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateNewSceneReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateNewSceneReq& CreateNewSceneReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateNewSceneReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void CreateNewSceneReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateNewSceneReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&copyid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playernum_) -
      reinterpret_cast<char*>(&copyid_)) + sizeof(playernum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateNewSceneReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 CopyID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          copyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CopyType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          copytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PlayerNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          playernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 CreateParam = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          createparam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateNewSceneReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateNewSceneReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 CopyID = 1;
  if (this->copyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_copyid(), target);
  }

  // int32 CopyType = 2;
  if (this->copytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_copytype(), target);
  }

  // int32 PlayerNum = 3;
  if (this->playernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_playernum(), target);
  }

  // uint64 CreateParam = 4;
  if (this->createparam() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_createparam(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateNewSceneReq)
  return target;
}

size_t CreateNewSceneReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateNewSceneReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 CopyID = 1;
  if (this->copyid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copyid());
  }

  // int32 CopyType = 2;
  if (this->copytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copytype());
  }

  // uint64 CreateParam = 4;
  if (this->createparam() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_createparam());
  }

  // int32 PlayerNum = 3;
  if (this->playernum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playernum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateNewSceneReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateNewSceneReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateNewSceneReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateNewSceneReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateNewSceneReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateNewSceneReq)
    MergeFrom(*source);
  }
}

void CreateNewSceneReq::MergeFrom(const CreateNewSceneReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateNewSceneReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.copyid() != 0) {
    _internal_set_copyid(from._internal_copyid());
  }
  if (from.copytype() != 0) {
    _internal_set_copytype(from._internal_copytype());
  }
  if (from.createparam() != 0) {
    _internal_set_createparam(from._internal_createparam());
  }
  if (from.playernum() != 0) {
    _internal_set_playernum(from._internal_playernum());
  }
}

void CreateNewSceneReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateNewSceneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateNewSceneReq::CopyFrom(const CreateNewSceneReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateNewSceneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateNewSceneReq::IsInitialized() const {
  return true;
}

void CreateNewSceneReq::InternalSwap(CreateNewSceneReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateNewSceneReq, playernum_)
      + sizeof(CreateNewSceneReq::playernum_)
      - PROTOBUF_FIELD_OFFSET(CreateNewSceneReq, copyid_)>(
          reinterpret_cast<char*>(&copyid_),
          reinterpret_cast<char*>(&other->copyid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateNewSceneReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateNewSceneAck::InitAsDefaultInstance() {
}
class CreateNewSceneAck::_Internal {
 public:
};

CreateNewSceneAck::CreateNewSceneAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CreateNewSceneAck)
}
CreateNewSceneAck::CreateNewSceneAck(const CreateNewSceneAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&playernum_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(playernum_));
  // @@protoc_insertion_point(copy_constructor:CreateNewSceneAck)
}

void CreateNewSceneAck::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playernum_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(playernum_));
}

CreateNewSceneAck::~CreateNewSceneAck() {
  // @@protoc_insertion_point(destructor:CreateNewSceneAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateNewSceneAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateNewSceneAck::ArenaDtor(void* object) {
  CreateNewSceneAck* _this = reinterpret_cast< CreateNewSceneAck* >(object);
  (void)_this;
}
void CreateNewSceneAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateNewSceneAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateNewSceneAck& CreateNewSceneAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateNewSceneAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void CreateNewSceneAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateNewSceneAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playernum_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(playernum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateNewSceneAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CopyID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          copyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CopyGuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          copyguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 CreateParam = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          createparam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ServerID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CopyType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          copytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PlayerNum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          playernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateNewSceneAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateNewSceneAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // int32 CopyID = 2;
  if (this->copyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_copyid(), target);
  }

  // int32 CopyGuid = 3;
  if (this->copyguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_copyguid(), target);
  }

  // uint64 CreateParam = 4;
  if (this->createparam() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_createparam(), target);
  }

  // int32 ServerID = 5;
  if (this->serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_serverid(), target);
  }

  // int32 CopyType = 6;
  if (this->copytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_copytype(), target);
  }

  // int32 PlayerNum = 7;
  if (this->playernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_playernum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateNewSceneAck)
  return target;
}

size_t CreateNewSceneAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateNewSceneAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  // int32 CopyID = 2;
  if (this->copyid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copyid());
  }

  // uint64 CreateParam = 4;
  if (this->createparam() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_createparam());
  }

  // int32 CopyGuid = 3;
  if (this->copyguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copyguid());
  }

  // int32 ServerID = 5;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverid());
  }

  // int32 CopyType = 6;
  if (this->copytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copytype());
  }

  // int32 PlayerNum = 7;
  if (this->playernum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playernum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateNewSceneAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateNewSceneAck)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateNewSceneAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateNewSceneAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateNewSceneAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateNewSceneAck)
    MergeFrom(*source);
  }
}

void CreateNewSceneAck::MergeFrom(const CreateNewSceneAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateNewSceneAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
  if (from.copyid() != 0) {
    _internal_set_copyid(from._internal_copyid());
  }
  if (from.createparam() != 0) {
    _internal_set_createparam(from._internal_createparam());
  }
  if (from.copyguid() != 0) {
    _internal_set_copyguid(from._internal_copyguid());
  }
  if (from.serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from.copytype() != 0) {
    _internal_set_copytype(from._internal_copytype());
  }
  if (from.playernum() != 0) {
    _internal_set_playernum(from._internal_playernum());
  }
}

void CreateNewSceneAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateNewSceneAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateNewSceneAck::CopyFrom(const CreateNewSceneAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateNewSceneAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateNewSceneAck::IsInitialized() const {
  return true;
}

void CreateNewSceneAck::InternalSwap(CreateNewSceneAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateNewSceneAck, playernum_)
      + sizeof(CreateNewSceneAck::playernum_)
      - PROTOBUF_FIELD_OFFSET(CreateNewSceneAck, retcode_)>(
          reinterpret_cast<char*>(&retcode_),
          reinterpret_cast<char*>(&other->retcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateNewSceneAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnterSceneReq::InitAsDefaultInstance() {
}
class EnterSceneReq::_Internal {
 public:
};

EnterSceneReq::EnterSceneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EnterSceneReq)
}
EnterSceneReq::EnterSceneReq(const EnterSceneReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&copyid_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(copyid_));
  // @@protoc_insertion_point(copy_constructor:EnterSceneReq)
}

void EnterSceneReq::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&copyid_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(copyid_));
}

EnterSceneReq::~EnterSceneReq() {
  // @@protoc_insertion_point(destructor:EnterSceneReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnterSceneReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnterSceneReq::ArenaDtor(void* object) {
  EnterSceneReq* _this = reinterpret_cast< EnterSceneReq* >(object);
  (void)_this;
}
void EnterSceneReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnterSceneReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterSceneReq& EnterSceneReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterSceneReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void EnterSceneReq::Clear() {
// @@protoc_insertion_point(message_clear_start:EnterSceneReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&copyid_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(copyid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterSceneReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ServerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CopyGuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          copyguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CopyID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          copyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterSceneReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnterSceneReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // int32 ServerID = 2;
  if (this->serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_serverid(), target);
  }

  // int32 CopyGuid = 3;
  if (this->copyguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_copyguid(), target);
  }

  // int32 CopyID = 4;
  if (this->copyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_copyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnterSceneReq)
  return target;
}

size_t EnterSceneReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnterSceneReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // int32 ServerID = 2;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverid());
  }

  // int32 CopyGuid = 3;
  if (this->copyguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copyguid());
  }

  // int32 CopyID = 4;
  if (this->copyid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copyid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterSceneReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EnterSceneReq)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterSceneReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnterSceneReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EnterSceneReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EnterSceneReq)
    MergeFrom(*source);
  }
}

void EnterSceneReq::MergeFrom(const EnterSceneReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EnterSceneReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from.copyguid() != 0) {
    _internal_set_copyguid(from._internal_copyguid());
  }
  if (from.copyid() != 0) {
    _internal_set_copyid(from._internal_copyid());
  }
}

void EnterSceneReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EnterSceneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterSceneReq::CopyFrom(const EnterSceneReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnterSceneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterSceneReq::IsInitialized() const {
  return true;
}

void EnterSceneReq::InternalSwap(EnterSceneReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnterSceneReq, copyid_)
      + sizeof(EnterSceneReq::copyid_)
      - PROTOBUF_FIELD_OFFSET(EnterSceneReq, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterSceneReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnterSceneAck::InitAsDefaultInstance() {
}
class EnterSceneAck::_Internal {
 public:
};

void EnterSceneAck::clear_skills() {
  skills_.Clear();
}
EnterSceneAck::EnterSceneAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  equips_(arena),
  skills_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EnterSceneAck)
}
EnterSceneAck::EnterSceneAck(const EnterSceneAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      equips_(from.equips_),
      skills_(from.skills_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rolename().empty()) {
    rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rolename(),
      GetArena());
  }
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&mountid_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(mountid_));
  // @@protoc_insertion_point(copy_constructor:EnterSceneAck)
}

void EnterSceneAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnterSceneAck_Msg_5fGame_2eproto.base);
  rolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mountid_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(mountid_));
}

EnterSceneAck::~EnterSceneAck() {
  // @@protoc_insertion_point(destructor:EnterSceneAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnterSceneAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rolename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnterSceneAck::ArenaDtor(void* object) {
  EnterSceneAck* _this = reinterpret_cast< EnterSceneAck* >(object);
  (void)_this;
}
void EnterSceneAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnterSceneAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterSceneAck& EnterSceneAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterSceneAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void EnterSceneAck::Clear() {
// @@protoc_insertion_point(message_clear_start:EnterSceneAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equips_.Clear();
  skills_.Clear();
  rolename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mountid_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(mountid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterSceneAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CopyID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          copyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CopyGuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          copyguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 RoleID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Carrer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          carrer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ActorID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          actorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string RoleName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_rolename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EnterSceneAck.RoleName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Camp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          camp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float X = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Z = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Ft = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          ft_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 Hp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Mp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 HpMax = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          hpmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MpMax = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          mpmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Speed = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MountID = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          mountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 Equips = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_equips(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152) {
          _internal_add_equips(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SkillItem Skills = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterSceneAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnterSceneAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // int32 CopyID = 2;
  if (this->copyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_copyid(), target);
  }

  // int32 CopyGuid = 3;
  if (this->copyguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_copyguid(), target);
  }

  // uint64 RoleID = 4;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_roleid(), target);
  }

  // int32 Carrer = 5;
  if (this->carrer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_carrer(), target);
  }

  // int32 ActorID = 6;
  if (this->actorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_actorid(), target);
  }

  // string RoleName = 7;
  if (this->rolename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rolename().data(), static_cast<int>(this->_internal_rolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnterSceneAck.RoleName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_rolename(), target);
  }

  // int32 Camp = 8;
  if (this->camp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_camp(), target);
  }

  // float X = 9;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_x(), target);
  }

  // float Y = 10;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_y(), target);
  }

  // float Z = 11;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_z(), target);
  }

  // float Ft = 12;
  if (!(this->ft() <= 0 && this->ft() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_ft(), target);
  }

  // int32 Hp = 13;
  if (this->hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_hp(), target);
  }

  // int32 Mp = 14;
  if (this->mp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_mp(), target);
  }

  // int32 HpMax = 15;
  if (this->hpmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_hpmax(), target);
  }

  // int32 MpMax = 16;
  if (this->mpmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_mpmax(), target);
  }

  // int32 Speed = 17;
  if (this->speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_speed(), target);
  }

  // int32 MountID = 18;
  if (this->mountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_mountid(), target);
  }

  // repeated int32 Equips = 19;
  {
    int byte_size = _equips_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          19, _internal_equips(), byte_size, target);
    }
  }

  // repeated .SkillItem Skills = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skills_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_skills(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnterSceneAck)
  return target;
}

size_t EnterSceneAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnterSceneAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Equips = 19;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->equips_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _equips_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .SkillItem Skills = 20;
  total_size += 2UL * this->_internal_skills_size();
  for (const auto& msg : this->skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string RoleName = 7;
  if (this->rolename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rolename());
  }

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  // int32 CopyID = 2;
  if (this->copyid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copyid());
  }

  // uint64 RoleID = 4;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // int32 CopyGuid = 3;
  if (this->copyguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copyguid());
  }

  // int32 Carrer = 5;
  if (this->carrer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_carrer());
  }

  // int32 ActorID = 6;
  if (this->actorid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_actorid());
  }

  // int32 Camp = 8;
  if (this->camp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_camp());
  }

  // float X = 9;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float Y = 10;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float Z = 11;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // float Ft = 12;
  if (!(this->ft() <= 0 && this->ft() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 Hp = 13;
  if (this->hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hp());
  }

  // int32 Mp = 14;
  if (this->mp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mp());
  }

  // int32 HpMax = 15;
  if (this->hpmax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hpmax());
  }

  // int32 MpMax = 16;
  if (this->mpmax() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mpmax());
  }

  // int32 Speed = 17;
  if (this->speed() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_speed());
  }

  // int32 MountID = 18;
  if (this->mountid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mountid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterSceneAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EnterSceneAck)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterSceneAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnterSceneAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EnterSceneAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EnterSceneAck)
    MergeFrom(*source);
  }
}

void EnterSceneAck::MergeFrom(const EnterSceneAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EnterSceneAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equips_.MergeFrom(from.equips_);
  skills_.MergeFrom(from.skills_);
  if (from.rolename().size() > 0) {
    _internal_set_rolename(from._internal_rolename());
  }
  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
  if (from.copyid() != 0) {
    _internal_set_copyid(from._internal_copyid());
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.copyguid() != 0) {
    _internal_set_copyguid(from._internal_copyguid());
  }
  if (from.carrer() != 0) {
    _internal_set_carrer(from._internal_carrer());
  }
  if (from.actorid() != 0) {
    _internal_set_actorid(from._internal_actorid());
  }
  if (from.camp() != 0) {
    _internal_set_camp(from._internal_camp());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.ft() <= 0 && from.ft() >= 0)) {
    _internal_set_ft(from._internal_ft());
  }
  if (from.hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from.mp() != 0) {
    _internal_set_mp(from._internal_mp());
  }
  if (from.hpmax() != 0) {
    _internal_set_hpmax(from._internal_hpmax());
  }
  if (from.mpmax() != 0) {
    _internal_set_mpmax(from._internal_mpmax());
  }
  if (from.speed() != 0) {
    _internal_set_speed(from._internal_speed());
  }
  if (from.mountid() != 0) {
    _internal_set_mountid(from._internal_mountid());
  }
}

void EnterSceneAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EnterSceneAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterSceneAck::CopyFrom(const EnterSceneAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnterSceneAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterSceneAck::IsInitialized() const {
  return true;
}

void EnterSceneAck::InternalSwap(EnterSceneAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  equips_.InternalSwap(&other->equips_);
  skills_.InternalSwap(&other->skills_);
  rolename_.Swap(&other->rolename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnterSceneAck, mountid_)
      + sizeof(EnterSceneAck::mountid_)
      - PROTOBUF_FIELD_OFFSET(EnterSceneAck, retcode_)>(
          reinterpret_cast<char*>(&retcode_),
          reinterpret_cast<char*>(&other->retcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterSceneAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BackToCityReq::InitAsDefaultInstance() {
}
class BackToCityReq::_Internal {
 public:
};

BackToCityReq::BackToCityReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BackToCityReq)
}
BackToCityReq::BackToCityReq(const BackToCityReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  param_ = from.param_;
  // @@protoc_insertion_point(copy_constructor:BackToCityReq)
}

void BackToCityReq::SharedCtor() {
  param_ = 0u;
}

BackToCityReq::~BackToCityReq() {
  // @@protoc_insertion_point(destructor:BackToCityReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BackToCityReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BackToCityReq::ArenaDtor(void* object) {
  BackToCityReq* _this = reinterpret_cast< BackToCityReq* >(object);
  (void)_this;
}
void BackToCityReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BackToCityReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackToCityReq& BackToCityReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackToCityReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void BackToCityReq::Clear() {
// @@protoc_insertion_point(message_clear_start:BackToCityReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BackToCityReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BackToCityReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BackToCityReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Param = 1;
  if (this->param() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_param(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BackToCityReq)
  return target;
}

size_t BackToCityReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BackToCityReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Param = 1;
  if (this->param() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_param());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackToCityReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BackToCityReq)
  GOOGLE_DCHECK_NE(&from, this);
  const BackToCityReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BackToCityReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BackToCityReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BackToCityReq)
    MergeFrom(*source);
  }
}

void BackToCityReq::MergeFrom(const BackToCityReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BackToCityReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.param() != 0) {
    _internal_set_param(from._internal_param());
  }
}

void BackToCityReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BackToCityReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackToCityReq::CopyFrom(const BackToCityReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BackToCityReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackToCityReq::IsInitialized() const {
  return true;
}

void BackToCityReq::InternalSwap(BackToCityReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(param_, other->param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BackToCityReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BackToCityAck::InitAsDefaultInstance() {
}
class BackToCityAck::_Internal {
 public:
};

BackToCityAck::BackToCityAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BackToCityAck)
}
BackToCityAck::BackToCityAck(const BackToCityAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:BackToCityAck)
}

void BackToCityAck::SharedCtor() {
  retcode_ = 0u;
}

BackToCityAck::~BackToCityAck() {
  // @@protoc_insertion_point(destructor:BackToCityAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BackToCityAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BackToCityAck::ArenaDtor(void* object) {
  BackToCityAck* _this = reinterpret_cast< BackToCityAck* >(object);
  (void)_this;
}
void BackToCityAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BackToCityAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackToCityAck& BackToCityAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackToCityAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void BackToCityAck::Clear() {
// @@protoc_insertion_point(message_clear_start:BackToCityAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BackToCityAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BackToCityAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BackToCityAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BackToCityAck)
  return target;
}

size_t BackToCityAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BackToCityAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackToCityAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BackToCityAck)
  GOOGLE_DCHECK_NE(&from, this);
  const BackToCityAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BackToCityAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BackToCityAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BackToCityAck)
    MergeFrom(*source);
  }
}

void BackToCityAck::MergeFrom(const BackToCityAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BackToCityAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void BackToCityAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BackToCityAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackToCityAck::CopyFrom(const BackToCityAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BackToCityAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackToCityAck::IsInitialized() const {
  return true;
}

void BackToCityAck::InternalSwap(BackToCityAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BackToCityAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaveSceneReq::InitAsDefaultInstance() {
}
class LeaveSceneReq::_Internal {
 public:
};

LeaveSceneReq::LeaveSceneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LeaveSceneReq)
}
LeaveSceneReq::LeaveSceneReq(const LeaveSceneReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:LeaveSceneReq)
}

void LeaveSceneReq::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(reason_));
}

LeaveSceneReq::~LeaveSceneReq() {
  // @@protoc_insertion_point(destructor:LeaveSceneReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaveSceneReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LeaveSceneReq::ArenaDtor(void* object) {
  LeaveSceneReq* _this = reinterpret_cast< LeaveSceneReq* >(object);
  (void)_this;
}
void LeaveSceneReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaveSceneReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaveSceneReq& LeaveSceneReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaveSceneReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void LeaveSceneReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LeaveSceneReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveSceneReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaveSceneReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LeaveSceneReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // int32 Reason = 2;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LeaveSceneReq)
  return target;
}

size_t LeaveSceneReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LeaveSceneReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // int32 Reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaveSceneReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LeaveSceneReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaveSceneReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaveSceneReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LeaveSceneReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LeaveSceneReq)
    MergeFrom(*source);
  }
}

void LeaveSceneReq::MergeFrom(const LeaveSceneReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LeaveSceneReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void LeaveSceneReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LeaveSceneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveSceneReq::CopyFrom(const LeaveSceneReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LeaveSceneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveSceneReq::IsInitialized() const {
  return true;
}

void LeaveSceneReq::InternalSwap(LeaveSceneReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaveSceneReq, reason_)
      + sizeof(LeaveSceneReq::reason_)
      - PROTOBUF_FIELD_OFFSET(LeaveSceneReq, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveSceneReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaveSceneAck::InitAsDefaultInstance() {
}
class LeaveSceneAck::_Internal {
 public:
};

LeaveSceneAck::LeaveSceneAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LeaveSceneAck)
}
LeaveSceneAck::LeaveSceneAck(const LeaveSceneAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:LeaveSceneAck)
}

void LeaveSceneAck::SharedCtor() {
  retcode_ = 0u;
}

LeaveSceneAck::~LeaveSceneAck() {
  // @@protoc_insertion_point(destructor:LeaveSceneAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaveSceneAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LeaveSceneAck::ArenaDtor(void* object) {
  LeaveSceneAck* _this = reinterpret_cast< LeaveSceneAck* >(object);
  (void)_this;
}
void LeaveSceneAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaveSceneAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaveSceneAck& LeaveSceneAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaveSceneAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void LeaveSceneAck::Clear() {
// @@protoc_insertion_point(message_clear_start:LeaveSceneAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveSceneAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaveSceneAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LeaveSceneAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LeaveSceneAck)
  return target;
}

size_t LeaveSceneAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LeaveSceneAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaveSceneAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LeaveSceneAck)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaveSceneAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaveSceneAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LeaveSceneAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LeaveSceneAck)
    MergeFrom(*source);
  }
}

void LeaveSceneAck::MergeFrom(const LeaveSceneAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LeaveSceneAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void LeaveSceneAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LeaveSceneAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveSceneAck::CopyFrom(const LeaveSceneAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LeaveSceneAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveSceneAck::IsInitialized() const {
  return true;
}

void LeaveSceneAck::InternalSwap(LeaveSceneAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveSceneAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AbortSceneReq::InitAsDefaultInstance() {
}
class AbortSceneReq::_Internal {
 public:
};

AbortSceneReq::AbortSceneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AbortSceneReq)
}
AbortSceneReq::AbortSceneReq(const AbortSceneReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:AbortSceneReq)
}

void AbortSceneReq::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(reason_));
}

AbortSceneReq::~AbortSceneReq() {
  // @@protoc_insertion_point(destructor:AbortSceneReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AbortSceneReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AbortSceneReq::ArenaDtor(void* object) {
  AbortSceneReq* _this = reinterpret_cast< AbortSceneReq* >(object);
  (void)_this;
}
void AbortSceneReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AbortSceneReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbortSceneReq& AbortSceneReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AbortSceneReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void AbortSceneReq::Clear() {
// @@protoc_insertion_point(message_clear_start:AbortSceneReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbortSceneReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AbortSceneReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AbortSceneReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // int32 Reason = 2;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AbortSceneReq)
  return target;
}

size_t AbortSceneReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AbortSceneReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // int32 Reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbortSceneReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AbortSceneReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AbortSceneReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AbortSceneReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AbortSceneReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AbortSceneReq)
    MergeFrom(*source);
  }
}

void AbortSceneReq::MergeFrom(const AbortSceneReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AbortSceneReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void AbortSceneReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AbortSceneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbortSceneReq::CopyFrom(const AbortSceneReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AbortSceneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbortSceneReq::IsInitialized() const {
  return true;
}

void AbortSceneReq::InternalSwap(AbortSceneReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AbortSceneReq, reason_)
      + sizeof(AbortSceneReq::reason_)
      - PROTOBUF_FIELD_OFFSET(AbortSceneReq, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AbortSceneReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AbortSceneAck::InitAsDefaultInstance() {
}
class AbortSceneAck::_Internal {
 public:
};

AbortSceneAck::AbortSceneAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AbortSceneAck)
}
AbortSceneAck::AbortSceneAck(const AbortSceneAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:AbortSceneAck)
}

void AbortSceneAck::SharedCtor() {
  retcode_ = 0u;
}

AbortSceneAck::~AbortSceneAck() {
  // @@protoc_insertion_point(destructor:AbortSceneAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AbortSceneAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AbortSceneAck::ArenaDtor(void* object) {
  AbortSceneAck* _this = reinterpret_cast< AbortSceneAck* >(object);
  (void)_this;
}
void AbortSceneAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AbortSceneAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbortSceneAck& AbortSceneAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AbortSceneAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void AbortSceneAck::Clear() {
// @@protoc_insertion_point(message_clear_start:AbortSceneAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbortSceneAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AbortSceneAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AbortSceneAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AbortSceneAck)
  return target;
}

size_t AbortSceneAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AbortSceneAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbortSceneAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AbortSceneAck)
  GOOGLE_DCHECK_NE(&from, this);
  const AbortSceneAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AbortSceneAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AbortSceneAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AbortSceneAck)
    MergeFrom(*source);
  }
}

void AbortSceneAck::MergeFrom(const AbortSceneAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AbortSceneAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void AbortSceneAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AbortSceneAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbortSceneAck::CopyFrom(const AbortSceneAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AbortSceneAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbortSceneAck::IsInitialized() const {
  return true;
}

void AbortSceneAck::InternalSwap(AbortSceneAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AbortSceneAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AbortSceneNty::InitAsDefaultInstance() {
}
class AbortSceneNty::_Internal {
 public:
};

AbortSceneNty::AbortSceneNty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AbortSceneNty)
}
AbortSceneNty::AbortSceneNty(const AbortSceneNty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&param_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(param_));
  // @@protoc_insertion_point(copy_constructor:AbortSceneNty)
}

void AbortSceneNty::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(param_));
}

AbortSceneNty::~AbortSceneNty() {
  // @@protoc_insertion_point(destructor:AbortSceneNty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AbortSceneNty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AbortSceneNty::ArenaDtor(void* object) {
  AbortSceneNty* _this = reinterpret_cast< AbortSceneNty* >(object);
  (void)_this;
}
void AbortSceneNty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AbortSceneNty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbortSceneNty& AbortSceneNty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AbortSceneNty_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void AbortSceneNty::Clear() {
// @@protoc_insertion_point(message_clear_start:AbortSceneNty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(param_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbortSceneNty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CopyID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          copyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CopyGuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          copyguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CopyType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          copytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ServerID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AbortSceneNty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AbortSceneNty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // int32 CopyID = 2;
  if (this->copyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_copyid(), target);
  }

  // int32 CopyGuid = 3;
  if (this->copyguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_copyguid(), target);
  }

  // int32 CopyType = 4;
  if (this->copytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_copytype(), target);
  }

  // int32 ServerID = 5;
  if (this->serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_serverid(), target);
  }

  // int32 Param = 6;
  if (this->param() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_param(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AbortSceneNty)
  return target;
}

size_t AbortSceneNty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AbortSceneNty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // int32 CopyID = 2;
  if (this->copyid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copyid());
  }

  // int32 CopyGuid = 3;
  if (this->copyguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copyguid());
  }

  // int32 CopyType = 4;
  if (this->copytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copytype());
  }

  // int32 ServerID = 5;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverid());
  }

  // int32 Param = 6;
  if (this->param() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_param());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbortSceneNty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AbortSceneNty)
  GOOGLE_DCHECK_NE(&from, this);
  const AbortSceneNty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AbortSceneNty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AbortSceneNty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AbortSceneNty)
    MergeFrom(*source);
  }
}

void AbortSceneNty::MergeFrom(const AbortSceneNty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AbortSceneNty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.copyid() != 0) {
    _internal_set_copyid(from._internal_copyid());
  }
  if (from.copyguid() != 0) {
    _internal_set_copyguid(from._internal_copyguid());
  }
  if (from.copytype() != 0) {
    _internal_set_copytype(from._internal_copytype());
  }
  if (from.serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from.param() != 0) {
    _internal_set_param(from._internal_param());
  }
}

void AbortSceneNty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AbortSceneNty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbortSceneNty::CopyFrom(const AbortSceneNty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AbortSceneNty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbortSceneNty::IsInitialized() const {
  return true;
}

void AbortSceneNty::InternalSwap(AbortSceneNty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AbortSceneNty, param_)
      + sizeof(AbortSceneNty::param_)
      - PROTOBUF_FIELD_OFFSET(AbortSceneNty, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AbortSceneNty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransRoleData::InitAsDefaultInstance() {
}
class TransRoleData::_Internal {
 public:
};

void TransRoleData::clear_skills() {
  skills_.Clear();
}
TransRoleData::TransRoleData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  equips_(arena),
  propertys_(arena),
  skills_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TransRoleData)
}
TransRoleData::TransRoleData(const TransRoleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      equips_(from.equips_),
      propertys_(from.propertys_),
      skills_(from.skills_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&robot_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(robot_));
  // @@protoc_insertion_point(copy_constructor:TransRoleData)
}

void TransRoleData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransRoleData_Msg_5fGame_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robot_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(robot_));
}

TransRoleData::~TransRoleData() {
  // @@protoc_insertion_point(destructor:TransRoleData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransRoleData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransRoleData::ArenaDtor(void* object) {
  TransRoleData* _this = reinterpret_cast< TransRoleData* >(object);
  (void)_this;
}
void TransRoleData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransRoleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransRoleData& TransRoleData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransRoleData_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void TransRoleData::Clear() {
// @@protoc_insertion_point(message_clear_start:TransRoleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equips_.Clear();
  propertys_.Clear();
  skills_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robot_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(robot_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransRoleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TransRoleData.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CarrerID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          carrerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ActorID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          actorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MountID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          mountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Robot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          robot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 Equips = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_equips(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_equips(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 Propertys = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_propertys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_propertys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SkillItem Skills = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransRoleData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransRoleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransRoleData.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 CarrerID = 3;
  if (this->carrerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_carrerid(), target);
  }

  // int32 ActorID = 4;
  if (this->actorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_actorid(), target);
  }

  // int32 Level = 5;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_level(), target);
  }

  // int32 MountID = 6;
  if (this->mountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_mountid(), target);
  }

  // int32 Robot = 7;
  if (this->robot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_robot(), target);
  }

  // repeated int32 Equips = 8;
  {
    int byte_size = _equips_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_equips(), byte_size, target);
    }
  }

  // repeated int32 Propertys = 9;
  {
    int byte_size = _propertys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_propertys(), byte_size, target);
    }
  }

  // repeated .SkillItem Skills = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skills_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_skills(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransRoleData)
  return target;
}

size_t TransRoleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransRoleData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Equips = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->equips_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _equips_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 Propertys = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->propertys_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _propertys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .SkillItem Skills = 10;
  total_size += 1UL * this->_internal_skills_size();
  for (const auto& msg : this->skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // int32 CarrerID = 3;
  if (this->carrerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_carrerid());
  }

  // int32 ActorID = 4;
  if (this->actorid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_actorid());
  }

  // int32 Level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 MountID = 6;
  if (this->mountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mountid());
  }

  // int32 Robot = 7;
  if (this->robot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_robot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransRoleData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransRoleData)
  GOOGLE_DCHECK_NE(&from, this);
  const TransRoleData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransRoleData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransRoleData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransRoleData)
    MergeFrom(*source);
  }
}

void TransRoleData::MergeFrom(const TransRoleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransRoleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equips_.MergeFrom(from.equips_);
  propertys_.MergeFrom(from.propertys_);
  skills_.MergeFrom(from.skills_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.carrerid() != 0) {
    _internal_set_carrerid(from._internal_carrerid());
  }
  if (from.actorid() != 0) {
    _internal_set_actorid(from._internal_actorid());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.mountid() != 0) {
    _internal_set_mountid(from._internal_mountid());
  }
  if (from.robot() != 0) {
    _internal_set_robot(from._internal_robot());
  }
}

void TransRoleData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransRoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransRoleData::CopyFrom(const TransRoleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransRoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransRoleData::IsInitialized() const {
  return true;
}

void TransRoleData::InternalSwap(TransRoleData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  equips_.InternalSwap(&other->equips_);
  propertys_.InternalSwap(&other->propertys_);
  skills_.InternalSwap(&other->skills_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransRoleData, robot_)
      + sizeof(TransRoleData::robot_)
      - PROTOBUF_FIELD_OFFSET(TransRoleData, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransRoleData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransPetData::InitAsDefaultInstance() {
}
class TransPetData::_Internal {
 public:
};

void TransPetData::clear_skills() {
  skills_.Clear();
}
TransPetData::TransPetData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  propertys_(arena),
  skills_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TransPetData)
}
TransPetData::TransPetData(const TransPetData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      propertys_(from.propertys_),
      skills_(from.skills_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&petguid_, &from.petguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&petguid_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:TransPetData)
}

void TransPetData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransPetData_Msg_5fGame_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&petguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&petguid_)) + sizeof(level_));
}

TransPetData::~TransPetData() {
  // @@protoc_insertion_point(destructor:TransPetData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransPetData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransPetData::ArenaDtor(void* object) {
  TransPetData* _this = reinterpret_cast< TransPetData* >(object);
  (void)_this;
}
void TransPetData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransPetData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransPetData& TransPetData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransPetData_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void TransPetData::Clear() {
// @@protoc_insertion_point(message_clear_start:TransPetData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  propertys_.Clear();
  skills_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&petguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&petguid_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransPetData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 PetGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          petguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PetID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          petid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ActorID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          actorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TransPetData.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 Propertys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_propertys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_propertys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SkillItem Skills = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransPetData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransPetData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 PetGuid = 1;
  if (this->petguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_petguid(), target);
  }

  // int32 PetID = 2;
  if (this->petid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_petid(), target);
  }

  // int32 ActorID = 3;
  if (this->actorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_actorid(), target);
  }

  // string Name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransPetData.Name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // int32 Level = 5;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_level(), target);
  }

  // repeated int32 Propertys = 6;
  {
    int byte_size = _propertys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_propertys(), byte_size, target);
    }
  }

  // repeated .SkillItem Skills = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skills_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_skills(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransPetData)
  return target;
}

size_t TransPetData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransPetData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Propertys = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->propertys_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _propertys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .SkillItem Skills = 7;
  total_size += 1UL * this->_internal_skills_size();
  for (const auto& msg : this->skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 PetGuid = 1;
  if (this->petguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_petguid());
  }

  // int32 PetID = 2;
  if (this->petid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_petid());
  }

  // int32 ActorID = 3;
  if (this->actorid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_actorid());
  }

  // int32 Level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransPetData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransPetData)
  GOOGLE_DCHECK_NE(&from, this);
  const TransPetData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransPetData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransPetData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransPetData)
    MergeFrom(*source);
  }
}

void TransPetData::MergeFrom(const TransPetData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransPetData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  propertys_.MergeFrom(from.propertys_);
  skills_.MergeFrom(from.skills_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.petguid() != 0) {
    _internal_set_petguid(from._internal_petguid());
  }
  if (from.petid() != 0) {
    _internal_set_petid(from._internal_petid());
  }
  if (from.actorid() != 0) {
    _internal_set_actorid(from._internal_actorid());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void TransPetData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransPetData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransPetData::CopyFrom(const TransPetData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransPetData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransPetData::IsInitialized() const {
  return true;
}

void TransPetData::InternalSwap(TransPetData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  propertys_.InternalSwap(&other->propertys_);
  skills_.InternalSwap(&other->skills_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransPetData, level_)
      + sizeof(TransPetData::level_)
      - PROTOBUF_FIELD_OFFSET(TransPetData, petguid_)>(
          reinterpret_cast<char*>(&petguid_),
          reinterpret_cast<char*>(&other->petguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransPetData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransPartnerData::InitAsDefaultInstance() {
}
class TransPartnerData::_Internal {
 public:
};

void TransPartnerData::clear_skills() {
  skills_.Clear();
}
TransPartnerData::TransPartnerData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  propertys_(arena),
  skills_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TransPartnerData)
}
TransPartnerData::TransPartnerData(const TransPartnerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      propertys_(from.propertys_),
      skills_(from.skills_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&partnerguid_, &from.partnerguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&partnerguid_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:TransPartnerData)
}

void TransPartnerData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransPartnerData_Msg_5fGame_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&partnerguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&partnerguid_)) + sizeof(level_));
}

TransPartnerData::~TransPartnerData() {
  // @@protoc_insertion_point(destructor:TransPartnerData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransPartnerData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransPartnerData::ArenaDtor(void* object) {
  TransPartnerData* _this = reinterpret_cast< TransPartnerData* >(object);
  (void)_this;
}
void TransPartnerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransPartnerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransPartnerData& TransPartnerData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransPartnerData_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void TransPartnerData::Clear() {
// @@protoc_insertion_point(message_clear_start:TransPartnerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  propertys_.Clear();
  skills_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&partnerguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&partnerguid_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransPartnerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 PartnerGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          partnerguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PartnerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          partnerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ActorID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          actorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TransPartnerData.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 Propertys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_propertys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_propertys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SkillItem Skills = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransPartnerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransPartnerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 PartnerGuid = 1;
  if (this->partnerguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_partnerguid(), target);
  }

  // int32 PartnerID = 2;
  if (this->partnerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_partnerid(), target);
  }

  // int32 ActorID = 3;
  if (this->actorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_actorid(), target);
  }

  // string Name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransPartnerData.Name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // int32 Level = 5;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_level(), target);
  }

  // repeated int32 Propertys = 6;
  {
    int byte_size = _propertys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_propertys(), byte_size, target);
    }
  }

  // repeated .SkillItem Skills = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skills_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_skills(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransPartnerData)
  return target;
}

size_t TransPartnerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransPartnerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Propertys = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->propertys_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _propertys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .SkillItem Skills = 7;
  total_size += 1UL * this->_internal_skills_size();
  for (const auto& msg : this->skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 PartnerGuid = 1;
  if (this->partnerguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_partnerguid());
  }

  // int32 PartnerID = 2;
  if (this->partnerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_partnerid());
  }

  // int32 ActorID = 3;
  if (this->actorid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_actorid());
  }

  // int32 Level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransPartnerData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransPartnerData)
  GOOGLE_DCHECK_NE(&from, this);
  const TransPartnerData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransPartnerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransPartnerData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransPartnerData)
    MergeFrom(*source);
  }
}

void TransPartnerData::MergeFrom(const TransPartnerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransPartnerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  propertys_.MergeFrom(from.propertys_);
  skills_.MergeFrom(from.skills_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.partnerguid() != 0) {
    _internal_set_partnerguid(from._internal_partnerguid());
  }
  if (from.partnerid() != 0) {
    _internal_set_partnerid(from._internal_partnerid());
  }
  if (from.actorid() != 0) {
    _internal_set_actorid(from._internal_actorid());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void TransPartnerData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransPartnerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransPartnerData::CopyFrom(const TransPartnerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransPartnerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransPartnerData::IsInitialized() const {
  return true;
}

void TransPartnerData::InternalSwap(TransPartnerData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  propertys_.InternalSwap(&other->propertys_);
  skills_.InternalSwap(&other->skills_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransPartnerData, level_)
      + sizeof(TransPartnerData::level_)
      - PROTOBUF_FIELD_OFFSET(TransPartnerData, partnerguid_)>(
          reinterpret_cast<char*>(&partnerguid_),
          reinterpret_cast<char*>(&other->partnerguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransPartnerData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransferDataItem::InitAsDefaultInstance() {
  ::_TransferDataItem_default_instance_._instance.get_mutable()->roledata_ = const_cast< ::TransRoleData*>(
      ::TransRoleData::internal_default_instance());
  ::_TransferDataItem_default_instance_._instance.get_mutable()->petdata_ = const_cast< ::TransPetData*>(
      ::TransPetData::internal_default_instance());
  ::_TransferDataItem_default_instance_._instance.get_mutable()->partnerdata_ = const_cast< ::TransPartnerData*>(
      ::TransPartnerData::internal_default_instance());
}
class TransferDataItem::_Internal {
 public:
  static const ::TransRoleData& roledata(const TransferDataItem* msg);
  static const ::TransPetData& petdata(const TransferDataItem* msg);
  static const ::TransPartnerData& partnerdata(const TransferDataItem* msg);
};

const ::TransRoleData&
TransferDataItem::_Internal::roledata(const TransferDataItem* msg) {
  return *msg->roledata_;
}
const ::TransPetData&
TransferDataItem::_Internal::petdata(const TransferDataItem* msg) {
  return *msg->petdata_;
}
const ::TransPartnerData&
TransferDataItem::_Internal::partnerdata(const TransferDataItem* msg) {
  return *msg->partnerdata_;
}
TransferDataItem::TransferDataItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TransferDataItem)
}
TransferDataItem::TransferDataItem(const TransferDataItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roledata()) {
    roledata_ = new ::TransRoleData(*from.roledata_);
  } else {
    roledata_ = nullptr;
  }
  if (from._internal_has_petdata()) {
    petdata_ = new ::TransPetData(*from.petdata_);
  } else {
    petdata_ = nullptr;
  }
  if (from._internal_has_partnerdata()) {
    partnerdata_ = new ::TransPartnerData(*from.partnerdata_);
  } else {
    partnerdata_ = nullptr;
  }
  camp_ = from.camp_;
  // @@protoc_insertion_point(copy_constructor:TransferDataItem)
}

void TransferDataItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferDataItem_Msg_5fGame_2eproto.base);
  ::memset(&roledata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camp_) -
      reinterpret_cast<char*>(&roledata_)) + sizeof(camp_));
}

TransferDataItem::~TransferDataItem() {
  // @@protoc_insertion_point(destructor:TransferDataItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferDataItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete roledata_;
  if (this != internal_default_instance()) delete petdata_;
  if (this != internal_default_instance()) delete partnerdata_;
}

void TransferDataItem::ArenaDtor(void* object) {
  TransferDataItem* _this = reinterpret_cast< TransferDataItem* >(object);
  (void)_this;
}
void TransferDataItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferDataItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferDataItem& TransferDataItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferDataItem_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void TransferDataItem::Clear() {
// @@protoc_insertion_point(message_clear_start:TransferDataItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && roledata_ != nullptr) {
    delete roledata_;
  }
  roledata_ = nullptr;
  if (GetArena() == nullptr && petdata_ != nullptr) {
    delete petdata_;
  }
  petdata_ = nullptr;
  if (GetArena() == nullptr && partnerdata_ != nullptr) {
    delete partnerdata_;
  }
  partnerdata_ = nullptr;
  camp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferDataItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Camp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          camp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransRoleData RoleData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roledata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransPetData PetData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_petdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransPartnerData PartnerData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_partnerdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferDataItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransferDataItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Camp = 1;
  if (this->camp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_camp(), target);
  }

  // .TransRoleData RoleData = 2;
  if (this->has_roledata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::roledata(this), target, stream);
  }

  // .TransPetData PetData = 3;
  if (this->has_petdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::petdata(this), target, stream);
  }

  // .TransPartnerData PartnerData = 4;
  if (this->has_partnerdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::partnerdata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransferDataItem)
  return target;
}

size_t TransferDataItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransferDataItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TransRoleData RoleData = 2;
  if (this->has_roledata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roledata_);
  }

  // .TransPetData PetData = 3;
  if (this->has_petdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *petdata_);
  }

  // .TransPartnerData PartnerData = 4;
  if (this->has_partnerdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *partnerdata_);
  }

  // int32 Camp = 1;
  if (this->camp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_camp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferDataItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransferDataItem)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferDataItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferDataItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransferDataItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransferDataItem)
    MergeFrom(*source);
  }
}

void TransferDataItem::MergeFrom(const TransferDataItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransferDataItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_roledata()) {
    _internal_mutable_roledata()->::TransRoleData::MergeFrom(from._internal_roledata());
  }
  if (from.has_petdata()) {
    _internal_mutable_petdata()->::TransPetData::MergeFrom(from._internal_petdata());
  }
  if (from.has_partnerdata()) {
    _internal_mutable_partnerdata()->::TransPartnerData::MergeFrom(from._internal_partnerdata());
  }
  if (from.camp() != 0) {
    _internal_set_camp(from._internal_camp());
  }
}

void TransferDataItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransferDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferDataItem::CopyFrom(const TransferDataItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransferDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferDataItem::IsInitialized() const {
  return true;
}

void TransferDataItem::InternalSwap(TransferDataItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferDataItem, camp_)
      + sizeof(TransferDataItem::camp_)
      - PROTOBUF_FIELD_OFFSET(TransferDataItem, roledata_)>(
          reinterpret_cast<char*>(&roledata_),
          reinterpret_cast<char*>(&other->roledata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferDataItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransferDataReq::InitAsDefaultInstance() {
}
class TransferDataReq::_Internal {
 public:
};

TransferDataReq::TransferDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transdatas_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TransferDataReq)
}
TransferDataReq::TransferDataReq(const TransferDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transdatas_(from.transdatas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TransferDataReq)
}

void TransferDataReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferDataReq_Msg_5fGame_2eproto.base);
}

TransferDataReq::~TransferDataReq() {
  // @@protoc_insertion_point(destructor:TransferDataReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferDataReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransferDataReq::ArenaDtor(void* object) {
  TransferDataReq* _this = reinterpret_cast< TransferDataReq* >(object);
  (void)_this;
}
void TransferDataReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferDataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferDataReq& TransferDataReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferDataReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void TransferDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:TransferDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transdatas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferDataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .TransferDataItem TransDatas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transdatas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferDataReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransferDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TransferDataItem TransDatas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transdatas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transdatas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransferDataReq)
  return target;
}

size_t TransferDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransferDataReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TransferDataItem TransDatas = 1;
  total_size += 1UL * this->_internal_transdatas_size();
  for (const auto& msg : this->transdatas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferDataReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransferDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferDataReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferDataReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransferDataReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransferDataReq)
    MergeFrom(*source);
  }
}

void TransferDataReq::MergeFrom(const TransferDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransferDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transdatas_.MergeFrom(from.transdatas_);
}

void TransferDataReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransferDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferDataReq::CopyFrom(const TransferDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransferDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferDataReq::IsInitialized() const {
  return true;
}

void TransferDataReq::InternalSwap(TransferDataReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transdatas_.InternalSwap(&other->transdatas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferDataReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransferDataAck::InitAsDefaultInstance() {
}
class TransferDataAck::_Internal {
 public:
};

TransferDataAck::TransferDataAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TransferDataAck)
}
TransferDataAck::TransferDataAck(const TransferDataAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:TransferDataAck)
}

void TransferDataAck::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(serverid_));
}

TransferDataAck::~TransferDataAck() {
  // @@protoc_insertion_point(destructor:TransferDataAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferDataAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TransferDataAck::ArenaDtor(void* object) {
  TransferDataAck* _this = reinterpret_cast< TransferDataAck* >(object);
  (void)_this;
}
void TransferDataAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferDataAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferDataAck& TransferDataAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferDataAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void TransferDataAck::Clear() {
// @@protoc_insertion_point(message_clear_start:TransferDataAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferDataAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 RoleID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CopyID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          copyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CopyGuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          copyguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ServerID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferDataAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransferDataAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // uint64 RoleID = 2;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roleid(), target);
  }

  // int32 CopyID = 3;
  if (this->copyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_copyid(), target);
  }

  // int32 CopyGuid = 4;
  if (this->copyguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_copyguid(), target);
  }

  // int32 ServerID = 5;
  if (this->serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransferDataAck)
  return target;
}

size_t TransferDataAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransferDataAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 2;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  // int32 CopyID = 3;
  if (this->copyid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copyid());
  }

  // int32 CopyGuid = 4;
  if (this->copyguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copyguid());
  }

  // int32 ServerID = 5;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferDataAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransferDataAck)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferDataAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferDataAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransferDataAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransferDataAck)
    MergeFrom(*source);
  }
}

void TransferDataAck::MergeFrom(const TransferDataAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransferDataAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
  if (from.copyid() != 0) {
    _internal_set_copyid(from._internal_copyid());
  }
  if (from.copyguid() != 0) {
    _internal_set_copyguid(from._internal_copyguid());
  }
  if (from.serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
}

void TransferDataAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransferDataAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferDataAck::CopyFrom(const TransferDataAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransferDataAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferDataAck::IsInitialized() const {
  return true;
}

void TransferDataAck::InternalSwap(TransferDataAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferDataAck, serverid_)
      + sizeof(TransferDataAck::serverid_)
      - PROTOBUF_FIELD_OFFSET(TransferDataAck, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferDataAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NotifyIntoScene::InitAsDefaultInstance() {
}
class NotifyIntoScene::_Internal {
 public:
};

NotifyIntoScene::NotifyIntoScene(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NotifyIntoScene)
}
NotifyIntoScene::NotifyIntoScene(const NotifyIntoScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:NotifyIntoScene)
}

void NotifyIntoScene::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(serverid_));
}

NotifyIntoScene::~NotifyIntoScene() {
  // @@protoc_insertion_point(destructor:NotifyIntoScene)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NotifyIntoScene::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NotifyIntoScene::ArenaDtor(void* object) {
  NotifyIntoScene* _this = reinterpret_cast< NotifyIntoScene* >(object);
  (void)_this;
}
void NotifyIntoScene::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotifyIntoScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotifyIntoScene& NotifyIntoScene::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NotifyIntoScene_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void NotifyIntoScene::Clear() {
// @@protoc_insertion_point(message_clear_start:NotifyIntoScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyIntoScene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CopyID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          copyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CopyGuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          copyguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ServerID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NotifyIntoScene::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NotifyIntoScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // int32 CopyID = 2;
  if (this->copyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_copyid(), target);
  }

  // int32 CopyGuid = 3;
  if (this->copyguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_copyguid(), target);
  }

  // int32 ServerID = 4;
  if (this->serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NotifyIntoScene)
  return target;
}

size_t NotifyIntoScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NotifyIntoScene)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // int32 CopyID = 2;
  if (this->copyid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copyid());
  }

  // int32 CopyGuid = 3;
  if (this->copyguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copyguid());
  }

  // int32 ServerID = 4;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyIntoScene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NotifyIntoScene)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyIntoScene* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NotifyIntoScene>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NotifyIntoScene)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NotifyIntoScene)
    MergeFrom(*source);
  }
}

void NotifyIntoScene::MergeFrom(const NotifyIntoScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NotifyIntoScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.copyid() != 0) {
    _internal_set_copyid(from._internal_copyid());
  }
  if (from.copyguid() != 0) {
    _internal_set_copyguid(from._internal_copyguid());
  }
  if (from.serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
}

void NotifyIntoScene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NotifyIntoScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyIntoScene::CopyFrom(const NotifyIntoScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NotifyIntoScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyIntoScene::IsInitialized() const {
  return true;
}

void NotifyIntoScene::InternalSwap(NotifyIntoScene* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotifyIntoScene, serverid_)
      + sizeof(NotifyIntoScene::serverid_)
      - PROTOBUF_FIELD_OFFSET(NotifyIntoScene, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyIntoScene::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NearByRoleItem::InitAsDefaultInstance() {
}
class NearByRoleItem::_Internal {
 public:
};

NearByRoleItem::NearByRoleItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NearByRoleItem)
}
NearByRoleItem::NearByRoleItem(const NearByRoleItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:NearByRoleItem)
}

void NearByRoleItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NearByRoleItem_Msg_5fGame_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(level_));
}

NearByRoleItem::~NearByRoleItem() {
  // @@protoc_insertion_point(destructor:NearByRoleItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NearByRoleItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NearByRoleItem::ArenaDtor(void* object) {
  NearByRoleItem* _this = reinterpret_cast< NearByRoleItem* >(object);
  (void)_this;
}
void NearByRoleItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NearByRoleItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NearByRoleItem& NearByRoleItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NearByRoleItem_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void NearByRoleItem::Clear() {
// @@protoc_insertion_point(message_clear_start:NearByRoleItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NearByRoleItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ActorID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          actorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NearByRoleItem.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NearByRoleItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NearByRoleItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // int32 ActorID = 2;
  if (this->actorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_actorid(), target);
  }

  // int32 Level = 3;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  // string Name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NearByRoleItem.Name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NearByRoleItem)
  return target;
}

size_t NearByRoleItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NearByRoleItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // int32 ActorID = 2;
  if (this->actorid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_actorid());
  }

  // int32 Level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NearByRoleItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NearByRoleItem)
  GOOGLE_DCHECK_NE(&from, this);
  const NearByRoleItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NearByRoleItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NearByRoleItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NearByRoleItem)
    MergeFrom(*source);
  }
}

void NearByRoleItem::MergeFrom(const NearByRoleItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NearByRoleItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.actorid() != 0) {
    _internal_set_actorid(from._internal_actorid());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void NearByRoleItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NearByRoleItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NearByRoleItem::CopyFrom(const NearByRoleItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NearByRoleItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearByRoleItem::IsInitialized() const {
  return true;
}

void NearByRoleItem::InternalSwap(NearByRoleItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NearByRoleItem, level_)
      + sizeof(NearByRoleItem::level_)
      - PROTOBUF_FIELD_OFFSET(NearByRoleItem, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NearByRoleItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CopyInsItem::InitAsDefaultInstance() {
}
class CopyInsItem::_Internal {
 public:
};

CopyInsItem::CopyInsItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CopyInsItem)
}
CopyInsItem::CopyInsItem(const CopyInsItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&copyguid_, &from.copyguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&copyguid_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:CopyInsItem)
}

void CopyInsItem::SharedCtor() {
  ::memset(&copyguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&copyguid_)) + sizeof(serverid_));
}

CopyInsItem::~CopyInsItem() {
  // @@protoc_insertion_point(destructor:CopyInsItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CopyInsItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CopyInsItem::ArenaDtor(void* object) {
  CopyInsItem* _this = reinterpret_cast< CopyInsItem* >(object);
  (void)_this;
}
void CopyInsItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CopyInsItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CopyInsItem& CopyInsItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CopyInsItem_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void CopyInsItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CopyInsItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&copyguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&copyguid_)) + sizeof(serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CopyInsItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 CopyGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          copyguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CopyID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          copyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CopyType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          copytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ServerID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CopyInsItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CopyInsItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 CopyGuid = 1;
  if (this->copyguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_copyguid(), target);
  }

  // int32 CopyID = 2;
  if (this->copyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_copyid(), target);
  }

  // int32 CopyType = 3;
  if (this->copytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_copytype(), target);
  }

  // int32 ServerID = 4;
  if (this->serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CopyInsItem)
  return target;
}

size_t CopyInsItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CopyInsItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 CopyGuid = 1;
  if (this->copyguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_copyguid());
  }

  // int32 CopyID = 2;
  if (this->copyid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copyid());
  }

  // int32 CopyType = 3;
  if (this->copytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_copytype());
  }

  // int32 ServerID = 4;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CopyInsItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CopyInsItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CopyInsItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CopyInsItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CopyInsItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CopyInsItem)
    MergeFrom(*source);
  }
}

void CopyInsItem::MergeFrom(const CopyInsItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CopyInsItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.copyguid() != 0) {
    _internal_set_copyguid(from._internal_copyguid());
  }
  if (from.copyid() != 0) {
    _internal_set_copyid(from._internal_copyid());
  }
  if (from.copytype() != 0) {
    _internal_set_copytype(from._internal_copytype());
  }
  if (from.serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
}

void CopyInsItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CopyInsItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CopyInsItem::CopyFrom(const CopyInsItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CopyInsItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopyInsItem::IsInitialized() const {
  return true;
}

void CopyInsItem::InternalSwap(CopyInsItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CopyInsItem, serverid_)
      + sizeof(CopyInsItem::serverid_)
      - PROTOBUF_FIELD_OFFSET(CopyInsItem, copyguid_)>(
          reinterpret_cast<char*>(&copyguid_),
          reinterpret_cast<char*>(&other->copyguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CopyInsItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CopyReportReq::InitAsDefaultInstance() {
}
class CopyReportReq::_Internal {
 public:
};

CopyReportReq::CopyReportReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  copylist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CopyReportReq)
}
CopyReportReq::CopyReportReq(const CopyReportReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      copylist_(from.copylist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serverid_ = from.serverid_;
  // @@protoc_insertion_point(copy_constructor:CopyReportReq)
}

void CopyReportReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CopyReportReq_Msg_5fGame_2eproto.base);
  serverid_ = 0;
}

CopyReportReq::~CopyReportReq() {
  // @@protoc_insertion_point(destructor:CopyReportReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CopyReportReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CopyReportReq::ArenaDtor(void* object) {
  CopyReportReq* _this = reinterpret_cast< CopyReportReq* >(object);
  (void)_this;
}
void CopyReportReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CopyReportReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CopyReportReq& CopyReportReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CopyReportReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void CopyReportReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CopyReportReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  copylist_.Clear();
  serverid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CopyReportReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ServerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CopyInsItem CopyList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_copylist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CopyReportReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CopyReportReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ServerID = 1;
  if (this->serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serverid(), target);
  }

  // repeated .CopyInsItem CopyList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_copylist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_copylist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CopyReportReq)
  return target;
}

size_t CopyReportReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CopyReportReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CopyInsItem CopyList = 2;
  total_size += 1UL * this->_internal_copylist_size();
  for (const auto& msg : this->copylist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 ServerID = 1;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CopyReportReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CopyReportReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CopyReportReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CopyReportReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CopyReportReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CopyReportReq)
    MergeFrom(*source);
  }
}

void CopyReportReq::MergeFrom(const CopyReportReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CopyReportReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  copylist_.MergeFrom(from.copylist_);
  if (from.serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
}

void CopyReportReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CopyReportReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CopyReportReq::CopyFrom(const CopyReportReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CopyReportReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopyReportReq::IsInitialized() const {
  return true;
}

void CopyReportReq::InternalSwap(CopyReportReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  copylist_.InternalSwap(&other->copylist_);
  swap(serverid_, other->serverid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CopyReportReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UseHpBottleReq::InitAsDefaultInstance() {
}
class UseHpBottleReq::_Internal {
 public:
};

UseHpBottleReq::UseHpBottleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UseHpBottleReq)
}
UseHpBottleReq::UseHpBottleReq(const UseHpBottleReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:UseHpBottleReq)
}

void UseHpBottleReq::SharedCtor() {
}

UseHpBottleReq::~UseHpBottleReq() {
  // @@protoc_insertion_point(destructor:UseHpBottleReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UseHpBottleReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UseHpBottleReq::ArenaDtor(void* object) {
  UseHpBottleReq* _this = reinterpret_cast< UseHpBottleReq* >(object);
  (void)_this;
}
void UseHpBottleReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UseHpBottleReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseHpBottleReq& UseHpBottleReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseHpBottleReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void UseHpBottleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:UseHpBottleReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UseHpBottleReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseHpBottleReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UseHpBottleReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UseHpBottleReq)
  return target;
}

size_t UseHpBottleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UseHpBottleReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseHpBottleReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UseHpBottleReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UseHpBottleReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseHpBottleReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UseHpBottleReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UseHpBottleReq)
    MergeFrom(*source);
  }
}

void UseHpBottleReq::MergeFrom(const UseHpBottleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UseHpBottleReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UseHpBottleReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UseHpBottleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseHpBottleReq::CopyFrom(const UseHpBottleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UseHpBottleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseHpBottleReq::IsInitialized() const {
  return true;
}

void UseHpBottleReq::InternalSwap(UseHpBottleReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UseHpBottleReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UseHpBottleAck::InitAsDefaultInstance() {
}
class UseHpBottleAck::_Internal {
 public:
};

UseHpBottleAck::UseHpBottleAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UseHpBottleAck)
}
UseHpBottleAck::UseHpBottleAck(const UseHpBottleAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:UseHpBottleAck)
}

void UseHpBottleAck::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(count_));
}

UseHpBottleAck::~UseHpBottleAck() {
  // @@protoc_insertion_point(destructor:UseHpBottleAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UseHpBottleAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UseHpBottleAck::ArenaDtor(void* object) {
  UseHpBottleAck* _this = reinterpret_cast< UseHpBottleAck* >(object);
  (void)_this;
}
void UseHpBottleAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UseHpBottleAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseHpBottleAck& UseHpBottleAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseHpBottleAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void UseHpBottleAck::Clear() {
// @@protoc_insertion_point(message_clear_start:UseHpBottleAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UseHpBottleAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseHpBottleAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UseHpBottleAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // int32 Count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UseHpBottleAck)
  return target;
}

size_t UseHpBottleAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UseHpBottleAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  // int32 Count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseHpBottleAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UseHpBottleAck)
  GOOGLE_DCHECK_NE(&from, this);
  const UseHpBottleAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseHpBottleAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UseHpBottleAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UseHpBottleAck)
    MergeFrom(*source);
  }
}

void UseHpBottleAck::MergeFrom(const UseHpBottleAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UseHpBottleAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void UseHpBottleAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UseHpBottleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseHpBottleAck::CopyFrom(const UseHpBottleAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UseHpBottleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseHpBottleAck::IsInitialized() const {
  return true;
}

void UseHpBottleAck::InternalSwap(UseHpBottleAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UseHpBottleAck, count_)
      + sizeof(UseHpBottleAck::count_)
      - PROTOBUF_FIELD_OFFSET(UseHpBottleAck, retcode_)>(
          reinterpret_cast<char*>(&retcode_),
          reinterpret_cast<char*>(&other->retcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UseHpBottleAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UseMpBottleReq::InitAsDefaultInstance() {
}
class UseMpBottleReq::_Internal {
 public:
};

UseMpBottleReq::UseMpBottleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UseMpBottleReq)
}
UseMpBottleReq::UseMpBottleReq(const UseMpBottleReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:UseMpBottleReq)
}

void UseMpBottleReq::SharedCtor() {
}

UseMpBottleReq::~UseMpBottleReq() {
  // @@protoc_insertion_point(destructor:UseMpBottleReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UseMpBottleReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UseMpBottleReq::ArenaDtor(void* object) {
  UseMpBottleReq* _this = reinterpret_cast< UseMpBottleReq* >(object);
  (void)_this;
}
void UseMpBottleReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UseMpBottleReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseMpBottleReq& UseMpBottleReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseMpBottleReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void UseMpBottleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:UseMpBottleReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UseMpBottleReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseMpBottleReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UseMpBottleReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UseMpBottleReq)
  return target;
}

size_t UseMpBottleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UseMpBottleReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseMpBottleReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UseMpBottleReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UseMpBottleReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseMpBottleReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UseMpBottleReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UseMpBottleReq)
    MergeFrom(*source);
  }
}

void UseMpBottleReq::MergeFrom(const UseMpBottleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UseMpBottleReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UseMpBottleReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UseMpBottleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseMpBottleReq::CopyFrom(const UseMpBottleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UseMpBottleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseMpBottleReq::IsInitialized() const {
  return true;
}

void UseMpBottleReq::InternalSwap(UseMpBottleReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UseMpBottleReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UseMpBottleAck::InitAsDefaultInstance() {
}
class UseMpBottleAck::_Internal {
 public:
};

UseMpBottleAck::UseMpBottleAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UseMpBottleAck)
}
UseMpBottleAck::UseMpBottleAck(const UseMpBottleAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:UseMpBottleAck)
}

void UseMpBottleAck::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(count_));
}

UseMpBottleAck::~UseMpBottleAck() {
  // @@protoc_insertion_point(destructor:UseMpBottleAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UseMpBottleAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UseMpBottleAck::ArenaDtor(void* object) {
  UseMpBottleAck* _this = reinterpret_cast< UseMpBottleAck* >(object);
  (void)_this;
}
void UseMpBottleAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UseMpBottleAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseMpBottleAck& UseMpBottleAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseMpBottleAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void UseMpBottleAck::Clear() {
// @@protoc_insertion_point(message_clear_start:UseMpBottleAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UseMpBottleAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseMpBottleAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UseMpBottleAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // int32 Count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UseMpBottleAck)
  return target;
}

size_t UseMpBottleAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UseMpBottleAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  // int32 Count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseMpBottleAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UseMpBottleAck)
  GOOGLE_DCHECK_NE(&from, this);
  const UseMpBottleAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseMpBottleAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UseMpBottleAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UseMpBottleAck)
    MergeFrom(*source);
  }
}

void UseMpBottleAck::MergeFrom(const UseMpBottleAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UseMpBottleAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void UseMpBottleAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UseMpBottleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseMpBottleAck::CopyFrom(const UseMpBottleAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UseMpBottleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseMpBottleAck::IsInitialized() const {
  return true;
}

void UseMpBottleAck::InternalSwap(UseMpBottleAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UseMpBottleAck, count_)
      + sizeof(UseMpBottleAck::count_)
      - PROTOBUF_FIELD_OFFSET(UseMpBottleAck, retcode_)>(
          reinterpret_cast<char*>(&retcode_),
          reinterpret_cast<char*>(&other->retcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UseMpBottleAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatMessageReq::InitAsDefaultInstance() {
}
class ChatMessageReq::_Internal {
 public:
};

ChatMessageReq::ChatMessageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChatMessageReq)
}
ChatMessageReq::ChatMessageReq(const ChatMessageReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_srcname().empty()) {
    srcname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_srcname(),
      GetArena());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_content(),
      GetArena());
  }
  ::memcpy(&srcid_, &from.srcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&chatchl_) -
    reinterpret_cast<char*>(&srcid_)) + sizeof(chatchl_));
  // @@protoc_insertion_point(copy_constructor:ChatMessageReq)
}

void ChatMessageReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatMessageReq_Msg_5fGame_2eproto.base);
  srcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&srcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chatchl_) -
      reinterpret_cast<char*>(&srcid_)) + sizeof(chatchl_));
}

ChatMessageReq::~ChatMessageReq() {
  // @@protoc_insertion_point(destructor:ChatMessageReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChatMessageReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  srcname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatMessageReq::ArenaDtor(void* object) {
  ChatMessageReq* _this = reinterpret_cast< ChatMessageReq* >(object);
  (void)_this;
}
void ChatMessageReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatMessageReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatMessageReq& ChatMessageReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatMessageReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void ChatMessageReq::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srcname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&srcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chatchl_) -
      reinterpret_cast<char*>(&srcid_)) + sizeof(chatchl_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessageReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string SrcName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_srcname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChatMessageReq.SrcName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 SrcID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          srcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 TargetID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ChatChl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          chatchl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 GuildID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Content = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChatMessageReq.Content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatMessageReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string SrcName = 1;
  if (this->srcname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcname().data(), static_cast<int>(this->_internal_srcname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatMessageReq.SrcName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_srcname(), target);
  }

  // uint64 SrcID = 2;
  if (this->srcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_srcid(), target);
  }

  // uint64 TargetID = 3;
  if (this->targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_targetid(), target);
  }

  // int32 ChatChl = 4;
  if (this->chatchl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_chatchl(), target);
  }

  // uint64 GuildID = 5;
  if (this->guildid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_guildid(), target);
  }

  // string Content = 6;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatMessageReq.Content");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageReq)
  return target;
}

size_t ChatMessageReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SrcName = 1;
  if (this->srcname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcname());
  }

  // string Content = 6;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint64 SrcID = 2;
  if (this->srcid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_srcid());
  }

  // uint64 TargetID = 3;
  if (this->targetid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_targetid());
  }

  // uint64 GuildID = 5;
  if (this->guildid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guildid());
  }

  // int32 ChatChl = 4;
  if (this->chatchl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chatchl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatMessageReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatMessageReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatMessageReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageReq)
    MergeFrom(*source);
  }
}

void ChatMessageReq::MergeFrom(const ChatMessageReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.srcname().size() > 0) {
    _internal_set_srcname(from._internal_srcname());
  }
  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.srcid() != 0) {
    _internal_set_srcid(from._internal_srcid());
  }
  if (from.targetid() != 0) {
    _internal_set_targetid(from._internal_targetid());
  }
  if (from.guildid() != 0) {
    _internal_set_guildid(from._internal_guildid());
  }
  if (from.chatchl() != 0) {
    _internal_set_chatchl(from._internal_chatchl());
  }
}

void ChatMessageReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessageReq::CopyFrom(const ChatMessageReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessageReq::IsInitialized() const {
  return true;
}

void ChatMessageReq::InternalSwap(ChatMessageReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  srcname_.Swap(&other->srcname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMessageReq, chatchl_)
      + sizeof(ChatMessageReq::chatchl_)
      - PROTOBUF_FIELD_OFFSET(ChatMessageReq, srcid_)>(
          reinterpret_cast<char*>(&srcid_),
          reinterpret_cast<char*>(&other->srcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessageReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatMessageAck::InitAsDefaultInstance() {
}
class ChatMessageAck::_Internal {
 public:
};

ChatMessageAck::ChatMessageAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChatMessageAck)
}
ChatMessageAck::ChatMessageAck(const ChatMessageAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageAck)
}

void ChatMessageAck::SharedCtor() {
  retcode_ = 0u;
}

ChatMessageAck::~ChatMessageAck() {
  // @@protoc_insertion_point(destructor:ChatMessageAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChatMessageAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChatMessageAck::ArenaDtor(void* object) {
  ChatMessageAck* _this = reinterpret_cast< ChatMessageAck* >(object);
  (void)_this;
}
void ChatMessageAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatMessageAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatMessageAck& ChatMessageAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatMessageAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void ChatMessageAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessageAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatMessageAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageAck)
  return target;
}

size_t ChatMessageAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatMessageAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageAck)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatMessageAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatMessageAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageAck)
    MergeFrom(*source);
  }
}

void ChatMessageAck::MergeFrom(const ChatMessageAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void ChatMessageAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessageAck::CopyFrom(const ChatMessageAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessageAck::IsInitialized() const {
  return true;
}

void ChatMessageAck::InternalSwap(ChatMessageAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessageAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatMessageNty::InitAsDefaultInstance() {
}
class ChatMessageNty::_Internal {
 public:
};

ChatMessageNty::ChatMessageNty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChatMessageNty)
}
ChatMessageNty::ChatMessageNty(const ChatMessageNty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_srcname().empty()) {
    srcname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_srcname(),
      GetArena());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_content(),
      GetArena());
  }
  ::memcpy(&srcid_, &from.srcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&srcid_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:ChatMessageNty)
}

void ChatMessageNty::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatMessageNty_Msg_5fGame_2eproto.base);
  srcname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&srcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&srcid_)) + sizeof(timestamp_));
}

ChatMessageNty::~ChatMessageNty() {
  // @@protoc_insertion_point(destructor:ChatMessageNty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChatMessageNty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  srcname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatMessageNty::ArenaDtor(void* object) {
  ChatMessageNty* _this = reinterpret_cast< ChatMessageNty* >(object);
  (void)_this;
}
void ChatMessageNty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatMessageNty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatMessageNty& ChatMessageNty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatMessageNty_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void ChatMessageNty::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageNty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srcname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&srcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&srcid_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessageNty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string SrcName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_srcname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChatMessageNty.SrcName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 SrcID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          srcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 SrcLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          srclevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 TargetID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ChatChl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          chatchl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 GuildID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 TimeStamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Content = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChatMessageNty.Content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatMessageNty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageNty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string SrcName = 1;
  if (this->srcname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcname().data(), static_cast<int>(this->_internal_srcname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatMessageNty.SrcName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_srcname(), target);
  }

  // uint64 SrcID = 2;
  if (this->srcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_srcid(), target);
  }

  // int32 SrcLevel = 3;
  if (this->srclevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_srclevel(), target);
  }

  // uint64 TargetID = 4;
  if (this->targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_targetid(), target);
  }

  // int32 ChatChl = 5;
  if (this->chatchl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_chatchl(), target);
  }

  // uint64 GuildID = 6;
  if (this->guildid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_guildid(), target);
  }

  // uint64 TimeStamp = 7;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_timestamp(), target);
  }

  // string Content = 8;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatMessageNty.Content");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageNty)
  return target;
}

size_t ChatMessageNty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageNty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SrcName = 1;
  if (this->srcname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcname());
  }

  // string Content = 8;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint64 SrcID = 2;
  if (this->srcid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_srcid());
  }

  // uint64 TargetID = 4;
  if (this->targetid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_targetid());
  }

  // int32 SrcLevel = 3;
  if (this->srclevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_srclevel());
  }

  // int32 ChatChl = 5;
  if (this->chatchl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chatchl());
  }

  // uint64 GuildID = 6;
  if (this->guildid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guildid());
  }

  // uint64 TimeStamp = 7;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatMessageNty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageNty)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatMessageNty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatMessageNty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageNty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageNty)
    MergeFrom(*source);
  }
}

void ChatMessageNty::MergeFrom(const ChatMessageNty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageNty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.srcname().size() > 0) {
    _internal_set_srcname(from._internal_srcname());
  }
  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.srcid() != 0) {
    _internal_set_srcid(from._internal_srcid());
  }
  if (from.targetid() != 0) {
    _internal_set_targetid(from._internal_targetid());
  }
  if (from.srclevel() != 0) {
    _internal_set_srclevel(from._internal_srclevel());
  }
  if (from.chatchl() != 0) {
    _internal_set_chatchl(from._internal_chatchl());
  }
  if (from.guildid() != 0) {
    _internal_set_guildid(from._internal_guildid());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void ChatMessageNty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageNty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessageNty::CopyFrom(const ChatMessageNty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageNty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessageNty::IsInitialized() const {
  return true;
}

void ChatMessageNty::InternalSwap(ChatMessageNty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  srcname_.Swap(&other->srcname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMessageNty, timestamp_)
      + sizeof(ChatMessageNty::timestamp_)
      - PROTOBUF_FIELD_OFFSET(ChatMessageNty, srcid_)>(
          reinterpret_cast<char*>(&srcid_),
          reinterpret_cast<char*>(&other->srcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessageNty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommonReq::InitAsDefaultInstance() {
}
class CommonReq::_Internal {
 public:
};

CommonReq::CommonReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonReq)
}
CommonReq::CommonReq(const CommonReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  param1_ = from.param1_;
  // @@protoc_insertion_point(copy_constructor:CommonReq)
}

void CommonReq::SharedCtor() {
  param1_ = 0u;
}

CommonReq::~CommonReq() {
  // @@protoc_insertion_point(destructor:CommonReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommonReq::ArenaDtor(void* object) {
  CommonReq* _this = reinterpret_cast< CommonReq* >(object);
  (void)_this;
}
void CommonReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommonReq& CommonReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommonReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void CommonReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param1_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Param1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          param1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Param1 = 1;
  if (this->param1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_param1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonReq)
  return target;
}

size_t CommonReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Param1 = 1;
  if (this->param1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_param1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonReq)
    MergeFrom(*source);
  }
}

void CommonReq::MergeFrom(const CommonReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.param1() != 0) {
    _internal_set_param1(from._internal_param1());
  }
}

void CommonReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonReq::CopyFrom(const CommonReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonReq::IsInitialized() const {
  return true;
}

void CommonReq::InternalSwap(CommonReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(param1_, other->param1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommonAck::InitAsDefaultInstance() {
}
class CommonAck::_Internal {
 public:
};

CommonAck::CommonAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CommonAck)
}
CommonAck::CommonAck(const CommonAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:CommonAck)
}

void CommonAck::SharedCtor() {
  retcode_ = 0u;
}

CommonAck::~CommonAck() {
  // @@protoc_insertion_point(destructor:CommonAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommonAck::ArenaDtor(void* object) {
  CommonAck* _this = reinterpret_cast< CommonAck* >(object);
  (void)_this;
}
void CommonAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommonAck& CommonAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommonAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void CommonAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CommonAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonAck)
  return target;
}

size_t CommonAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommonAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommonAck)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommonAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommonAck)
    MergeFrom(*source);
  }
}

void CommonAck::MergeFrom(const CommonAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommonAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void CommonAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommonAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonAck::CopyFrom(const CommonAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommonAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonAck::IsInitialized() const {
  return true;
}

void CommonAck::InternalSwap(CommonAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BroadMessageNotify::InitAsDefaultInstance() {
}
class BroadMessageNotify::_Internal {
 public:
};

BroadMessageNotify::BroadMessageNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  connid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BroadMessageNotify)
}
BroadMessageNotify::BroadMessageNotify(const BroadMessageNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      connid_(from.connid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msgdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msgdata().empty()) {
    msgdata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msgdata(),
      GetArena());
  }
  msgid_ = from.msgid_;
  // @@protoc_insertion_point(copy_constructor:BroadMessageNotify)
}

void BroadMessageNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BroadMessageNotify_Msg_5fGame_2eproto.base);
  msgdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msgid_ = 0u;
}

BroadMessageNotify::~BroadMessageNotify() {
  // @@protoc_insertion_point(destructor:BroadMessageNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BroadMessageNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msgdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BroadMessageNotify::ArenaDtor(void* object) {
  BroadMessageNotify* _this = reinterpret_cast< BroadMessageNotify* >(object);
  (void)_this;
}
void BroadMessageNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BroadMessageNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadMessageNotify& BroadMessageNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadMessageNotify_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void BroadMessageNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:BroadMessageNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connid_.Clear();
  msgdata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msgid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadMessageNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 MsgID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ConnID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_connid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_connid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes MsgData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msgdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadMessageNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BroadMessageNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 MsgID = 1;
  if (this->msgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msgid(), target);
  }

  // repeated uint32 ConnID = 2;
  {
    int byte_size = _connid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_connid(), byte_size, target);
    }
  }

  // bytes MsgData = 3;
  if (this->msgdata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msgdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BroadMessageNotify)
  return target;
}

size_t BroadMessageNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BroadMessageNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ConnID = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->connid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _connid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes MsgData = 3;
  if (this->msgdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msgdata());
  }

  // uint32 MsgID = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msgid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadMessageNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BroadMessageNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadMessageNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BroadMessageNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BroadMessageNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BroadMessageNotify)
    MergeFrom(*source);
  }
}

void BroadMessageNotify::MergeFrom(const BroadMessageNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BroadMessageNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connid_.MergeFrom(from.connid_);
  if (from.msgdata().size() > 0) {
    _internal_set_msgdata(from._internal_msgdata());
  }
  if (from.msgid() != 0) {
    _internal_set_msgid(from._internal_msgid());
  }
}

void BroadMessageNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BroadMessageNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadMessageNotify::CopyFrom(const BroadMessageNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BroadMessageNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadMessageNotify::IsInitialized() const {
  return true;
}

void BroadMessageNotify::InternalSwap(BroadMessageNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  connid_.InternalSwap(&other->connid_);
  msgdata_.Swap(&other->msgdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(msgid_, other->msgid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadMessageNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogicRegToLoginReq::InitAsDefaultInstance() {
}
class LogicRegToLoginReq::_Internal {
 public:
};

LogicRegToLoginReq::LogicRegToLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicRegToLoginReq)
}
LogicRegToLoginReq::LogicRegToLoginReq(const LogicRegToLoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servername().empty()) {
    servername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_servername(),
      GetArena());
  }
  svrinnerip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_svrinnerip().empty()) {
    svrinnerip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_svrinnerip(),
      GetArena());
  }
  ::memcpy(&serverid_, &from.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&httpport_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(httpport_));
  // @@protoc_insertion_point(copy_constructor:LogicRegToLoginReq)
}

void LogicRegToLoginReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogicRegToLoginReq_Msg_5fGame_2eproto.base);
  servername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  svrinnerip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&httpport_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(httpport_));
}

LogicRegToLoginReq::~LogicRegToLoginReq() {
  // @@protoc_insertion_point(destructor:LogicRegToLoginReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogicRegToLoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  svrinnerip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogicRegToLoginReq::ArenaDtor(void* object) {
  LogicRegToLoginReq* _this = reinterpret_cast< LogicRegToLoginReq* >(object);
  (void)_this;
}
void LogicRegToLoginReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogicRegToLoginReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicRegToLoginReq& LogicRegToLoginReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogicRegToLoginReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void LogicRegToLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicRegToLoginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  svrinnerip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&httpport_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(httpport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicRegToLoginReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ServerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ServerName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_servername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LogicRegToLoginReq.ServerName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SvrInnerIp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_svrinnerip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LogicRegToLoginReq.SvrInnerIp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ServerPort = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          serverport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 HttpPort = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          httpport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicRegToLoginReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicRegToLoginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ServerID = 1;
  if (this->serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serverid(), target);
  }

  // string ServerName = 2;
  if (this->servername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servername().data(), static_cast<int>(this->_internal_servername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LogicRegToLoginReq.ServerName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_servername(), target);
  }

  // string SvrInnerIp = 3;
  if (this->svrinnerip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_svrinnerip().data(), static_cast<int>(this->_internal_svrinnerip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LogicRegToLoginReq.SvrInnerIp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_svrinnerip(), target);
  }

  // int32 ServerPort = 4;
  if (this->serverport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_serverport(), target);
  }

  // int32 HttpPort = 5;
  if (this->httpport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_httpport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicRegToLoginReq)
  return target;
}

size_t LogicRegToLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicRegToLoginReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ServerName = 2;
  if (this->servername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servername());
  }

  // string SvrInnerIp = 3;
  if (this->svrinnerip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_svrinnerip());
  }

  // int32 ServerID = 1;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverid());
  }

  // int32 ServerPort = 4;
  if (this->serverport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverport());
  }

  // int32 HttpPort = 5;
  if (this->httpport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_httpport());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicRegToLoginReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicRegToLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicRegToLoginReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicRegToLoginReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicRegToLoginReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicRegToLoginReq)
    MergeFrom(*source);
  }
}

void LogicRegToLoginReq::MergeFrom(const LogicRegToLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicRegToLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servername().size() > 0) {
    _internal_set_servername(from._internal_servername());
  }
  if (from.svrinnerip().size() > 0) {
    _internal_set_svrinnerip(from._internal_svrinnerip());
  }
  if (from.serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from.serverport() != 0) {
    _internal_set_serverport(from._internal_serverport());
  }
  if (from.httpport() != 0) {
    _internal_set_httpport(from._internal_httpport());
  }
}

void LogicRegToLoginReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicRegToLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicRegToLoginReq::CopyFrom(const LogicRegToLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicRegToLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicRegToLoginReq::IsInitialized() const {
  return true;
}

void LogicRegToLoginReq::InternalSwap(LogicRegToLoginReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servername_.Swap(&other->servername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  svrinnerip_.Swap(&other->svrinnerip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicRegToLoginReq, httpport_)
      + sizeof(LogicRegToLoginReq::httpport_)
      - PROTOBUF_FIELD_OFFSET(LogicRegToLoginReq, serverid_)>(
          reinterpret_cast<char*>(&serverid_),
          reinterpret_cast<char*>(&other->serverid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicRegToLoginReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogicRegToLoginAck::InitAsDefaultInstance() {
}
class LogicRegToLoginAck::_Internal {
 public:
};

LogicRegToLoginAck::LogicRegToLoginAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicRegToLoginAck)
}
LogicRegToLoginAck::LogicRegToLoginAck(const LogicRegToLoginAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  newsvrname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_newsvrname().empty()) {
    newsvrname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_newsvrname(),
      GetArena());
  }
  ::memcpy(&svropentime_, &from.svropentime_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&svropentime_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:LogicRegToLoginAck)
}

void LogicRegToLoginAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogicRegToLoginAck_Msg_5fGame_2eproto.base);
  newsvrname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&svropentime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&svropentime_)) + sizeof(retcode_));
}

LogicRegToLoginAck::~LogicRegToLoginAck() {
  // @@protoc_insertion_point(destructor:LogicRegToLoginAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogicRegToLoginAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  newsvrname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogicRegToLoginAck::ArenaDtor(void* object) {
  LogicRegToLoginAck* _this = reinterpret_cast< LogicRegToLoginAck* >(object);
  (void)_this;
}
void LogicRegToLoginAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogicRegToLoginAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicRegToLoginAck& LogicRegToLoginAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogicRegToLoginAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void LogicRegToLoginAck::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicRegToLoginAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  newsvrname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&svropentime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&svropentime_)) + sizeof(retcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicRegToLoginAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string NewSvrName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_newsvrname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LogicRegToLoginAck.NewSvrName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 SvrOpenTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          svropentime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicRegToLoginAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicRegToLoginAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // string NewSvrName = 2;
  if (this->newsvrname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newsvrname().data(), static_cast<int>(this->_internal_newsvrname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LogicRegToLoginAck.NewSvrName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_newsvrname(), target);
  }

  // uint64 SvrOpenTime = 3;
  if (this->svropentime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_svropentime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicRegToLoginAck)
  return target;
}

size_t LogicRegToLoginAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicRegToLoginAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string NewSvrName = 2;
  if (this->newsvrname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newsvrname());
  }

  // uint64 SvrOpenTime = 3;
  if (this->svropentime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_svropentime());
  }

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicRegToLoginAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicRegToLoginAck)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicRegToLoginAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicRegToLoginAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicRegToLoginAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicRegToLoginAck)
    MergeFrom(*source);
  }
}

void LogicRegToLoginAck::MergeFrom(const LogicRegToLoginAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicRegToLoginAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.newsvrname().size() > 0) {
    _internal_set_newsvrname(from._internal_newsvrname());
  }
  if (from.svropentime() != 0) {
    _internal_set_svropentime(from._internal_svropentime());
  }
  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void LogicRegToLoginAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicRegToLoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicRegToLoginAck::CopyFrom(const LogicRegToLoginAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicRegToLoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicRegToLoginAck::IsInitialized() const {
  return true;
}

void LogicRegToLoginAck::InternalSwap(LogicRegToLoginAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  newsvrname_.Swap(&other->newsvrname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicRegToLoginAck, retcode_)
      + sizeof(LogicRegToLoginAck::retcode_)
      - PROTOBUF_FIELD_OFFSET(LogicRegToLoginAck, svropentime_)>(
          reinterpret_cast<char*>(&svropentime_),
          reinterpret_cast<char*>(&other->svropentime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicRegToLoginAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogicRegToDbSvrReq::InitAsDefaultInstance() {
}
class LogicRegToDbSvrReq::_Internal {
 public:
};

LogicRegToDbSvrReq::LogicRegToDbSvrReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicRegToDbSvrReq)
}
LogicRegToDbSvrReq::LogicRegToDbSvrReq(const LogicRegToDbSvrReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servername().empty()) {
    servername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_servername(),
      GetArena());
  }
  ::memcpy(&serverid_, &from.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&processid_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(processid_));
  // @@protoc_insertion_point(copy_constructor:LogicRegToDbSvrReq)
}

void LogicRegToDbSvrReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogicRegToDbSvrReq_Msg_5fGame_2eproto.base);
  servername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&processid_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(processid_));
}

LogicRegToDbSvrReq::~LogicRegToDbSvrReq() {
  // @@protoc_insertion_point(destructor:LogicRegToDbSvrReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogicRegToDbSvrReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogicRegToDbSvrReq::ArenaDtor(void* object) {
  LogicRegToDbSvrReq* _this = reinterpret_cast< LogicRegToDbSvrReq* >(object);
  (void)_this;
}
void LogicRegToDbSvrReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogicRegToDbSvrReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicRegToDbSvrReq& LogicRegToDbSvrReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogicRegToDbSvrReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void LogicRegToDbSvrReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicRegToDbSvrReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&processid_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(processid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicRegToDbSvrReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ServerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ServerName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_servername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LogicRegToDbSvrReq.ServerName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ProcessID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          processid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicRegToDbSvrReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicRegToDbSvrReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ServerID = 1;
  if (this->serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serverid(), target);
  }

  // string ServerName = 2;
  if (this->servername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servername().data(), static_cast<int>(this->_internal_servername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LogicRegToDbSvrReq.ServerName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_servername(), target);
  }

  // uint32 ProcessID = 3;
  if (this->processid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_processid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicRegToDbSvrReq)
  return target;
}

size_t LogicRegToDbSvrReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicRegToDbSvrReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ServerName = 2;
  if (this->servername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servername());
  }

  // int32 ServerID = 1;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverid());
  }

  // uint32 ProcessID = 3;
  if (this->processid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_processid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicRegToDbSvrReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicRegToDbSvrReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicRegToDbSvrReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicRegToDbSvrReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicRegToDbSvrReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicRegToDbSvrReq)
    MergeFrom(*source);
  }
}

void LogicRegToDbSvrReq::MergeFrom(const LogicRegToDbSvrReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicRegToDbSvrReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servername().size() > 0) {
    _internal_set_servername(from._internal_servername());
  }
  if (from.serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from.processid() != 0) {
    _internal_set_processid(from._internal_processid());
  }
}

void LogicRegToDbSvrReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicRegToDbSvrReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicRegToDbSvrReq::CopyFrom(const LogicRegToDbSvrReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicRegToDbSvrReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicRegToDbSvrReq::IsInitialized() const {
  return true;
}

void LogicRegToDbSvrReq::InternalSwap(LogicRegToDbSvrReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servername_.Swap(&other->servername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicRegToDbSvrReq, processid_)
      + sizeof(LogicRegToDbSvrReq::processid_)
      - PROTOBUF_FIELD_OFFSET(LogicRegToDbSvrReq, serverid_)>(
          reinterpret_cast<char*>(&serverid_),
          reinterpret_cast<char*>(&other->serverid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicRegToDbSvrReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogicRegToDbSvrAck::InitAsDefaultInstance() {
}
class LogicRegToDbSvrAck::_Internal {
 public:
};

LogicRegToDbSvrAck::LogicRegToDbSvrAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicRegToDbSvrAck)
}
LogicRegToDbSvrAck::LogicRegToDbSvrAck(const LogicRegToDbSvrAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:LogicRegToDbSvrAck)
}

void LogicRegToDbSvrAck::SharedCtor() {
  retcode_ = 0u;
}

LogicRegToDbSvrAck::~LogicRegToDbSvrAck() {
  // @@protoc_insertion_point(destructor:LogicRegToDbSvrAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogicRegToDbSvrAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogicRegToDbSvrAck::ArenaDtor(void* object) {
  LogicRegToDbSvrAck* _this = reinterpret_cast< LogicRegToDbSvrAck* >(object);
  (void)_this;
}
void LogicRegToDbSvrAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogicRegToDbSvrAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicRegToDbSvrAck& LogicRegToDbSvrAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogicRegToDbSvrAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void LogicRegToDbSvrAck::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicRegToDbSvrAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicRegToDbSvrAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicRegToDbSvrAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicRegToDbSvrAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicRegToDbSvrAck)
  return target;
}

size_t LogicRegToDbSvrAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicRegToDbSvrAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicRegToDbSvrAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicRegToDbSvrAck)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicRegToDbSvrAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicRegToDbSvrAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicRegToDbSvrAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicRegToDbSvrAck)
    MergeFrom(*source);
  }
}

void LogicRegToDbSvrAck::MergeFrom(const LogicRegToDbSvrAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicRegToDbSvrAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void LogicRegToDbSvrAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicRegToDbSvrAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicRegToDbSvrAck::CopyFrom(const LogicRegToDbSvrAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicRegToDbSvrAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicRegToDbSvrAck::IsInitialized() const {
  return true;
}

void LogicRegToDbSvrAck::InternalSwap(LogicRegToDbSvrAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicRegToDbSvrAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogicUpdateInfoReq::InitAsDefaultInstance() {
}
class LogicUpdateInfoReq::_Internal {
 public:
};

LogicUpdateInfoReq::LogicUpdateInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicUpdateInfoReq)
}
LogicUpdateInfoReq::LogicUpdateInfoReq(const LogicUpdateInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servername().empty()) {
    servername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_servername(),
      GetArena());
  }
  ::memcpy(&serverid_, &from.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dberrcnt_) -
    reinterpret_cast<char*>(&serverid_)) + sizeof(dberrcnt_));
  // @@protoc_insertion_point(copy_constructor:LogicUpdateInfoReq)
}

void LogicUpdateInfoReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogicUpdateInfoReq_Msg_5fGame_2eproto.base);
  servername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dberrcnt_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(dberrcnt_));
}

LogicUpdateInfoReq::~LogicUpdateInfoReq() {
  // @@protoc_insertion_point(destructor:LogicUpdateInfoReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogicUpdateInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogicUpdateInfoReq::ArenaDtor(void* object) {
  LogicUpdateInfoReq* _this = reinterpret_cast< LogicUpdateInfoReq* >(object);
  (void)_this;
}
void LogicUpdateInfoReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogicUpdateInfoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicUpdateInfoReq& LogicUpdateInfoReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogicUpdateInfoReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void LogicUpdateInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicUpdateInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dberrcnt_) -
      reinterpret_cast<char*>(&serverid_)) + sizeof(dberrcnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicUpdateInfoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ServerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ServerName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_servername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LogicUpdateInfoReq.ServerName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MaxOnline = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          maxonline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CurOnline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          curonline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TotalNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          totalnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CacheNum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cachenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 DbErrCnt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          dberrcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicUpdateInfoReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicUpdateInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ServerID = 1;
  if (this->serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serverid(), target);
  }

  // string ServerName = 2;
  if (this->servername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servername().data(), static_cast<int>(this->_internal_servername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LogicUpdateInfoReq.ServerName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_servername(), target);
  }

  // int32 MaxOnline = 3;
  if (this->maxonline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_maxonline(), target);
  }

  // int32 CurOnline = 4;
  if (this->curonline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_curonline(), target);
  }

  // int32 TotalNum = 5;
  if (this->totalnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_totalnum(), target);
  }

  // int32 CacheNum = 6;
  if (this->cachenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_cachenum(), target);
  }

  // int32 Status = 7;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_status(), target);
  }

  // int32 DbErrCnt = 8;
  if (this->dberrcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_dberrcnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicUpdateInfoReq)
  return target;
}

size_t LogicUpdateInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicUpdateInfoReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ServerName = 2;
  if (this->servername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servername());
  }

  // int32 ServerID = 1;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serverid());
  }

  // int32 MaxOnline = 3;
  if (this->maxonline() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxonline());
  }

  // int32 CurOnline = 4;
  if (this->curonline() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curonline());
  }

  // int32 TotalNum = 5;
  if (this->totalnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_totalnum());
  }

  // int32 CacheNum = 6;
  if (this->cachenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cachenum());
  }

  // int32 Status = 7;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 DbErrCnt = 8;
  if (this->dberrcnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dberrcnt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicUpdateInfoReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicUpdateInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicUpdateInfoReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicUpdateInfoReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicUpdateInfoReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicUpdateInfoReq)
    MergeFrom(*source);
  }
}

void LogicUpdateInfoReq::MergeFrom(const LogicUpdateInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicUpdateInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servername().size() > 0) {
    _internal_set_servername(from._internal_servername());
  }
  if (from.serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from.maxonline() != 0) {
    _internal_set_maxonline(from._internal_maxonline());
  }
  if (from.curonline() != 0) {
    _internal_set_curonline(from._internal_curonline());
  }
  if (from.totalnum() != 0) {
    _internal_set_totalnum(from._internal_totalnum());
  }
  if (from.cachenum() != 0) {
    _internal_set_cachenum(from._internal_cachenum());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.dberrcnt() != 0) {
    _internal_set_dberrcnt(from._internal_dberrcnt());
  }
}

void LogicUpdateInfoReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicUpdateInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicUpdateInfoReq::CopyFrom(const LogicUpdateInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicUpdateInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicUpdateInfoReq::IsInitialized() const {
  return true;
}

void LogicUpdateInfoReq::InternalSwap(LogicUpdateInfoReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servername_.Swap(&other->servername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicUpdateInfoReq, dberrcnt_)
      + sizeof(LogicUpdateInfoReq::dberrcnt_)
      - PROTOBUF_FIELD_OFFSET(LogicUpdateInfoReq, serverid_)>(
          reinterpret_cast<char*>(&serverid_),
          reinterpret_cast<char*>(&other->serverid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicUpdateInfoReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogicUpdateInfoAck::InitAsDefaultInstance() {
}
class LogicUpdateInfoAck::_Internal {
 public:
};

LogicUpdateInfoAck::LogicUpdateInfoAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicUpdateInfoAck)
}
LogicUpdateInfoAck::LogicUpdateInfoAck(const LogicUpdateInfoAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&svropentime_, &from.svropentime_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&svropentime_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:LogicUpdateInfoAck)
}

void LogicUpdateInfoAck::SharedCtor() {
  ::memset(&svropentime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&svropentime_)) + sizeof(retcode_));
}

LogicUpdateInfoAck::~LogicUpdateInfoAck() {
  // @@protoc_insertion_point(destructor:LogicUpdateInfoAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogicUpdateInfoAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogicUpdateInfoAck::ArenaDtor(void* object) {
  LogicUpdateInfoAck* _this = reinterpret_cast< LogicUpdateInfoAck* >(object);
  (void)_this;
}
void LogicUpdateInfoAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogicUpdateInfoAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicUpdateInfoAck& LogicUpdateInfoAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogicUpdateInfoAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void LogicUpdateInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicUpdateInfoAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&svropentime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&svropentime_)) + sizeof(retcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicUpdateInfoAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 SvrOpenTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          svropentime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicUpdateInfoAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicUpdateInfoAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // uint64 SvrOpenTime = 2;
  if (this->svropentime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_svropentime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicUpdateInfoAck)
  return target;
}

size_t LogicUpdateInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicUpdateInfoAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 SvrOpenTime = 2;
  if (this->svropentime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_svropentime());
  }

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicUpdateInfoAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicUpdateInfoAck)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicUpdateInfoAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicUpdateInfoAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicUpdateInfoAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicUpdateInfoAck)
    MergeFrom(*source);
  }
}

void LogicUpdateInfoAck::MergeFrom(const LogicUpdateInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicUpdateInfoAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.svropentime() != 0) {
    _internal_set_svropentime(from._internal_svropentime());
  }
  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void LogicUpdateInfoAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicUpdateInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicUpdateInfoAck::CopyFrom(const LogicUpdateInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicUpdateInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicUpdateInfoAck::IsInitialized() const {
  return true;
}

void LogicUpdateInfoAck::InternalSwap(LogicUpdateInfoAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicUpdateInfoAck, retcode_)
      + sizeof(LogicUpdateInfoAck::retcode_)
      - PROTOBUF_FIELD_OFFSET(LogicUpdateInfoAck, svropentime_)>(
          reinterpret_cast<char*>(&svropentime_),
          reinterpret_cast<char*>(&other->svropentime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicUpdateInfoAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetupEquipReq::InitAsDefaultInstance() {
}
class SetupEquipReq::_Internal {
 public:
};

SetupEquipReq::SetupEquipReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetupEquipReq)
}
SetupEquipReq::SetupEquipReq(const SetupEquipReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&equipguid_, &from.equipguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&bagguid_) -
    reinterpret_cast<char*>(&equipguid_)) + sizeof(bagguid_));
  // @@protoc_insertion_point(copy_constructor:SetupEquipReq)
}

void SetupEquipReq::SharedCtor() {
  ::memset(&equipguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bagguid_) -
      reinterpret_cast<char*>(&equipguid_)) + sizeof(bagguid_));
}

SetupEquipReq::~SetupEquipReq() {
  // @@protoc_insertion_point(destructor:SetupEquipReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetupEquipReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetupEquipReq::ArenaDtor(void* object) {
  SetupEquipReq* _this = reinterpret_cast< SetupEquipReq* >(object);
  (void)_this;
}
void SetupEquipReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetupEquipReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetupEquipReq& SetupEquipReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetupEquipReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void SetupEquipReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SetupEquipReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&equipguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bagguid_) -
      reinterpret_cast<char*>(&equipguid_)) + sizeof(bagguid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupEquipReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 EquipGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          equipguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 BagGuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bagguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetupEquipReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetupEquipReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 EquipGuid = 1;
  if (this->equipguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_equipguid(), target);
  }

  // uint64 BagGuid = 2;
  if (this->bagguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_bagguid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetupEquipReq)
  return target;
}

size_t SetupEquipReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetupEquipReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 EquipGuid = 1;
  if (this->equipguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_equipguid());
  }

  // uint64 BagGuid = 2;
  if (this->bagguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bagguid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetupEquipReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetupEquipReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetupEquipReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetupEquipReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetupEquipReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetupEquipReq)
    MergeFrom(*source);
  }
}

void SetupEquipReq::MergeFrom(const SetupEquipReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetupEquipReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.equipguid() != 0) {
    _internal_set_equipguid(from._internal_equipguid());
  }
  if (from.bagguid() != 0) {
    _internal_set_bagguid(from._internal_bagguid());
  }
}

void SetupEquipReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetupEquipReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetupEquipReq::CopyFrom(const SetupEquipReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetupEquipReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupEquipReq::IsInitialized() const {
  return true;
}

void SetupEquipReq::InternalSwap(SetupEquipReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetupEquipReq, bagguid_)
      + sizeof(SetupEquipReq::bagguid_)
      - PROTOBUF_FIELD_OFFSET(SetupEquipReq, equipguid_)>(
          reinterpret_cast<char*>(&equipguid_),
          reinterpret_cast<char*>(&other->equipguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupEquipReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetupEquipAck::InitAsDefaultInstance() {
}
class SetupEquipAck::_Internal {
 public:
};

SetupEquipAck::SetupEquipAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetupEquipAck)
}
SetupEquipAck::SetupEquipAck(const SetupEquipAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:SetupEquipAck)
}

void SetupEquipAck::SharedCtor() {
  retcode_ = 0u;
}

SetupEquipAck::~SetupEquipAck() {
  // @@protoc_insertion_point(destructor:SetupEquipAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetupEquipAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetupEquipAck::ArenaDtor(void* object) {
  SetupEquipAck* _this = reinterpret_cast< SetupEquipAck* >(object);
  (void)_this;
}
void SetupEquipAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetupEquipAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetupEquipAck& SetupEquipAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetupEquipAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void SetupEquipAck::Clear() {
// @@protoc_insertion_point(message_clear_start:SetupEquipAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupEquipAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetupEquipAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetupEquipAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetupEquipAck)
  return target;
}

size_t SetupEquipAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetupEquipAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetupEquipAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetupEquipAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SetupEquipAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetupEquipAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetupEquipAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetupEquipAck)
    MergeFrom(*source);
  }
}

void SetupEquipAck::MergeFrom(const SetupEquipAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetupEquipAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void SetupEquipAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetupEquipAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetupEquipAck::CopyFrom(const SetupEquipAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetupEquipAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupEquipAck::IsInitialized() const {
  return true;
}

void SetupEquipAck::InternalSwap(SetupEquipAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupEquipAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Msg_GiftCodeReq::InitAsDefaultInstance() {
}
class Msg_GiftCodeReq::_Internal {
 public:
};

Msg_GiftCodeReq::Msg_GiftCodeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Msg_GiftCodeReq)
}
Msg_GiftCodeReq::Msg_GiftCodeReq(const Msg_GiftCodeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  giftcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_giftcode().empty()) {
    giftcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_giftcode(),
      GetArena());
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&areaid_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(areaid_));
  // @@protoc_insertion_point(copy_constructor:Msg_GiftCodeReq)
}

void Msg_GiftCodeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Msg_GiftCodeReq_Msg_5fGame_2eproto.base);
  giftcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&areaid_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(areaid_));
}

Msg_GiftCodeReq::~Msg_GiftCodeReq() {
  // @@protoc_insertion_point(destructor:Msg_GiftCodeReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Msg_GiftCodeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  giftcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_GiftCodeReq::ArenaDtor(void* object) {
  Msg_GiftCodeReq* _this = reinterpret_cast< Msg_GiftCodeReq* >(object);
  (void)_this;
}
void Msg_GiftCodeReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_GiftCodeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_GiftCodeReq& Msg_GiftCodeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_GiftCodeReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void Msg_GiftCodeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Msg_GiftCodeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  giftcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&areaid_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(areaid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_GiftCodeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string GiftCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_giftcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Msg_GiftCodeReq.GiftCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 AccountID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 AreaID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          areaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_GiftCodeReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Msg_GiftCodeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // string GiftCode = 2;
  if (this->giftcode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_giftcode().data(), static_cast<int>(this->_internal_giftcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Msg_GiftCodeReq.GiftCode");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_giftcode(), target);
  }

  // uint32 Channel = 3;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel(), target);
  }

  // uint64 AccountID = 4;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_accountid(), target);
  }

  // int32 AreaID = 5;
  if (this->areaid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_areaid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Msg_GiftCodeReq)
  return target;
}

size_t Msg_GiftCodeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Msg_GiftCodeReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string GiftCode = 2;
  if (this->giftcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_giftcode());
  }

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint64 AccountID = 4;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accountid());
  }

  // uint32 Channel = 3;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel());
  }

  // int32 AreaID = 5;
  if (this->areaid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_areaid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_GiftCodeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Msg_GiftCodeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_GiftCodeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_GiftCodeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Msg_GiftCodeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Msg_GiftCodeReq)
    MergeFrom(*source);
  }
}

void Msg_GiftCodeReq::MergeFrom(const Msg_GiftCodeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Msg_GiftCodeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.giftcode().size() > 0) {
    _internal_set_giftcode(from._internal_giftcode());
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from.areaid() != 0) {
    _internal_set_areaid(from._internal_areaid());
  }
}

void Msg_GiftCodeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Msg_GiftCodeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_GiftCodeReq::CopyFrom(const Msg_GiftCodeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Msg_GiftCodeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GiftCodeReq::IsInitialized() const {
  return true;
}

void Msg_GiftCodeReq::InternalSwap(Msg_GiftCodeReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  giftcode_.Swap(&other->giftcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_GiftCodeReq, areaid_)
      + sizeof(Msg_GiftCodeReq::areaid_)
      - PROTOBUF_FIELD_OFFSET(Msg_GiftCodeReq, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_GiftCodeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Msg_GiftCodeAck::InitAsDefaultInstance() {
}
class Msg_GiftCodeAck::_Internal {
 public:
};

void Msg_GiftCodeAck::clear_items() {
  items_.Clear();
}
Msg_GiftCodeAck::Msg_GiftCodeAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Msg_GiftCodeAck)
}
Msg_GiftCodeAck::Msg_GiftCodeAck(const Msg_GiftCodeAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:Msg_GiftCodeAck)
}

void Msg_GiftCodeAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Msg_GiftCodeAck_Msg_5fGame_2eproto.base);
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(retcode_));
}

Msg_GiftCodeAck::~Msg_GiftCodeAck() {
  // @@protoc_insertion_point(destructor:Msg_GiftCodeAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Msg_GiftCodeAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Msg_GiftCodeAck::ArenaDtor(void* object) {
  Msg_GiftCodeAck* _this = reinterpret_cast< Msg_GiftCodeAck* >(object);
  (void)_this;
}
void Msg_GiftCodeAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_GiftCodeAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_GiftCodeAck& Msg_GiftCodeAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_GiftCodeAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void Msg_GiftCodeAck::Clear() {
// @@protoc_insertion_point(message_clear_start:Msg_GiftCodeAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(retcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_GiftCodeAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 RoleID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ItemData items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_GiftCodeAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Msg_GiftCodeAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // uint64 RoleID = 2;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roleid(), target);
  }

  // repeated .ItemData items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Msg_GiftCodeAck)
  return target;
}

size_t Msg_GiftCodeAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Msg_GiftCodeAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ItemData items = 3;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 RoleID = 2;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_GiftCodeAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Msg_GiftCodeAck)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_GiftCodeAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_GiftCodeAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Msg_GiftCodeAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Msg_GiftCodeAck)
    MergeFrom(*source);
  }
}

void Msg_GiftCodeAck::MergeFrom(const Msg_GiftCodeAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Msg_GiftCodeAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void Msg_GiftCodeAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Msg_GiftCodeAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_GiftCodeAck::CopyFrom(const Msg_GiftCodeAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Msg_GiftCodeAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GiftCodeAck::IsInitialized() const {
  return true;
}

void Msg_GiftCodeAck::InternalSwap(Msg_GiftCodeAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_GiftCodeAck, retcode_)
      + sizeof(Msg_GiftCodeAck::retcode_)
      - PROTOBUF_FIELD_OFFSET(Msg_GiftCodeAck, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_GiftCodeAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsetEquipReq::InitAsDefaultInstance() {
}
class UnsetEquipReq::_Internal {
 public:
};

UnsetEquipReq::UnsetEquipReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UnsetEquipReq)
}
UnsetEquipReq::UnsetEquipReq(const UnsetEquipReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  equipguid_ = from.equipguid_;
  // @@protoc_insertion_point(copy_constructor:UnsetEquipReq)
}

void UnsetEquipReq::SharedCtor() {
  equipguid_ = PROTOBUF_ULONGLONG(0);
}

UnsetEquipReq::~UnsetEquipReq() {
  // @@protoc_insertion_point(destructor:UnsetEquipReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnsetEquipReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnsetEquipReq::ArenaDtor(void* object) {
  UnsetEquipReq* _this = reinterpret_cast< UnsetEquipReq* >(object);
  (void)_this;
}
void UnsetEquipReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnsetEquipReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsetEquipReq& UnsetEquipReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsetEquipReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void UnsetEquipReq::Clear() {
// @@protoc_insertion_point(message_clear_start:UnsetEquipReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equipguid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetEquipReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 EquipGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          equipguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsetEquipReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnsetEquipReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 EquipGuid = 1;
  if (this->equipguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_equipguid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnsetEquipReq)
  return target;
}

size_t UnsetEquipReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnsetEquipReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 EquipGuid = 1;
  if (this->equipguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_equipguid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsetEquipReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnsetEquipReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsetEquipReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsetEquipReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnsetEquipReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnsetEquipReq)
    MergeFrom(*source);
  }
}

void UnsetEquipReq::MergeFrom(const UnsetEquipReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnsetEquipReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.equipguid() != 0) {
    _internal_set_equipguid(from._internal_equipguid());
  }
}

void UnsetEquipReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnsetEquipReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsetEquipReq::CopyFrom(const UnsetEquipReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnsetEquipReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetEquipReq::IsInitialized() const {
  return true;
}

void UnsetEquipReq::InternalSwap(UnsetEquipReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(equipguid_, other->equipguid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetEquipReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsetEquipAck::InitAsDefaultInstance() {
}
class UnsetEquipAck::_Internal {
 public:
};

UnsetEquipAck::UnsetEquipAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UnsetEquipAck)
}
UnsetEquipAck::UnsetEquipAck(const UnsetEquipAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:UnsetEquipAck)
}

void UnsetEquipAck::SharedCtor() {
  retcode_ = 0u;
}

UnsetEquipAck::~UnsetEquipAck() {
  // @@protoc_insertion_point(destructor:UnsetEquipAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnsetEquipAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnsetEquipAck::ArenaDtor(void* object) {
  UnsetEquipAck* _this = reinterpret_cast< UnsetEquipAck* >(object);
  (void)_this;
}
void UnsetEquipAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnsetEquipAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsetEquipAck& UnsetEquipAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsetEquipAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void UnsetEquipAck::Clear() {
// @@protoc_insertion_point(message_clear_start:UnsetEquipAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetEquipAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsetEquipAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnsetEquipAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnsetEquipAck)
  return target;
}

size_t UnsetEquipAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnsetEquipAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsetEquipAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnsetEquipAck)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsetEquipAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsetEquipAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnsetEquipAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnsetEquipAck)
    MergeFrom(*source);
  }
}

void UnsetEquipAck::MergeFrom(const UnsetEquipAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnsetEquipAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void UnsetEquipAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnsetEquipAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsetEquipAck::CopyFrom(const UnsetEquipAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnsetEquipAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetEquipAck::IsInitialized() const {
  return true;
}

void UnsetEquipAck::InternalSwap(UnsetEquipAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetEquipAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetupGemReq::InitAsDefaultInstance() {
}
class SetupGemReq::_Internal {
 public:
};

SetupGemReq::SetupGemReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetupGemReq)
}
SetupGemReq::SetupGemReq(const SetupGemReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gemguid_, &from.gemguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&targetpos_) -
    reinterpret_cast<char*>(&gemguid_)) + sizeof(targetpos_));
  // @@protoc_insertion_point(copy_constructor:SetupGemReq)
}

void SetupGemReq::SharedCtor() {
  ::memset(&gemguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetpos_) -
      reinterpret_cast<char*>(&gemguid_)) + sizeof(targetpos_));
}

SetupGemReq::~SetupGemReq() {
  // @@protoc_insertion_point(destructor:SetupGemReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetupGemReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetupGemReq::ArenaDtor(void* object) {
  SetupGemReq* _this = reinterpret_cast< SetupGemReq* >(object);
  (void)_this;
}
void SetupGemReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetupGemReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetupGemReq& SetupGemReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetupGemReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void SetupGemReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SetupGemReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gemguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetpos_) -
      reinterpret_cast<char*>(&gemguid_)) + sizeof(targetpos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupGemReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 GemGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gemguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 BagGuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bagguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TargetPos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          targetpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetupGemReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetupGemReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 GemGuid = 1;
  if (this->gemguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gemguid(), target);
  }

  // uint64 BagGuid = 2;
  if (this->bagguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_bagguid(), target);
  }

  // int32 TargetPos = 3;
  if (this->targetpos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_targetpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetupGemReq)
  return target;
}

size_t SetupGemReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetupGemReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 GemGuid = 1;
  if (this->gemguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gemguid());
  }

  // uint64 BagGuid = 2;
  if (this->bagguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bagguid());
  }

  // int32 TargetPos = 3;
  if (this->targetpos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_targetpos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetupGemReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetupGemReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetupGemReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetupGemReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetupGemReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetupGemReq)
    MergeFrom(*source);
  }
}

void SetupGemReq::MergeFrom(const SetupGemReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetupGemReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gemguid() != 0) {
    _internal_set_gemguid(from._internal_gemguid());
  }
  if (from.bagguid() != 0) {
    _internal_set_bagguid(from._internal_bagguid());
  }
  if (from.targetpos() != 0) {
    _internal_set_targetpos(from._internal_targetpos());
  }
}

void SetupGemReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetupGemReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetupGemReq::CopyFrom(const SetupGemReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetupGemReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupGemReq::IsInitialized() const {
  return true;
}

void SetupGemReq::InternalSwap(SetupGemReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetupGemReq, targetpos_)
      + sizeof(SetupGemReq::targetpos_)
      - PROTOBUF_FIELD_OFFSET(SetupGemReq, gemguid_)>(
          reinterpret_cast<char*>(&gemguid_),
          reinterpret_cast<char*>(&other->gemguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupGemReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetupGemAck::InitAsDefaultInstance() {
}
class SetupGemAck::_Internal {
 public:
};

SetupGemAck::SetupGemAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetupGemAck)
}
SetupGemAck::SetupGemAck(const SetupGemAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:SetupGemAck)
}

void SetupGemAck::SharedCtor() {
  retcode_ = 0u;
}

SetupGemAck::~SetupGemAck() {
  // @@protoc_insertion_point(destructor:SetupGemAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetupGemAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetupGemAck::ArenaDtor(void* object) {
  SetupGemAck* _this = reinterpret_cast< SetupGemAck* >(object);
  (void)_this;
}
void SetupGemAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetupGemAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetupGemAck& SetupGemAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetupGemAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void SetupGemAck::Clear() {
// @@protoc_insertion_point(message_clear_start:SetupGemAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupGemAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetupGemAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetupGemAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetupGemAck)
  return target;
}

size_t SetupGemAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetupGemAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetupGemAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetupGemAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SetupGemAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetupGemAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetupGemAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetupGemAck)
    MergeFrom(*source);
  }
}

void SetupGemAck::MergeFrom(const SetupGemAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetupGemAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void SetupGemAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetupGemAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetupGemAck::CopyFrom(const SetupGemAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetupGemAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupGemAck::IsInitialized() const {
  return true;
}

void SetupGemAck::InternalSwap(SetupGemAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupGemAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsetGemReq::InitAsDefaultInstance() {
}
class UnsetGemReq::_Internal {
 public:
};

UnsetGemReq::UnsetGemReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UnsetGemReq)
}
UnsetGemReq::UnsetGemReq(const UnsetGemReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gemguid_ = from.gemguid_;
  // @@protoc_insertion_point(copy_constructor:UnsetGemReq)
}

void UnsetGemReq::SharedCtor() {
  gemguid_ = PROTOBUF_ULONGLONG(0);
}

UnsetGemReq::~UnsetGemReq() {
  // @@protoc_insertion_point(destructor:UnsetGemReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnsetGemReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnsetGemReq::ArenaDtor(void* object) {
  UnsetGemReq* _this = reinterpret_cast< UnsetGemReq* >(object);
  (void)_this;
}
void UnsetGemReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnsetGemReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsetGemReq& UnsetGemReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsetGemReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void UnsetGemReq::Clear() {
// @@protoc_insertion_point(message_clear_start:UnsetGemReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gemguid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetGemReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 GemGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gemguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsetGemReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnsetGemReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 GemGuid = 1;
  if (this->gemguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gemguid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnsetGemReq)
  return target;
}

size_t UnsetGemReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnsetGemReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 GemGuid = 1;
  if (this->gemguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gemguid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsetGemReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnsetGemReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsetGemReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsetGemReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnsetGemReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnsetGemReq)
    MergeFrom(*source);
  }
}

void UnsetGemReq::MergeFrom(const UnsetGemReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnsetGemReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gemguid() != 0) {
    _internal_set_gemguid(from._internal_gemguid());
  }
}

void UnsetGemReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnsetGemReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsetGemReq::CopyFrom(const UnsetGemReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnsetGemReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetGemReq::IsInitialized() const {
  return true;
}

void UnsetGemReq::InternalSwap(UnsetGemReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(gemguid_, other->gemguid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetGemReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsetGemAck::InitAsDefaultInstance() {
}
class UnsetGemAck::_Internal {
 public:
};

UnsetGemAck::UnsetGemAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UnsetGemAck)
}
UnsetGemAck::UnsetGemAck(const UnsetGemAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:UnsetGemAck)
}

void UnsetGemAck::SharedCtor() {
  retcode_ = 0u;
}

UnsetGemAck::~UnsetGemAck() {
  // @@protoc_insertion_point(destructor:UnsetGemAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnsetGemAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnsetGemAck::ArenaDtor(void* object) {
  UnsetGemAck* _this = reinterpret_cast< UnsetGemAck* >(object);
  (void)_this;
}
void UnsetGemAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnsetGemAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsetGemAck& UnsetGemAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsetGemAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void UnsetGemAck::Clear() {
// @@protoc_insertion_point(message_clear_start:UnsetGemAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetGemAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsetGemAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnsetGemAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnsetGemAck)
  return target;
}

size_t UnsetGemAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnsetGemAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsetGemAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnsetGemAck)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsetGemAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsetGemAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnsetGemAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnsetGemAck)
    MergeFrom(*source);
  }
}

void UnsetGemAck::MergeFrom(const UnsetGemAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnsetGemAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void UnsetGemAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnsetGemAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsetGemAck::CopyFrom(const UnsetGemAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnsetGemAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetGemAck::IsInitialized() const {
  return true;
}

void UnsetGemAck::InternalSwap(UnsetGemAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetGemAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetupPartnerReq::InitAsDefaultInstance() {
}
class SetupPartnerReq::_Internal {
 public:
};

SetupPartnerReq::SetupPartnerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetupPartnerReq)
}
SetupPartnerReq::SetupPartnerReq(const SetupPartnerReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&partnerguid_, &from.partnerguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&targetpos_) -
    reinterpret_cast<char*>(&partnerguid_)) + sizeof(targetpos_));
  // @@protoc_insertion_point(copy_constructor:SetupPartnerReq)
}

void SetupPartnerReq::SharedCtor() {
  ::memset(&partnerguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetpos_) -
      reinterpret_cast<char*>(&partnerguid_)) + sizeof(targetpos_));
}

SetupPartnerReq::~SetupPartnerReq() {
  // @@protoc_insertion_point(destructor:SetupPartnerReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetupPartnerReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetupPartnerReq::ArenaDtor(void* object) {
  SetupPartnerReq* _this = reinterpret_cast< SetupPartnerReq* >(object);
  (void)_this;
}
void SetupPartnerReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetupPartnerReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetupPartnerReq& SetupPartnerReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetupPartnerReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void SetupPartnerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SetupPartnerReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&partnerguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetpos_) -
      reinterpret_cast<char*>(&partnerguid_)) + sizeof(targetpos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupPartnerReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 PartnerGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          partnerguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TargetPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          targetpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetupPartnerReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetupPartnerReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 PartnerGuid = 1;
  if (this->partnerguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_partnerguid(), target);
  }

  // int32 TargetPos = 2;
  if (this->targetpos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_targetpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetupPartnerReq)
  return target;
}

size_t SetupPartnerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetupPartnerReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 PartnerGuid = 1;
  if (this->partnerguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_partnerguid());
  }

  // int32 TargetPos = 2;
  if (this->targetpos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_targetpos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetupPartnerReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetupPartnerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetupPartnerReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetupPartnerReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetupPartnerReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetupPartnerReq)
    MergeFrom(*source);
  }
}

void SetupPartnerReq::MergeFrom(const SetupPartnerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetupPartnerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partnerguid() != 0) {
    _internal_set_partnerguid(from._internal_partnerguid());
  }
  if (from.targetpos() != 0) {
    _internal_set_targetpos(from._internal_targetpos());
  }
}

void SetupPartnerReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetupPartnerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetupPartnerReq::CopyFrom(const SetupPartnerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetupPartnerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupPartnerReq::IsInitialized() const {
  return true;
}

void SetupPartnerReq::InternalSwap(SetupPartnerReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetupPartnerReq, targetpos_)
      + sizeof(SetupPartnerReq::targetpos_)
      - PROTOBUF_FIELD_OFFSET(SetupPartnerReq, partnerguid_)>(
          reinterpret_cast<char*>(&partnerguid_),
          reinterpret_cast<char*>(&other->partnerguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupPartnerReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetupPartnerAck::InitAsDefaultInstance() {
}
class SetupPartnerAck::_Internal {
 public:
};

SetupPartnerAck::SetupPartnerAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetupPartnerAck)
}
SetupPartnerAck::SetupPartnerAck(const SetupPartnerAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:SetupPartnerAck)
}

void SetupPartnerAck::SharedCtor() {
  retcode_ = 0u;
}

SetupPartnerAck::~SetupPartnerAck() {
  // @@protoc_insertion_point(destructor:SetupPartnerAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetupPartnerAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetupPartnerAck::ArenaDtor(void* object) {
  SetupPartnerAck* _this = reinterpret_cast< SetupPartnerAck* >(object);
  (void)_this;
}
void SetupPartnerAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetupPartnerAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetupPartnerAck& SetupPartnerAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetupPartnerAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void SetupPartnerAck::Clear() {
// @@protoc_insertion_point(message_clear_start:SetupPartnerAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupPartnerAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetupPartnerAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetupPartnerAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetupPartnerAck)
  return target;
}

size_t SetupPartnerAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetupPartnerAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetupPartnerAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetupPartnerAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SetupPartnerAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetupPartnerAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetupPartnerAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetupPartnerAck)
    MergeFrom(*source);
  }
}

void SetupPartnerAck::MergeFrom(const SetupPartnerAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetupPartnerAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void SetupPartnerAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetupPartnerAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetupPartnerAck::CopyFrom(const SetupPartnerAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetupPartnerAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupPartnerAck::IsInitialized() const {
  return true;
}

void SetupPartnerAck::InternalSwap(SetupPartnerAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupPartnerAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsetPartnerReq::InitAsDefaultInstance() {
}
class UnsetPartnerReq::_Internal {
 public:
};

UnsetPartnerReq::UnsetPartnerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UnsetPartnerReq)
}
UnsetPartnerReq::UnsetPartnerReq(const UnsetPartnerReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  targetpos_ = from.targetpos_;
  // @@protoc_insertion_point(copy_constructor:UnsetPartnerReq)
}

void UnsetPartnerReq::SharedCtor() {
  targetpos_ = 0;
}

UnsetPartnerReq::~UnsetPartnerReq() {
  // @@protoc_insertion_point(destructor:UnsetPartnerReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnsetPartnerReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnsetPartnerReq::ArenaDtor(void* object) {
  UnsetPartnerReq* _this = reinterpret_cast< UnsetPartnerReq* >(object);
  (void)_this;
}
void UnsetPartnerReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnsetPartnerReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsetPartnerReq& UnsetPartnerReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsetPartnerReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void UnsetPartnerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:UnsetPartnerReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetpos_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetPartnerReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 TargetPos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          targetpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsetPartnerReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnsetPartnerReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TargetPos = 1;
  if (this->targetpos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_targetpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnsetPartnerReq)
  return target;
}

size_t UnsetPartnerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnsetPartnerReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 TargetPos = 1;
  if (this->targetpos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_targetpos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsetPartnerReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnsetPartnerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsetPartnerReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsetPartnerReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnsetPartnerReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnsetPartnerReq)
    MergeFrom(*source);
  }
}

void UnsetPartnerReq::MergeFrom(const UnsetPartnerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnsetPartnerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.targetpos() != 0) {
    _internal_set_targetpos(from._internal_targetpos());
  }
}

void UnsetPartnerReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnsetPartnerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsetPartnerReq::CopyFrom(const UnsetPartnerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnsetPartnerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetPartnerReq::IsInitialized() const {
  return true;
}

void UnsetPartnerReq::InternalSwap(UnsetPartnerReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(targetpos_, other->targetpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetPartnerReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsetPartnerAck::InitAsDefaultInstance() {
}
class UnsetPartnerAck::_Internal {
 public:
};

UnsetPartnerAck::UnsetPartnerAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UnsetPartnerAck)
}
UnsetPartnerAck::UnsetPartnerAck(const UnsetPartnerAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:UnsetPartnerAck)
}

void UnsetPartnerAck::SharedCtor() {
  retcode_ = 0u;
}

UnsetPartnerAck::~UnsetPartnerAck() {
  // @@protoc_insertion_point(destructor:UnsetPartnerAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnsetPartnerAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnsetPartnerAck::ArenaDtor(void* object) {
  UnsetPartnerAck* _this = reinterpret_cast< UnsetPartnerAck* >(object);
  (void)_this;
}
void UnsetPartnerAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnsetPartnerAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsetPartnerAck& UnsetPartnerAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsetPartnerAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void UnsetPartnerAck::Clear() {
// @@protoc_insertion_point(message_clear_start:UnsetPartnerAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetPartnerAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsetPartnerAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnsetPartnerAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnsetPartnerAck)
  return target;
}

size_t UnsetPartnerAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnsetPartnerAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsetPartnerAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnsetPartnerAck)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsetPartnerAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsetPartnerAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnsetPartnerAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnsetPartnerAck)
    MergeFrom(*source);
  }
}

void UnsetPartnerAck::MergeFrom(const UnsetPartnerAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnsetPartnerAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void UnsetPartnerAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnsetPartnerAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsetPartnerAck::CopyFrom(const UnsetPartnerAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnsetPartnerAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetPartnerAck::IsInitialized() const {
  return true;
}

void UnsetPartnerAck::InternalSwap(UnsetPartnerAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetPartnerAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetupMountReq::InitAsDefaultInstance() {
}
class SetupMountReq::_Internal {
 public:
};

SetupMountReq::SetupMountReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetupMountReq)
}
SetupMountReq::SetupMountReq(const SetupMountReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mountguid_, &from.mountguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&targetpos_) -
    reinterpret_cast<char*>(&mountguid_)) + sizeof(targetpos_));
  // @@protoc_insertion_point(copy_constructor:SetupMountReq)
}

void SetupMountReq::SharedCtor() {
  ::memset(&mountguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetpos_) -
      reinterpret_cast<char*>(&mountguid_)) + sizeof(targetpos_));
}

SetupMountReq::~SetupMountReq() {
  // @@protoc_insertion_point(destructor:SetupMountReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetupMountReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetupMountReq::ArenaDtor(void* object) {
  SetupMountReq* _this = reinterpret_cast< SetupMountReq* >(object);
  (void)_this;
}
void SetupMountReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetupMountReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetupMountReq& SetupMountReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetupMountReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void SetupMountReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SetupMountReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mountguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetpos_) -
      reinterpret_cast<char*>(&mountguid_)) + sizeof(targetpos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupMountReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 MountGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mountguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TargetPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          targetpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetupMountReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetupMountReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 MountGuid = 1;
  if (this->mountguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_mountguid(), target);
  }

  // int32 TargetPos = 2;
  if (this->targetpos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_targetpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetupMountReq)
  return target;
}

size_t SetupMountReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetupMountReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 MountGuid = 1;
  if (this->mountguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mountguid());
  }

  // int32 TargetPos = 2;
  if (this->targetpos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_targetpos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetupMountReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetupMountReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetupMountReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetupMountReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetupMountReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetupMountReq)
    MergeFrom(*source);
  }
}

void SetupMountReq::MergeFrom(const SetupMountReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetupMountReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mountguid() != 0) {
    _internal_set_mountguid(from._internal_mountguid());
  }
  if (from.targetpos() != 0) {
    _internal_set_targetpos(from._internal_targetpos());
  }
}

void SetupMountReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetupMountReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetupMountReq::CopyFrom(const SetupMountReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetupMountReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupMountReq::IsInitialized() const {
  return true;
}

void SetupMountReq::InternalSwap(SetupMountReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetupMountReq, targetpos_)
      + sizeof(SetupMountReq::targetpos_)
      - PROTOBUF_FIELD_OFFSET(SetupMountReq, mountguid_)>(
          reinterpret_cast<char*>(&mountguid_),
          reinterpret_cast<char*>(&other->mountguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupMountReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetupMountAck::InitAsDefaultInstance() {
}
class SetupMountAck::_Internal {
 public:
};

SetupMountAck::SetupMountAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetupMountAck)
}
SetupMountAck::SetupMountAck(const SetupMountAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:SetupMountAck)
}

void SetupMountAck::SharedCtor() {
  retcode_ = 0u;
}

SetupMountAck::~SetupMountAck() {
  // @@protoc_insertion_point(destructor:SetupMountAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetupMountAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetupMountAck::ArenaDtor(void* object) {
  SetupMountAck* _this = reinterpret_cast< SetupMountAck* >(object);
  (void)_this;
}
void SetupMountAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetupMountAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetupMountAck& SetupMountAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetupMountAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void SetupMountAck::Clear() {
// @@protoc_insertion_point(message_clear_start:SetupMountAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupMountAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetupMountAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetupMountAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetupMountAck)
  return target;
}

size_t SetupMountAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetupMountAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetupMountAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetupMountAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SetupMountAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetupMountAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetupMountAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetupMountAck)
    MergeFrom(*source);
  }
}

void SetupMountAck::MergeFrom(const SetupMountAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetupMountAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void SetupMountAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetupMountAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetupMountAck::CopyFrom(const SetupMountAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetupMountAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupMountAck::IsInitialized() const {
  return true;
}

void SetupMountAck::InternalSwap(SetupMountAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupMountAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsetMountReq::InitAsDefaultInstance() {
}
class UnsetMountReq::_Internal {
 public:
};

UnsetMountReq::UnsetMountReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UnsetMountReq)
}
UnsetMountReq::UnsetMountReq(const UnsetMountReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mountguid_ = from.mountguid_;
  // @@protoc_insertion_point(copy_constructor:UnsetMountReq)
}

void UnsetMountReq::SharedCtor() {
  mountguid_ = PROTOBUF_ULONGLONG(0);
}

UnsetMountReq::~UnsetMountReq() {
  // @@protoc_insertion_point(destructor:UnsetMountReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnsetMountReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnsetMountReq::ArenaDtor(void* object) {
  UnsetMountReq* _this = reinterpret_cast< UnsetMountReq* >(object);
  (void)_this;
}
void UnsetMountReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnsetMountReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsetMountReq& UnsetMountReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsetMountReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void UnsetMountReq::Clear() {
// @@protoc_insertion_point(message_clear_start:UnsetMountReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mountguid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetMountReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 MountGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mountguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsetMountReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnsetMountReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 MountGuid = 1;
  if (this->mountguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_mountguid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnsetMountReq)
  return target;
}

size_t UnsetMountReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnsetMountReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 MountGuid = 1;
  if (this->mountguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mountguid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsetMountReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnsetMountReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsetMountReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsetMountReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnsetMountReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnsetMountReq)
    MergeFrom(*source);
  }
}

void UnsetMountReq::MergeFrom(const UnsetMountReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnsetMountReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mountguid() != 0) {
    _internal_set_mountguid(from._internal_mountguid());
  }
}

void UnsetMountReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnsetMountReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsetMountReq::CopyFrom(const UnsetMountReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnsetMountReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetMountReq::IsInitialized() const {
  return true;
}

void UnsetMountReq::InternalSwap(UnsetMountReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(mountguid_, other->mountguid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetMountReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsetMountAck::InitAsDefaultInstance() {
}
class UnsetMountAck::_Internal {
 public:
};

UnsetMountAck::UnsetMountAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UnsetMountAck)
}
UnsetMountAck::UnsetMountAck(const UnsetMountAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:UnsetMountAck)
}

void UnsetMountAck::SharedCtor() {
  retcode_ = 0u;
}

UnsetMountAck::~UnsetMountAck() {
  // @@protoc_insertion_point(destructor:UnsetMountAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnsetMountAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnsetMountAck::ArenaDtor(void* object) {
  UnsetMountAck* _this = reinterpret_cast< UnsetMountAck* >(object);
  (void)_this;
}
void UnsetMountAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnsetMountAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsetMountAck& UnsetMountAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsetMountAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void UnsetMountAck::Clear() {
// @@protoc_insertion_point(message_clear_start:UnsetMountAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetMountAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsetMountAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnsetMountAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnsetMountAck)
  return target;
}

size_t UnsetMountAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnsetMountAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsetMountAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnsetMountAck)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsetMountAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsetMountAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnsetMountAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnsetMountAck)
    MergeFrom(*source);
  }
}

void UnsetMountAck::MergeFrom(const UnsetMountAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnsetMountAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void UnsetMountAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnsetMountAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsetMountAck::CopyFrom(const UnsetMountAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnsetMountAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetMountAck::IsInitialized() const {
  return true;
}

void UnsetMountAck::InternalSwap(UnsetMountAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetMountAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetupPetReq::InitAsDefaultInstance() {
}
class SetupPetReq::_Internal {
 public:
};

SetupPetReq::SetupPetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetupPetReq)
}
SetupPetReq::SetupPetReq(const SetupPetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  petguid_ = from.petguid_;
  // @@protoc_insertion_point(copy_constructor:SetupPetReq)
}

void SetupPetReq::SharedCtor() {
  petguid_ = PROTOBUF_ULONGLONG(0);
}

SetupPetReq::~SetupPetReq() {
  // @@protoc_insertion_point(destructor:SetupPetReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetupPetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetupPetReq::ArenaDtor(void* object) {
  SetupPetReq* _this = reinterpret_cast< SetupPetReq* >(object);
  (void)_this;
}
void SetupPetReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetupPetReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetupPetReq& SetupPetReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetupPetReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void SetupPetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SetupPetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  petguid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupPetReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 PetGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          petguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetupPetReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetupPetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 PetGuid = 1;
  if (this->petguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_petguid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetupPetReq)
  return target;
}

size_t SetupPetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetupPetReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 PetGuid = 1;
  if (this->petguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_petguid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetupPetReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetupPetReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetupPetReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetupPetReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetupPetReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetupPetReq)
    MergeFrom(*source);
  }
}

void SetupPetReq::MergeFrom(const SetupPetReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetupPetReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.petguid() != 0) {
    _internal_set_petguid(from._internal_petguid());
  }
}

void SetupPetReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetupPetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetupPetReq::CopyFrom(const SetupPetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetupPetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupPetReq::IsInitialized() const {
  return true;
}

void SetupPetReq::InternalSwap(SetupPetReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(petguid_, other->petguid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupPetReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetupPetAck::InitAsDefaultInstance() {
}
class SetupPetAck::_Internal {
 public:
};

SetupPetAck::SetupPetAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetupPetAck)
}
SetupPetAck::SetupPetAck(const SetupPetAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:SetupPetAck)
}

void SetupPetAck::SharedCtor() {
  retcode_ = 0u;
}

SetupPetAck::~SetupPetAck() {
  // @@protoc_insertion_point(destructor:SetupPetAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetupPetAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetupPetAck::ArenaDtor(void* object) {
  SetupPetAck* _this = reinterpret_cast< SetupPetAck* >(object);
  (void)_this;
}
void SetupPetAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetupPetAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetupPetAck& SetupPetAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetupPetAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void SetupPetAck::Clear() {
// @@protoc_insertion_point(message_clear_start:SetupPetAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupPetAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetupPetAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetupPetAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetupPetAck)
  return target;
}

size_t SetupPetAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetupPetAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetupPetAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetupPetAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SetupPetAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetupPetAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetupPetAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetupPetAck)
    MergeFrom(*source);
  }
}

void SetupPetAck::MergeFrom(const SetupPetAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetupPetAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void SetupPetAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetupPetAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetupPetAck::CopyFrom(const SetupPetAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetupPetAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupPetAck::IsInitialized() const {
  return true;
}

void SetupPetAck::InternalSwap(SetupPetAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupPetAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsetPetReq::InitAsDefaultInstance() {
}
class UnsetPetReq::_Internal {
 public:
};

UnsetPetReq::UnsetPetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UnsetPetReq)
}
UnsetPetReq::UnsetPetReq(const UnsetPetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  petguid_ = from.petguid_;
  // @@protoc_insertion_point(copy_constructor:UnsetPetReq)
}

void UnsetPetReq::SharedCtor() {
  petguid_ = PROTOBUF_ULONGLONG(0);
}

UnsetPetReq::~UnsetPetReq() {
  // @@protoc_insertion_point(destructor:UnsetPetReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnsetPetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnsetPetReq::ArenaDtor(void* object) {
  UnsetPetReq* _this = reinterpret_cast< UnsetPetReq* >(object);
  (void)_this;
}
void UnsetPetReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnsetPetReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsetPetReq& UnsetPetReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsetPetReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void UnsetPetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:UnsetPetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  petguid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetPetReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 PetGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          petguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsetPetReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnsetPetReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 PetGuid = 1;
  if (this->petguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_petguid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnsetPetReq)
  return target;
}

size_t UnsetPetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnsetPetReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 PetGuid = 1;
  if (this->petguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_petguid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsetPetReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnsetPetReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsetPetReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsetPetReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnsetPetReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnsetPetReq)
    MergeFrom(*source);
  }
}

void UnsetPetReq::MergeFrom(const UnsetPetReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnsetPetReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.petguid() != 0) {
    _internal_set_petguid(from._internal_petguid());
  }
}

void UnsetPetReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnsetPetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsetPetReq::CopyFrom(const UnsetPetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnsetPetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetPetReq::IsInitialized() const {
  return true;
}

void UnsetPetReq::InternalSwap(UnsetPetReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(petguid_, other->petguid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetPetReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsetPetAck::InitAsDefaultInstance() {
}
class UnsetPetAck::_Internal {
 public:
};

UnsetPetAck::UnsetPetAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UnsetPetAck)
}
UnsetPetAck::UnsetPetAck(const UnsetPetAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:UnsetPetAck)
}

void UnsetPetAck::SharedCtor() {
  retcode_ = 0u;
}

UnsetPetAck::~UnsetPetAck() {
  // @@protoc_insertion_point(destructor:UnsetPetAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnsetPetAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnsetPetAck::ArenaDtor(void* object) {
  UnsetPetAck* _this = reinterpret_cast< UnsetPetAck* >(object);
  (void)_this;
}
void UnsetPetAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnsetPetAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsetPetAck& UnsetPetAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsetPetAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void UnsetPetAck::Clear() {
// @@protoc_insertion_point(message_clear_start:UnsetPetAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetPetAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsetPetAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UnsetPetAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UnsetPetAck)
  return target;
}

size_t UnsetPetAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnsetPetAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsetPetAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnsetPetAck)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsetPetAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsetPetAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnsetPetAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnsetPetAck)
    MergeFrom(*source);
  }
}

void UnsetPetAck::MergeFrom(const UnsetPetAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnsetPetAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void UnsetPetAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnsetPetAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsetPetAck::CopyFrom(const UnsetPetAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnsetPetAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetPetAck::IsInitialized() const {
  return true;
}

void UnsetPetAck::InternalSwap(UnsetPetAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetPetAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StoreBuyReq::InitAsDefaultInstance() {
}
class StoreBuyReq::_Internal {
 public:
};

StoreBuyReq::StoreBuyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:StoreBuyReq)
}
StoreBuyReq::StoreBuyReq(const StoreBuyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&storetype_, &from.storetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&buynum_) -
    reinterpret_cast<char*>(&storetype_)) + sizeof(buynum_));
  // @@protoc_insertion_point(copy_constructor:StoreBuyReq)
}

void StoreBuyReq::SharedCtor() {
  ::memset(&storetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buynum_) -
      reinterpret_cast<char*>(&storetype_)) + sizeof(buynum_));
}

StoreBuyReq::~StoreBuyReq() {
  // @@protoc_insertion_point(destructor:StoreBuyReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StoreBuyReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StoreBuyReq::ArenaDtor(void* object) {
  StoreBuyReq* _this = reinterpret_cast< StoreBuyReq* >(object);
  (void)_this;
}
void StoreBuyReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StoreBuyReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreBuyReq& StoreBuyReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoreBuyReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void StoreBuyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:StoreBuyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&storetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buynum_) -
      reinterpret_cast<char*>(&storetype_)) + sizeof(buynum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreBuyReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 StoreType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          storetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 StoreID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          storeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BuyNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          buynum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StoreBuyReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StoreBuyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 StoreType = 1;
  if (this->storetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_storetype(), target);
  }

  // int32 StoreID = 2;
  if (this->storeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_storeid(), target);
  }

  // int32 BuyNum = 3;
  if (this->buynum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_buynum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StoreBuyReq)
  return target;
}

size_t StoreBuyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StoreBuyReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 StoreType = 1;
  if (this->storetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_storetype());
  }

  // int32 StoreID = 2;
  if (this->storeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_storeid());
  }

  // int32 BuyNum = 3;
  if (this->buynum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buynum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreBuyReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StoreBuyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreBuyReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StoreBuyReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StoreBuyReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StoreBuyReq)
    MergeFrom(*source);
  }
}

void StoreBuyReq::MergeFrom(const StoreBuyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StoreBuyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.storetype() != 0) {
    _internal_set_storetype(from._internal_storetype());
  }
  if (from.storeid() != 0) {
    _internal_set_storeid(from._internal_storeid());
  }
  if (from.buynum() != 0) {
    _internal_set_buynum(from._internal_buynum());
  }
}

void StoreBuyReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StoreBuyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreBuyReq::CopyFrom(const StoreBuyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StoreBuyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreBuyReq::IsInitialized() const {
  return true;
}

void StoreBuyReq::InternalSwap(StoreBuyReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoreBuyReq, buynum_)
      + sizeof(StoreBuyReq::buynum_)
      - PROTOBUF_FIELD_OFFSET(StoreBuyReq, storetype_)>(
          reinterpret_cast<char*>(&storetype_),
          reinterpret_cast<char*>(&other->storetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreBuyReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StoreBuyAck::InitAsDefaultInstance() {
}
class StoreBuyAck::_Internal {
 public:
};

StoreBuyAck::StoreBuyAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:StoreBuyAck)
}
StoreBuyAck::StoreBuyAck(const StoreBuyAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:StoreBuyAck)
}

void StoreBuyAck::SharedCtor() {
  retcode_ = 0u;
}

StoreBuyAck::~StoreBuyAck() {
  // @@protoc_insertion_point(destructor:StoreBuyAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StoreBuyAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StoreBuyAck::ArenaDtor(void* object) {
  StoreBuyAck* _this = reinterpret_cast< StoreBuyAck* >(object);
  (void)_this;
}
void StoreBuyAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StoreBuyAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreBuyAck& StoreBuyAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoreBuyAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void StoreBuyAck::Clear() {
// @@protoc_insertion_point(message_clear_start:StoreBuyAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreBuyAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StoreBuyAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StoreBuyAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StoreBuyAck)
  return target;
}

size_t StoreBuyAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StoreBuyAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreBuyAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StoreBuyAck)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreBuyAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StoreBuyAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StoreBuyAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StoreBuyAck)
    MergeFrom(*source);
  }
}

void StoreBuyAck::MergeFrom(const StoreBuyAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StoreBuyAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void StoreBuyAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StoreBuyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreBuyAck::CopyFrom(const StoreBuyAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StoreBuyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreBuyAck::IsInitialized() const {
  return true;
}

void StoreBuyAck::InternalSwap(StoreBuyAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreBuyAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectChangeNotify::InitAsDefaultInstance() {
}
class ObjectChangeNotify::_Internal {
 public:
};

ObjectChangeNotify::ObjectChangeNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ObjectChangeNotify)
}
ObjectChangeNotify::ObjectChangeNotify(const ObjectChangeNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strvalue().empty()) {
    strvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_strvalue(),
      GetArena());
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&changetype_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(changetype_));
  // @@protoc_insertion_point(copy_constructor:ObjectChangeNotify)
}

void ObjectChangeNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectChangeNotify_Msg_5fGame_2eproto.base);
  strvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&changetype_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(changetype_));
}

ObjectChangeNotify::~ObjectChangeNotify() {
  // @@protoc_insertion_point(destructor:ObjectChangeNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectChangeNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObjectChangeNotify::ArenaDtor(void* object) {
  ObjectChangeNotify* _this = reinterpret_cast< ObjectChangeNotify* >(object);
  (void)_this;
}
void ObjectChangeNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectChangeNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectChangeNotify& ObjectChangeNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectChangeNotify_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void ObjectChangeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:ObjectChangeNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strvalue_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&changetype_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(changetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectChangeNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ChangeType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          changetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 IntValue1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          intvalue1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 IntValue2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          intvalue2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string StrValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_strvalue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ObjectChangeNotify.StrValue"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectChangeNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ObjectChangeNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  // int32 ChangeType = 2;
  if (this->changetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_changetype(), target);
  }

  // int64 IntValue1 = 3;
  if (this->intvalue1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_intvalue1(), target);
  }

  // int64 IntValue2 = 4;
  if (this->intvalue2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_intvalue2(), target);
  }

  // string StrValue = 5;
  if (this->strvalue().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strvalue().data(), static_cast<int>(this->_internal_strvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ObjectChangeNotify.StrValue");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_strvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ObjectChangeNotify)
  return target;
}

size_t ObjectChangeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ObjectChangeNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string StrValue = 5;
  if (this->strvalue().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strvalue());
  }

  // int64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roleid());
  }

  // int64 IntValue1 = 3;
  if (this->intvalue1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_intvalue1());
  }

  // int64 IntValue2 = 4;
  if (this->intvalue2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_intvalue2());
  }

  // int32 ChangeType = 2;
  if (this->changetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_changetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectChangeNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ObjectChangeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectChangeNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectChangeNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ObjectChangeNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ObjectChangeNotify)
    MergeFrom(*source);
  }
}

void ObjectChangeNotify::MergeFrom(const ObjectChangeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ObjectChangeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strvalue().size() > 0) {
    _internal_set_strvalue(from._internal_strvalue());
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.intvalue1() != 0) {
    _internal_set_intvalue1(from._internal_intvalue1());
  }
  if (from.intvalue2() != 0) {
    _internal_set_intvalue2(from._internal_intvalue2());
  }
  if (from.changetype() != 0) {
    _internal_set_changetype(from._internal_changetype());
  }
}

void ObjectChangeNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ObjectChangeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectChangeNotify::CopyFrom(const ObjectChangeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ObjectChangeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectChangeNotify::IsInitialized() const {
  return true;
}

void ObjectChangeNotify::InternalSwap(ObjectChangeNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  strvalue_.Swap(&other->strvalue_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectChangeNotify, changetype_)
      + sizeof(ObjectChangeNotify::changetype_)
      - PROTOBUF_FIELD_OFFSET(ObjectChangeNotify, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectChangeNotify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HitEffectItem::InitAsDefaultInstance() {
}
class HitEffectItem::_Internal {
 public:
};

HitEffectItem::HitEffectItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HitEffectItem)
}
HitEffectItem::HitEffectItem(const HitEffectItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&castguid_, &from.castguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&hitdistance_) -
    reinterpret_cast<char*>(&castguid_)) + sizeof(hitdistance_));
  // @@protoc_insertion_point(copy_constructor:HitEffectItem)
}

void HitEffectItem::SharedCtor() {
  ::memset(&castguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hitdistance_) -
      reinterpret_cast<char*>(&castguid_)) + sizeof(hitdistance_));
}

HitEffectItem::~HitEffectItem() {
  // @@protoc_insertion_point(destructor:HitEffectItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HitEffectItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HitEffectItem::ArenaDtor(void* object) {
  HitEffectItem* _this = reinterpret_cast< HitEffectItem* >(object);
  (void)_this;
}
void HitEffectItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HitEffectItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HitEffectItem& HitEffectItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HitEffectItem_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void HitEffectItem::Clear() {
// @@protoc_insertion_point(message_clear_start:HitEffectItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&castguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hitdistance_) -
      reinterpret_cast<char*>(&castguid_)) + sizeof(hitdistance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HitEffectItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 CastGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          castguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 TargetGuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          targetguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 HurtValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          hurtvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Crit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          crit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 HitActionID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          hitactionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 HitEffectID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          hiteffectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float HitDistance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          hitdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HitEffectItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HitEffectItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 CastGuid = 1;
  if (this->castguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_castguid(), target);
  }

  // uint64 TargetGuid = 2;
  if (this->targetguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_targetguid(), target);
  }

  // int32 HurtValue = 3;
  if (this->hurtvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_hurtvalue(), target);
  }

  // bool Crit = 4;
  if (this->crit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_crit(), target);
  }

  // uint32 HitActionID = 5;
  if (this->hitactionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hitactionid(), target);
  }

  // uint32 HitEffectID = 6;
  if (this->hiteffectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_hiteffectid(), target);
  }

  // float HitDistance = 7;
  if (!(this->hitdistance() <= 0 && this->hitdistance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_hitdistance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HitEffectItem)
  return target;
}

size_t HitEffectItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HitEffectItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 CastGuid = 1;
  if (this->castguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_castguid());
  }

  // uint64 TargetGuid = 2;
  if (this->targetguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_targetguid());
  }

  // int32 HurtValue = 3;
  if (this->hurtvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hurtvalue());
  }

  // bool Crit = 4;
  if (this->crit() != 0) {
    total_size += 1 + 1;
  }

  // uint32 HitActionID = 5;
  if (this->hitactionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hitactionid());
  }

  // uint32 HitEffectID = 6;
  if (this->hiteffectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hiteffectid());
  }

  // float HitDistance = 7;
  if (!(this->hitdistance() <= 0 && this->hitdistance() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HitEffectItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HitEffectItem)
  GOOGLE_DCHECK_NE(&from, this);
  const HitEffectItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HitEffectItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HitEffectItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HitEffectItem)
    MergeFrom(*source);
  }
}

void HitEffectItem::MergeFrom(const HitEffectItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HitEffectItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.castguid() != 0) {
    _internal_set_castguid(from._internal_castguid());
  }
  if (from.targetguid() != 0) {
    _internal_set_targetguid(from._internal_targetguid());
  }
  if (from.hurtvalue() != 0) {
    _internal_set_hurtvalue(from._internal_hurtvalue());
  }
  if (from.crit() != 0) {
    _internal_set_crit(from._internal_crit());
  }
  if (from.hitactionid() != 0) {
    _internal_set_hitactionid(from._internal_hitactionid());
  }
  if (from.hiteffectid() != 0) {
    _internal_set_hiteffectid(from._internal_hiteffectid());
  }
  if (!(from.hitdistance() <= 0 && from.hitdistance() >= 0)) {
    _internal_set_hitdistance(from._internal_hitdistance());
  }
}

void HitEffectItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HitEffectItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HitEffectItem::CopyFrom(const HitEffectItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HitEffectItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitEffectItem::IsInitialized() const {
  return true;
}

void HitEffectItem::InternalSwap(HitEffectItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HitEffectItem, hitdistance_)
      + sizeof(HitEffectItem::hitdistance_)
      - PROTOBUF_FIELD_OFFSET(HitEffectItem, castguid_)>(
          reinterpret_cast<char*>(&castguid_),
          reinterpret_cast<char*>(&other->castguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HitEffectItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HitEffectNtf::InitAsDefaultInstance() {
}
class HitEffectNtf::_Internal {
 public:
};

HitEffectNtf::HitEffectNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  itemlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HitEffectNtf)
}
HitEffectNtf::HitEffectNtf(const HitEffectNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      itemlist_(from.itemlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:HitEffectNtf)
}

void HitEffectNtf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HitEffectNtf_Msg_5fGame_2eproto.base);
}

HitEffectNtf::~HitEffectNtf() {
  // @@protoc_insertion_point(destructor:HitEffectNtf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HitEffectNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HitEffectNtf::ArenaDtor(void* object) {
  HitEffectNtf* _this = reinterpret_cast< HitEffectNtf* >(object);
  (void)_this;
}
void HitEffectNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HitEffectNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HitEffectNtf& HitEffectNtf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HitEffectNtf_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void HitEffectNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:HitEffectNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HitEffectNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .HitEffectItem ItemList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_itemlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HitEffectNtf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HitEffectNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .HitEffectItem ItemList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_itemlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_itemlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HitEffectNtf)
  return target;
}

size_t HitEffectNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HitEffectNtf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HitEffectItem ItemList = 1;
  total_size += 1UL * this->_internal_itemlist_size();
  for (const auto& msg : this->itemlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HitEffectNtf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HitEffectNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const HitEffectNtf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HitEffectNtf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HitEffectNtf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HitEffectNtf)
    MergeFrom(*source);
  }
}

void HitEffectNtf::MergeFrom(const HitEffectNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HitEffectNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  itemlist_.MergeFrom(from.itemlist_);
}

void HitEffectNtf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HitEffectNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HitEffectNtf::CopyFrom(const HitEffectNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HitEffectNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitEffectNtf::IsInitialized() const {
  return true;
}

void HitEffectNtf::InternalSwap(HitEffectNtf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  itemlist_.InternalSwap(&other->itemlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HitEffectNtf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UseItemReq::InitAsDefaultInstance() {
}
class UseItemReq::_Internal {
 public:
};

UseItemReq::UseItemReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UseItemReq)
}
UseItemReq::UseItemReq(const UseItemReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:UseItemReq)
}

void UseItemReq::SharedCtor() {
}

UseItemReq::~UseItemReq() {
  // @@protoc_insertion_point(destructor:UseItemReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UseItemReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UseItemReq::ArenaDtor(void* object) {
  UseItemReq* _this = reinterpret_cast< UseItemReq* >(object);
  (void)_this;
}
void UseItemReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UseItemReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseItemReq& UseItemReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseItemReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void UseItemReq::Clear() {
// @@protoc_insertion_point(message_clear_start:UseItemReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UseItemReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseItemReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UseItemReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UseItemReq)
  return target;
}

size_t UseItemReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UseItemReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseItemReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UseItemReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UseItemReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseItemReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UseItemReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UseItemReq)
    MergeFrom(*source);
  }
}

void UseItemReq::MergeFrom(const UseItemReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UseItemReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UseItemReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UseItemReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseItemReq::CopyFrom(const UseItemReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UseItemReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseItemReq::IsInitialized() const {
  return true;
}

void UseItemReq::InternalSwap(UseItemReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UseItemReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UseItemAck::InitAsDefaultInstance() {
}
class UseItemAck::_Internal {
 public:
};

UseItemAck::UseItemAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UseItemAck)
}
UseItemAck::UseItemAck(const UseItemAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:UseItemAck)
}

void UseItemAck::SharedCtor() {
}

UseItemAck::~UseItemAck() {
  // @@protoc_insertion_point(destructor:UseItemAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UseItemAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UseItemAck::ArenaDtor(void* object) {
  UseItemAck* _this = reinterpret_cast< UseItemAck* >(object);
  (void)_this;
}
void UseItemAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UseItemAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseItemAck& UseItemAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseItemAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void UseItemAck::Clear() {
// @@protoc_insertion_point(message_clear_start:UseItemAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UseItemAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseItemAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UseItemAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UseItemAck)
  return target;
}

size_t UseItemAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UseItemAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseItemAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UseItemAck)
  GOOGLE_DCHECK_NE(&from, this);
  const UseItemAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseItemAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UseItemAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UseItemAck)
    MergeFrom(*source);
  }
}

void UseItemAck::MergeFrom(const UseItemAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UseItemAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UseItemAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UseItemAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseItemAck::CopyFrom(const UseItemAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UseItemAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseItemAck::IsInitialized() const {
  return true;
}

void UseItemAck::InternalSwap(UseItemAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UseItemAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MsgGetRandomNameReq::InitAsDefaultInstance() {
}
class MsgGetRandomNameReq::_Internal {
 public:
};

MsgGetRandomNameReq::MsgGetRandomNameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgGetRandomNameReq)
}
MsgGetRandomNameReq::MsgGetRandomNameReq(const MsgGetRandomNameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sex_ = from.sex_;
  // @@protoc_insertion_point(copy_constructor:MsgGetRandomNameReq)
}

void MsgGetRandomNameReq::SharedCtor() {
  sex_ = 0;
}

MsgGetRandomNameReq::~MsgGetRandomNameReq() {
  // @@protoc_insertion_point(destructor:MsgGetRandomNameReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgGetRandomNameReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgGetRandomNameReq::ArenaDtor(void* object) {
  MsgGetRandomNameReq* _this = reinterpret_cast< MsgGetRandomNameReq* >(object);
  (void)_this;
}
void MsgGetRandomNameReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgGetRandomNameReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgGetRandomNameReq& MsgGetRandomNameReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgGetRandomNameReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void MsgGetRandomNameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgGetRandomNameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sex_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgGetRandomNameReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Sex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgGetRandomNameReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGetRandomNameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Sex = 1;
  if (this->sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGetRandomNameReq)
  return target;
}

size_t MsgGetRandomNameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgGetRandomNameReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Sex = 1;
  if (this->sex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgGetRandomNameReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgGetRandomNameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgGetRandomNameReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgGetRandomNameReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgGetRandomNameReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgGetRandomNameReq)
    MergeFrom(*source);
  }
}

void MsgGetRandomNameReq::MergeFrom(const MsgGetRandomNameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgGetRandomNameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sex() != 0) {
    _internal_set_sex(from._internal_sex());
  }
}

void MsgGetRandomNameReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgGetRandomNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetRandomNameReq::CopyFrom(const MsgGetRandomNameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgGetRandomNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetRandomNameReq::IsInitialized() const {
  return true;
}

void MsgGetRandomNameReq::InternalSwap(MsgGetRandomNameReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(sex_, other->sex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgGetRandomNameReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MsgGetRandomNameAck::InitAsDefaultInstance() {
}
class MsgGetRandomNameAck::_Internal {
 public:
};

MsgGetRandomNameAck::MsgGetRandomNameAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgGetRandomNameAck)
}
MsgGetRandomNameAck::MsgGetRandomNameAck(const MsgGetRandomNameAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:MsgGetRandomNameAck)
}

void MsgGetRandomNameAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgGetRandomNameAck_Msg_5fGame_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MsgGetRandomNameAck::~MsgGetRandomNameAck() {
  // @@protoc_insertion_point(destructor:MsgGetRandomNameAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgGetRandomNameAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgGetRandomNameAck::ArenaDtor(void* object) {
  MsgGetRandomNameAck* _this = reinterpret_cast< MsgGetRandomNameAck* >(object);
  (void)_this;
}
void MsgGetRandomNameAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgGetRandomNameAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgGetRandomNameAck& MsgGetRandomNameAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgGetRandomNameAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void MsgGetRandomNameAck::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgGetRandomNameAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgGetRandomNameAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgGetRandomNameAck.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgGetRandomNameAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGetRandomNameAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgGetRandomNameAck.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGetRandomNameAck)
  return target;
}

size_t MsgGetRandomNameAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgGetRandomNameAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgGetRandomNameAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgGetRandomNameAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgGetRandomNameAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgGetRandomNameAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgGetRandomNameAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgGetRandomNameAck)
    MergeFrom(*source);
  }
}

void MsgGetRandomNameAck::MergeFrom(const MsgGetRandomNameAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgGetRandomNameAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void MsgGetRandomNameAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgGetRandomNameAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGetRandomNameAck::CopyFrom(const MsgGetRandomNameAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgGetRandomNameAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetRandomNameAck::IsInitialized() const {
  return true;
}

void MsgGetRandomNameAck::InternalSwap(MsgGetRandomNameAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgGetRandomNameAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Msg_DbErrorCountNty::InitAsDefaultInstance() {
}
class Msg_DbErrorCountNty::_Internal {
 public:
};

Msg_DbErrorCountNty::Msg_DbErrorCountNty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Msg_DbErrorCountNty)
}
Msg_DbErrorCountNty::Msg_DbErrorCountNty(const Msg_DbErrorCountNty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errorcount_ = from.errorcount_;
  // @@protoc_insertion_point(copy_constructor:Msg_DbErrorCountNty)
}

void Msg_DbErrorCountNty::SharedCtor() {
  errorcount_ = 0u;
}

Msg_DbErrorCountNty::~Msg_DbErrorCountNty() {
  // @@protoc_insertion_point(destructor:Msg_DbErrorCountNty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Msg_DbErrorCountNty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Msg_DbErrorCountNty::ArenaDtor(void* object) {
  Msg_DbErrorCountNty* _this = reinterpret_cast< Msg_DbErrorCountNty* >(object);
  (void)_this;
}
void Msg_DbErrorCountNty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DbErrorCountNty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_DbErrorCountNty& Msg_DbErrorCountNty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_DbErrorCountNty_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void Msg_DbErrorCountNty::Clear() {
// @@protoc_insertion_point(message_clear_start:Msg_DbErrorCountNty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorcount_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DbErrorCountNty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ErrorCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          errorcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_DbErrorCountNty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Msg_DbErrorCountNty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ErrorCount = 1;
  if (this->errorcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Msg_DbErrorCountNty)
  return target;
}

size_t Msg_DbErrorCountNty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Msg_DbErrorCountNty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ErrorCount = 1;
  if (this->errorcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_DbErrorCountNty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Msg_DbErrorCountNty)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_DbErrorCountNty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_DbErrorCountNty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Msg_DbErrorCountNty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Msg_DbErrorCountNty)
    MergeFrom(*source);
  }
}

void Msg_DbErrorCountNty::MergeFrom(const Msg_DbErrorCountNty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Msg_DbErrorCountNty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errorcount() != 0) {
    _internal_set_errorcount(from._internal_errorcount());
  }
}

void Msg_DbErrorCountNty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Msg_DbErrorCountNty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_DbErrorCountNty::CopyFrom(const Msg_DbErrorCountNty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Msg_DbErrorCountNty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DbErrorCountNty::IsInitialized() const {
  return true;
}

void Msg_DbErrorCountNty::InternalSwap(Msg_DbErrorCountNty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(errorcount_, other->errorcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DbErrorCountNty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Msg_GameParamReq::InitAsDefaultInstance() {
}
class Msg_GameParamReq::_Internal {
 public:
};

Msg_GameParamReq::Msg_GameParamReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Msg_GameParamReq)
}
Msg_GameParamReq::Msg_GameParamReq(const Msg_GameParamReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clientver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientver().empty()) {
    clientver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clientver(),
      GetArena());
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:Msg_GameParamReq)
}

void Msg_GameParamReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Msg_GameParamReq_Msg_5fGame_2eproto.base);
  clientver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_ = 0;
}

Msg_GameParamReq::~Msg_GameParamReq() {
  // @@protoc_insertion_point(destructor:Msg_GameParamReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Msg_GameParamReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clientver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_GameParamReq::ArenaDtor(void* object) {
  Msg_GameParamReq* _this = reinterpret_cast< Msg_GameParamReq* >(object);
  (void)_this;
}
void Msg_GameParamReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_GameParamReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_GameParamReq& Msg_GameParamReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_GameParamReq_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void Msg_GameParamReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Msg_GameParamReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_GameParamReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ClientVer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clientver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Msg_GameParamReq.ClientVer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_GameParamReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Msg_GameParamReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Channel = 1;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel(), target);
  }

  // string ClientVer = 2;
  if (this->clientver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientver().data(), static_cast<int>(this->_internal_clientver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Msg_GameParamReq.ClientVer");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Msg_GameParamReq)
  return target;
}

size_t Msg_GameParamReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Msg_GameParamReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ClientVer = 2;
  if (this->clientver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientver());
  }

  // int32 Channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_GameParamReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Msg_GameParamReq)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_GameParamReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_GameParamReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Msg_GameParamReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Msg_GameParamReq)
    MergeFrom(*source);
  }
}

void Msg_GameParamReq::MergeFrom(const Msg_GameParamReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Msg_GameParamReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientver().size() > 0) {
    _internal_set_clientver(from._internal_clientver());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
}

void Msg_GameParamReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Msg_GameParamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_GameParamReq::CopyFrom(const Msg_GameParamReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Msg_GameParamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GameParamReq::IsInitialized() const {
  return true;
}

void Msg_GameParamReq::InternalSwap(Msg_GameParamReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  clientver_.Swap(&other->clientver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_GameParamReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Msg_GameParamAck::InitAsDefaultInstance() {
}
class Msg_GameParamAck::_Internal {
 public:
};

Msg_GameParamAck::Msg_GameParamAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  paramkey_(arena),
  paramvalue_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Msg_GameParamAck)
}
Msg_GameParamAck::Msg_GameParamAck(const Msg_GameParamAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      paramkey_(from.paramkey_),
      paramvalue_(from.paramvalue_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Msg_GameParamAck)
}

void Msg_GameParamAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Msg_GameParamAck_Msg_5fGame_2eproto.base);
}

Msg_GameParamAck::~Msg_GameParamAck() {
  // @@protoc_insertion_point(destructor:Msg_GameParamAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Msg_GameParamAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Msg_GameParamAck::ArenaDtor(void* object) {
  Msg_GameParamAck* _this = reinterpret_cast< Msg_GameParamAck* >(object);
  (void)_this;
}
void Msg_GameParamAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_GameParamAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_GameParamAck& Msg_GameParamAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_GameParamAck_Msg_5fGame_2eproto.base);
  return *internal_default_instance();
}


void Msg_GameParamAck::Clear() {
// @@protoc_insertion_point(message_clear_start:Msg_GameParamAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paramkey_.Clear();
  paramvalue_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_GameParamAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ParamKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_paramkey();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Msg_GameParamAck.ParamKey"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string ParamValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_paramvalue();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Msg_GameParamAck.ParamValue"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_GameParamAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Msg_GameParamAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ParamKey = 1;
  for (int i = 0, n = this->_internal_paramkey_size(); i < n; i++) {
    const auto& s = this->_internal_paramkey(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Msg_GameParamAck.ParamKey");
    target = stream->WriteString(1, s, target);
  }

  // repeated string ParamValue = 2;
  for (int i = 0, n = this->_internal_paramvalue_size(); i < n; i++) {
    const auto& s = this->_internal_paramvalue(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Msg_GameParamAck.ParamValue");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Msg_GameParamAck)
  return target;
}

size_t Msg_GameParamAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Msg_GameParamAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ParamKey = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(paramkey_.size());
  for (int i = 0, n = paramkey_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      paramkey_.Get(i));
  }

  // repeated string ParamValue = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(paramvalue_.size());
  for (int i = 0, n = paramvalue_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      paramvalue_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_GameParamAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Msg_GameParamAck)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_GameParamAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_GameParamAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Msg_GameParamAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Msg_GameParamAck)
    MergeFrom(*source);
  }
}

void Msg_GameParamAck::MergeFrom(const Msg_GameParamAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Msg_GameParamAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paramkey_.MergeFrom(from.paramkey_);
  paramvalue_.MergeFrom(from.paramvalue_);
}

void Msg_GameParamAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Msg_GameParamAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_GameParamAck::CopyFrom(const Msg_GameParamAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Msg_GameParamAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GameParamAck::IsInitialized() const {
  return true;
}

void Msg_GameParamAck::InternalSwap(Msg_GameParamAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  paramkey_.InternalSwap(&other->paramkey_);
  paramvalue_.InternalSwap(&other->paramvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_GameParamAck::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GmStopServerReq* Arena::CreateMaybeMessage< ::GmStopServerReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GmStopServerReq >(arena);
}
template<> PROTOBUF_NOINLINE ::GmStopServerAck* Arena::CreateMaybeMessage< ::GmStopServerAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GmStopServerAck >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrRegToSvrReq* Arena::CreateMaybeMessage< ::SvrRegToSvrReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SvrRegToSvrReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SvrRegToSvrAck* Arena::CreateMaybeMessage< ::SvrRegToSvrAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SvrRegToSvrAck >(arena);
}
template<> PROTOBUF_NOINLINE ::RoleDisconnectReq* Arena::CreateMaybeMessage< ::RoleDisconnectReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoleDisconnectReq >(arena);
}
template<> PROTOBUF_NOINLINE ::RoleDisconnectAck* Arena::CreateMaybeMessage< ::RoleDisconnectAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoleDisconnectAck >(arena);
}
template<> PROTOBUF_NOINLINE ::RoleReconnectReq* Arena::CreateMaybeMessage< ::RoleReconnectReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoleReconnectReq >(arena);
}
template<> PROTOBUF_NOINLINE ::RoleReconnectAck* Arena::CreateMaybeMessage< ::RoleReconnectAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoleReconnectAck >(arena);
}
template<> PROTOBUF_NOINLINE ::RemoveConnectNty* Arena::CreateMaybeMessage< ::RemoveConnectNty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemoveConnectNty >(arena);
}
template<> PROTOBUF_NOINLINE ::CreateNewSceneReq* Arena::CreateMaybeMessage< ::CreateNewSceneReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CreateNewSceneReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CreateNewSceneAck* Arena::CreateMaybeMessage< ::CreateNewSceneAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CreateNewSceneAck >(arena);
}
template<> PROTOBUF_NOINLINE ::EnterSceneReq* Arena::CreateMaybeMessage< ::EnterSceneReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EnterSceneReq >(arena);
}
template<> PROTOBUF_NOINLINE ::EnterSceneAck* Arena::CreateMaybeMessage< ::EnterSceneAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EnterSceneAck >(arena);
}
template<> PROTOBUF_NOINLINE ::BackToCityReq* Arena::CreateMaybeMessage< ::BackToCityReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BackToCityReq >(arena);
}
template<> PROTOBUF_NOINLINE ::BackToCityAck* Arena::CreateMaybeMessage< ::BackToCityAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BackToCityAck >(arena);
}
template<> PROTOBUF_NOINLINE ::LeaveSceneReq* Arena::CreateMaybeMessage< ::LeaveSceneReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LeaveSceneReq >(arena);
}
template<> PROTOBUF_NOINLINE ::LeaveSceneAck* Arena::CreateMaybeMessage< ::LeaveSceneAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LeaveSceneAck >(arena);
}
template<> PROTOBUF_NOINLINE ::AbortSceneReq* Arena::CreateMaybeMessage< ::AbortSceneReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AbortSceneReq >(arena);
}
template<> PROTOBUF_NOINLINE ::AbortSceneAck* Arena::CreateMaybeMessage< ::AbortSceneAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AbortSceneAck >(arena);
}
template<> PROTOBUF_NOINLINE ::AbortSceneNty* Arena::CreateMaybeMessage< ::AbortSceneNty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AbortSceneNty >(arena);
}
template<> PROTOBUF_NOINLINE ::TransRoleData* Arena::CreateMaybeMessage< ::TransRoleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransRoleData >(arena);
}
template<> PROTOBUF_NOINLINE ::TransPetData* Arena::CreateMaybeMessage< ::TransPetData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransPetData >(arena);
}
template<> PROTOBUF_NOINLINE ::TransPartnerData* Arena::CreateMaybeMessage< ::TransPartnerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransPartnerData >(arena);
}
template<> PROTOBUF_NOINLINE ::TransferDataItem* Arena::CreateMaybeMessage< ::TransferDataItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransferDataItem >(arena);
}
template<> PROTOBUF_NOINLINE ::TransferDataReq* Arena::CreateMaybeMessage< ::TransferDataReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransferDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::TransferDataAck* Arena::CreateMaybeMessage< ::TransferDataAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransferDataAck >(arena);
}
template<> PROTOBUF_NOINLINE ::NotifyIntoScene* Arena::CreateMaybeMessage< ::NotifyIntoScene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NotifyIntoScene >(arena);
}
template<> PROTOBUF_NOINLINE ::NearByRoleItem* Arena::CreateMaybeMessage< ::NearByRoleItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NearByRoleItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CopyInsItem* Arena::CreateMaybeMessage< ::CopyInsItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CopyInsItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CopyReportReq* Arena::CreateMaybeMessage< ::CopyReportReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CopyReportReq >(arena);
}
template<> PROTOBUF_NOINLINE ::UseHpBottleReq* Arena::CreateMaybeMessage< ::UseHpBottleReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UseHpBottleReq >(arena);
}
template<> PROTOBUF_NOINLINE ::UseHpBottleAck* Arena::CreateMaybeMessage< ::UseHpBottleAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UseHpBottleAck >(arena);
}
template<> PROTOBUF_NOINLINE ::UseMpBottleReq* Arena::CreateMaybeMessage< ::UseMpBottleReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UseMpBottleReq >(arena);
}
template<> PROTOBUF_NOINLINE ::UseMpBottleAck* Arena::CreateMaybeMessage< ::UseMpBottleAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UseMpBottleAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageReq* Arena::CreateMaybeMessage< ::ChatMessageReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageReq >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageAck* Arena::CreateMaybeMessage< ::ChatMessageAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageNty* Arena::CreateMaybeMessage< ::ChatMessageNty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageNty >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonReq* Arena::CreateMaybeMessage< ::CommonReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CommonAck* Arena::CreateMaybeMessage< ::CommonAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CommonAck >(arena);
}
template<> PROTOBUF_NOINLINE ::BroadMessageNotify* Arena::CreateMaybeMessage< ::BroadMessageNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BroadMessageNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicRegToLoginReq* Arena::CreateMaybeMessage< ::LogicRegToLoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicRegToLoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicRegToLoginAck* Arena::CreateMaybeMessage< ::LogicRegToLoginAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicRegToLoginAck >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicRegToDbSvrReq* Arena::CreateMaybeMessage< ::LogicRegToDbSvrReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicRegToDbSvrReq >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicRegToDbSvrAck* Arena::CreateMaybeMessage< ::LogicRegToDbSvrAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicRegToDbSvrAck >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicUpdateInfoReq* Arena::CreateMaybeMessage< ::LogicUpdateInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicUpdateInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicUpdateInfoAck* Arena::CreateMaybeMessage< ::LogicUpdateInfoAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicUpdateInfoAck >(arena);
}
template<> PROTOBUF_NOINLINE ::SetupEquipReq* Arena::CreateMaybeMessage< ::SetupEquipReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetupEquipReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SetupEquipAck* Arena::CreateMaybeMessage< ::SetupEquipAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetupEquipAck >(arena);
}
template<> PROTOBUF_NOINLINE ::Msg_GiftCodeReq* Arena::CreateMaybeMessage< ::Msg_GiftCodeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Msg_GiftCodeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Msg_GiftCodeAck* Arena::CreateMaybeMessage< ::Msg_GiftCodeAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Msg_GiftCodeAck >(arena);
}
template<> PROTOBUF_NOINLINE ::UnsetEquipReq* Arena::CreateMaybeMessage< ::UnsetEquipReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UnsetEquipReq >(arena);
}
template<> PROTOBUF_NOINLINE ::UnsetEquipAck* Arena::CreateMaybeMessage< ::UnsetEquipAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UnsetEquipAck >(arena);
}
template<> PROTOBUF_NOINLINE ::SetupGemReq* Arena::CreateMaybeMessage< ::SetupGemReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetupGemReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SetupGemAck* Arena::CreateMaybeMessage< ::SetupGemAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetupGemAck >(arena);
}
template<> PROTOBUF_NOINLINE ::UnsetGemReq* Arena::CreateMaybeMessage< ::UnsetGemReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UnsetGemReq >(arena);
}
template<> PROTOBUF_NOINLINE ::UnsetGemAck* Arena::CreateMaybeMessage< ::UnsetGemAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UnsetGemAck >(arena);
}
template<> PROTOBUF_NOINLINE ::SetupPartnerReq* Arena::CreateMaybeMessage< ::SetupPartnerReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetupPartnerReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SetupPartnerAck* Arena::CreateMaybeMessage< ::SetupPartnerAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetupPartnerAck >(arena);
}
template<> PROTOBUF_NOINLINE ::UnsetPartnerReq* Arena::CreateMaybeMessage< ::UnsetPartnerReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UnsetPartnerReq >(arena);
}
template<> PROTOBUF_NOINLINE ::UnsetPartnerAck* Arena::CreateMaybeMessage< ::UnsetPartnerAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UnsetPartnerAck >(arena);
}
template<> PROTOBUF_NOINLINE ::SetupMountReq* Arena::CreateMaybeMessage< ::SetupMountReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetupMountReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SetupMountAck* Arena::CreateMaybeMessage< ::SetupMountAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetupMountAck >(arena);
}
template<> PROTOBUF_NOINLINE ::UnsetMountReq* Arena::CreateMaybeMessage< ::UnsetMountReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UnsetMountReq >(arena);
}
template<> PROTOBUF_NOINLINE ::UnsetMountAck* Arena::CreateMaybeMessage< ::UnsetMountAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UnsetMountAck >(arena);
}
template<> PROTOBUF_NOINLINE ::SetupPetReq* Arena::CreateMaybeMessage< ::SetupPetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetupPetReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SetupPetAck* Arena::CreateMaybeMessage< ::SetupPetAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetupPetAck >(arena);
}
template<> PROTOBUF_NOINLINE ::UnsetPetReq* Arena::CreateMaybeMessage< ::UnsetPetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UnsetPetReq >(arena);
}
template<> PROTOBUF_NOINLINE ::UnsetPetAck* Arena::CreateMaybeMessage< ::UnsetPetAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UnsetPetAck >(arena);
}
template<> PROTOBUF_NOINLINE ::StoreBuyReq* Arena::CreateMaybeMessage< ::StoreBuyReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StoreBuyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::StoreBuyAck* Arena::CreateMaybeMessage< ::StoreBuyAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StoreBuyAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ObjectChangeNotify* Arena::CreateMaybeMessage< ::ObjectChangeNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ObjectChangeNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::HitEffectItem* Arena::CreateMaybeMessage< ::HitEffectItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HitEffectItem >(arena);
}
template<> PROTOBUF_NOINLINE ::HitEffectNtf* Arena::CreateMaybeMessage< ::HitEffectNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HitEffectNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::UseItemReq* Arena::CreateMaybeMessage< ::UseItemReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UseItemReq >(arena);
}
template<> PROTOBUF_NOINLINE ::UseItemAck* Arena::CreateMaybeMessage< ::UseItemAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UseItemAck >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgGetRandomNameReq* Arena::CreateMaybeMessage< ::MsgGetRandomNameReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgGetRandomNameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgGetRandomNameAck* Arena::CreateMaybeMessage< ::MsgGetRandomNameAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgGetRandomNameAck >(arena);
}
template<> PROTOBUF_NOINLINE ::Msg_DbErrorCountNty* Arena::CreateMaybeMessage< ::Msg_DbErrorCountNty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Msg_DbErrorCountNty >(arena);
}
template<> PROTOBUF_NOINLINE ::Msg_GameParamReq* Arena::CreateMaybeMessage< ::Msg_GameParamReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Msg_GameParamReq >(arena);
}
template<> PROTOBUF_NOINLINE ::Msg_GameParamAck* Arena::CreateMaybeMessage< ::Msg_GameParamAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Msg_GameParamAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

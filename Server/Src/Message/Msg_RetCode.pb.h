// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg_RetCode.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Msg_5fRetCode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Msg_5fRetCode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Msg_5fRetCode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Msg_5fRetCode_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Msg_5fRetCode_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

enum MessageRetCode : int {
  MRC_SUCCESSED = 0,
  MRC_UNKNOW_ERROR = 1,
  MRC_DISCONNECT = 2,
  MRC_INVALID_ACCNAME = 100,
  MRC_INVALID_ACCID = 101,
  MRC_INVALID_PASSWORD = 102,
  MRC_INVALID_NAME = 103,
  MRC_INVALID_ROLEID = 104,
  MRC_INVALID_ITEMID = 105,
  MRC_INVALID_COPYID = 106,
  MRC_INVALID_PETID = 107,
  MRC_INVALID_PARTNERID = 108,
  MRC_INVALID_EQUIP_ID = 109,
  MRC_INVALID_CARRERID = 110,
  MRC_INVALID_SKILL_ID = 111,
  MRC_INVALID_TARGET_ID = 112,
  MRC_INVALID_SERVER_ID = 113,
  MRC_INVALID_GIFT_CODE = 114,
  MRC_NOT_ENOUGH_ACTOIN = 200,
  MRC_NOT_ENOUGH_MONEY = 201,
  MRC_NOT_ENOUGH_ITEM = 202,
  MRC_NOT_ENOUGH_TIMES = 203,
  MRC_NOT_ENOUGH_LEVEL = 204,
  MRC_NOT_ENOUGH_VIPLV = 205,
  MRC_ERROR_SEAL_ROLE = 206,
  MRC_NAME_ERROR_FMT = 207,
  MRC_REPEAT_LOGIN = 208,
  MRC_ACCOUNT_NAME_EXIST = 300,
  MRC_ACCOUNT_NAME_NOT_EXIST = 301,
  MRC_ACCOUNT_NAME_ERR_FMT = 302,
  MRC_ROLE_NAME_EXIST = 303,
  MRC_ACCOUNT_SEALED = 304,
  MRC_ACCOUNT_WRONG_VERSION = 305,
  MRC_ACCOUNT_WRONG_PASSWORD = 306,
  MRC_ROLE_NAME_MUST_UTF8 = 308,
  MRC_ROLE_SEALED = 309,
  MRC_ROLE_DELETED = 310,
  MRC_ILLEGAL_LOGIN_REQ = 311,
  MRC_KICKOUT_BY_OTHER = 312,
  MRC_SERVER_NOT_OPENTIME = 313,
  MRC_SERVER_NOT_AVAILABLE = 314,
  MRC_SERVER_MAINTAIN = 315,
  MRC_SERVER_NO_NEW_ROLE = 316,
  MRC_CANNOT_RECONNECT = 317,
  MRC_SKILL_CD_ERROR = 401,
  MRC_SKILL_DEAD_OBJ = 402,
  MRC_DUPLICATED_ORDER_ID = 403,
  MRC_GIFTCODE_AREADY_USED = 500,
  MRC_GIFTCODE_INVALIDE_CODE = 501,
  MRC_GIFTCODE_UNASSIGNED = 502,
  MRC_GIFTCODE_WRONG_CHANNEL = 503,
  MRC_GIFTCODE_WRONG_AREA = 504,
  MRC_GIFTCODE_NO_MORE = 505,
  MessageRetCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageRetCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageRetCode_IsValid(int value);
constexpr MessageRetCode MessageRetCode_MIN = MRC_SUCCESSED;
constexpr MessageRetCode MessageRetCode_MAX = MRC_GIFTCODE_NO_MORE;
constexpr int MessageRetCode_ARRAYSIZE = MessageRetCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageRetCode_descriptor();
template<typename T>
inline const std::string& MessageRetCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageRetCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageRetCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageRetCode_descriptor(), enum_t_value);
}
inline bool MessageRetCode_Parse(
    const std::string& name, MessageRetCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageRetCode>(
    MessageRetCode_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MessageRetCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageRetCode>() {
  return ::MessageRetCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Msg_5fRetCode_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg_LoginDBData.proto

#include "Msg_LoginDBData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBActivityData_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBActivityItem_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBBagData_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBBagItem_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBChapterItem_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DBCopyData_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBCopyItem_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBCounterData_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBCounterItem_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBEquipData_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBEquipItem_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBFriendData_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBFriendItem_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBGemData_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBGemItem_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBMailData_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBMailItem_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBMountData_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBMountItem_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBPartnerData_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBPartnerItem_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBPetData_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBPetItem_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBRoleData_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBSkillData_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBSkillItem_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBTaskData_Msg_5fLoginDBData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fLoginDBData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBTaskItem_Msg_5fLoginDBData_2eproto;
class DBRoleDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBRoleData> _instance;
} _DBRoleData_default_instance_;
class DBBagItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBBagItem> _instance;
} _DBBagItem_default_instance_;
class DBBagDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBBagData> _instance;
} _DBBagData_default_instance_;
class DBCopyItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBCopyItem> _instance;
} _DBCopyItem_default_instance_;
class DBChapterItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBChapterItem> _instance;
} _DBChapterItem_default_instance_;
class DBCopyDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBCopyData> _instance;
} _DBCopyData_default_instance_;
class DBEquipItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBEquipItem> _instance;
} _DBEquipItem_default_instance_;
class DBEquipDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBEquipData> _instance;
} _DBEquipData_default_instance_;
class DBGemItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBGemItem> _instance;
} _DBGemItem_default_instance_;
class DBGemDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBGemData> _instance;
} _DBGemData_default_instance_;
class DBSkillItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBSkillItem> _instance;
} _DBSkillItem_default_instance_;
class DBSkillDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBSkillData> _instance;
} _DBSkillData_default_instance_;
class DBPetItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBPetItem> _instance;
} _DBPetItem_default_instance_;
class DBPetDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBPetData> _instance;
} _DBPetData_default_instance_;
class DBMountItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBMountItem> _instance;
} _DBMountItem_default_instance_;
class DBMountDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBMountData> _instance;
} _DBMountData_default_instance_;
class DBPartnerItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBPartnerItem> _instance;
} _DBPartnerItem_default_instance_;
class DBPartnerDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBPartnerData> _instance;
} _DBPartnerData_default_instance_;
class DBTaskItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBTaskItem> _instance;
} _DBTaskItem_default_instance_;
class DBTaskDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBTaskData> _instance;
} _DBTaskData_default_instance_;
class DBMailItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBMailItem> _instance;
} _DBMailItem_default_instance_;
class DBMailDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBMailData> _instance;
} _DBMailData_default_instance_;
class DBActivityItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBActivityItem> _instance;
} _DBActivityItem_default_instance_;
class DBActivityDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBActivityData> _instance;
} _DBActivityData_default_instance_;
class DBCounterItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBCounterItem> _instance;
} _DBCounterItem_default_instance_;
class DBCounterDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBCounterData> _instance;
} _DBCounterData_default_instance_;
class DBFriendItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBFriendItem> _instance;
} _DBFriendItem_default_instance_;
class DBFriendDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBFriendData> _instance;
} _DBFriendData_default_instance_;
class DBRoleLoginAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBRoleLoginAck> _instance;
} _DBRoleLoginAck_default_instance_;
static void InitDefaultsscc_info_DBActivityData_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBActivityData_default_instance_;
    new (ptr) ::DBActivityData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBActivityData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBActivityData_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DBActivityData_Msg_5fLoginDBData_2eproto}, {
      &scc_info_DBActivityItem_Msg_5fLoginDBData_2eproto.base,}};

static void InitDefaultsscc_info_DBActivityItem_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBActivityItem_default_instance_;
    new (ptr) ::DBActivityItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBActivityItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBActivityItem_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DBActivityItem_Msg_5fLoginDBData_2eproto}, {}};

static void InitDefaultsscc_info_DBBagData_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBBagData_default_instance_;
    new (ptr) ::DBBagData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBBagData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBBagData_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DBBagData_Msg_5fLoginDBData_2eproto}, {
      &scc_info_DBBagItem_Msg_5fLoginDBData_2eproto.base,}};

static void InitDefaultsscc_info_DBBagItem_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBBagItem_default_instance_;
    new (ptr) ::DBBagItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBBagItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBBagItem_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DBBagItem_Msg_5fLoginDBData_2eproto}, {}};

static void InitDefaultsscc_info_DBChapterItem_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBChapterItem_default_instance_;
    new (ptr) ::DBChapterItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBChapterItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBChapterItem_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DBChapterItem_Msg_5fLoginDBData_2eproto}, {}};

static void InitDefaultsscc_info_DBCopyData_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBCopyData_default_instance_;
    new (ptr) ::DBCopyData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBCopyData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DBCopyData_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DBCopyData_Msg_5fLoginDBData_2eproto}, {
      &scc_info_DBCopyItem_Msg_5fLoginDBData_2eproto.base,
      &scc_info_DBChapterItem_Msg_5fLoginDBData_2eproto.base,}};

static void InitDefaultsscc_info_DBCopyItem_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBCopyItem_default_instance_;
    new (ptr) ::DBCopyItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBCopyItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBCopyItem_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DBCopyItem_Msg_5fLoginDBData_2eproto}, {}};

static void InitDefaultsscc_info_DBCounterData_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBCounterData_default_instance_;
    new (ptr) ::DBCounterData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBCounterData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBCounterData_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DBCounterData_Msg_5fLoginDBData_2eproto}, {
      &scc_info_DBCounterItem_Msg_5fLoginDBData_2eproto.base,}};

static void InitDefaultsscc_info_DBCounterItem_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBCounterItem_default_instance_;
    new (ptr) ::DBCounterItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBCounterItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBCounterItem_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DBCounterItem_Msg_5fLoginDBData_2eproto}, {}};

static void InitDefaultsscc_info_DBEquipData_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBEquipData_default_instance_;
    new (ptr) ::DBEquipData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBEquipData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBEquipData_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DBEquipData_Msg_5fLoginDBData_2eproto}, {
      &scc_info_DBEquipItem_Msg_5fLoginDBData_2eproto.base,}};

static void InitDefaultsscc_info_DBEquipItem_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBEquipItem_default_instance_;
    new (ptr) ::DBEquipItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBEquipItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBEquipItem_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DBEquipItem_Msg_5fLoginDBData_2eproto}, {}};

static void InitDefaultsscc_info_DBFriendData_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBFriendData_default_instance_;
    new (ptr) ::DBFriendData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBFriendData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBFriendData_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DBFriendData_Msg_5fLoginDBData_2eproto}, {
      &scc_info_DBFriendItem_Msg_5fLoginDBData_2eproto.base,}};

static void InitDefaultsscc_info_DBFriendItem_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBFriendItem_default_instance_;
    new (ptr) ::DBFriendItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBFriendItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBFriendItem_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DBFriendItem_Msg_5fLoginDBData_2eproto}, {}};

static void InitDefaultsscc_info_DBGemData_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBGemData_default_instance_;
    new (ptr) ::DBGemData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBGemData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBGemData_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DBGemData_Msg_5fLoginDBData_2eproto}, {
      &scc_info_DBGemItem_Msg_5fLoginDBData_2eproto.base,}};

static void InitDefaultsscc_info_DBGemItem_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBGemItem_default_instance_;
    new (ptr) ::DBGemItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBGemItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBGemItem_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DBGemItem_Msg_5fLoginDBData_2eproto}, {}};

static void InitDefaultsscc_info_DBMailData_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBMailData_default_instance_;
    new (ptr) ::DBMailData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBMailData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBMailData_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DBMailData_Msg_5fLoginDBData_2eproto}, {
      &scc_info_DBMailItem_Msg_5fLoginDBData_2eproto.base,}};

static void InitDefaultsscc_info_DBMailItem_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBMailItem_default_instance_;
    new (ptr) ::DBMailItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBMailItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBMailItem_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DBMailItem_Msg_5fLoginDBData_2eproto}, {}};

static void InitDefaultsscc_info_DBMountData_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBMountData_default_instance_;
    new (ptr) ::DBMountData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBMountData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBMountData_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DBMountData_Msg_5fLoginDBData_2eproto}, {
      &scc_info_DBMountItem_Msg_5fLoginDBData_2eproto.base,}};

static void InitDefaultsscc_info_DBMountItem_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBMountItem_default_instance_;
    new (ptr) ::DBMountItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBMountItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBMountItem_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DBMountItem_Msg_5fLoginDBData_2eproto}, {}};

static void InitDefaultsscc_info_DBPartnerData_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBPartnerData_default_instance_;
    new (ptr) ::DBPartnerData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBPartnerData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBPartnerData_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DBPartnerData_Msg_5fLoginDBData_2eproto}, {
      &scc_info_DBPartnerItem_Msg_5fLoginDBData_2eproto.base,}};

static void InitDefaultsscc_info_DBPartnerItem_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBPartnerItem_default_instance_;
    new (ptr) ::DBPartnerItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBPartnerItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBPartnerItem_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DBPartnerItem_Msg_5fLoginDBData_2eproto}, {}};

static void InitDefaultsscc_info_DBPetData_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBPetData_default_instance_;
    new (ptr) ::DBPetData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBPetData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBPetData_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DBPetData_Msg_5fLoginDBData_2eproto}, {
      &scc_info_DBPetItem_Msg_5fLoginDBData_2eproto.base,}};

static void InitDefaultsscc_info_DBPetItem_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBPetItem_default_instance_;
    new (ptr) ::DBPetItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBPetItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBPetItem_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DBPetItem_Msg_5fLoginDBData_2eproto}, {}};

static void InitDefaultsscc_info_DBRoleData_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBRoleData_default_instance_;
    new (ptr) ::DBRoleData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBRoleData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBRoleData_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DBRoleData_Msg_5fLoginDBData_2eproto}, {}};

static void InitDefaultsscc_info_DBRoleLoginAck_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBRoleLoginAck_default_instance_;
    new (ptr) ::DBRoleLoginAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBRoleLoginAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_DBRoleLoginAck_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 14, 0, InitDefaultsscc_info_DBRoleLoginAck_Msg_5fLoginDBData_2eproto}, {
      &scc_info_DBRoleData_Msg_5fLoginDBData_2eproto.base,
      &scc_info_DBBagData_Msg_5fLoginDBData_2eproto.base,
      &scc_info_DBCopyData_Msg_5fLoginDBData_2eproto.base,
      &scc_info_DBEquipData_Msg_5fLoginDBData_2eproto.base,
      &scc_info_DBGemData_Msg_5fLoginDBData_2eproto.base,
      &scc_info_DBPetData_Msg_5fLoginDBData_2eproto.base,
      &scc_info_DBPartnerData_Msg_5fLoginDBData_2eproto.base,
      &scc_info_DBTaskData_Msg_5fLoginDBData_2eproto.base,
      &scc_info_DBMailData_Msg_5fLoginDBData_2eproto.base,
      &scc_info_DBMountData_Msg_5fLoginDBData_2eproto.base,
      &scc_info_DBActivityData_Msg_5fLoginDBData_2eproto.base,
      &scc_info_DBCounterData_Msg_5fLoginDBData_2eproto.base,
      &scc_info_DBFriendData_Msg_5fLoginDBData_2eproto.base,
      &scc_info_DBSkillData_Msg_5fLoginDBData_2eproto.base,}};

static void InitDefaultsscc_info_DBSkillData_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBSkillData_default_instance_;
    new (ptr) ::DBSkillData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBSkillData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBSkillData_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DBSkillData_Msg_5fLoginDBData_2eproto}, {
      &scc_info_DBSkillItem_Msg_5fLoginDBData_2eproto.base,}};

static void InitDefaultsscc_info_DBSkillItem_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBSkillItem_default_instance_;
    new (ptr) ::DBSkillItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBSkillItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBSkillItem_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DBSkillItem_Msg_5fLoginDBData_2eproto}, {}};

static void InitDefaultsscc_info_DBTaskData_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBTaskData_default_instance_;
    new (ptr) ::DBTaskData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBTaskData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBTaskData_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DBTaskData_Msg_5fLoginDBData_2eproto}, {
      &scc_info_DBTaskItem_Msg_5fLoginDBData_2eproto.base,}};

static void InitDefaultsscc_info_DBTaskItem_Msg_5fLoginDBData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DBTaskItem_default_instance_;
    new (ptr) ::DBTaskItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DBTaskItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBTaskItem_Msg_5fLoginDBData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DBTaskItem_Msg_5fLoginDBData_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Msg_5fLoginDBData_2eproto[29];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Msg_5fLoginDBData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Msg_5fLoginDBData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Msg_5fLoginDBData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBRoleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBRoleData, accountid_),
  PROTOBUF_FIELD_OFFSET(::DBRoleData, roleid_),
  PROTOBUF_FIELD_OFFSET(::DBRoleData, carrerid_),
  PROTOBUF_FIELD_OFFSET(::DBRoleData, level_),
  PROTOBUF_FIELD_OFFSET(::DBRoleData, exp_),
  PROTOBUF_FIELD_OFFSET(::DBRoleData, name_),
  PROTOBUF_FIELD_OFFSET(::DBRoleData, langid_),
  PROTOBUF_FIELD_OFFSET(::DBRoleData, viplvl_),
  PROTOBUF_FIELD_OFFSET(::DBRoleData, vipexp_),
  PROTOBUF_FIELD_OFFSET(::DBRoleData, fightvalue_),
  PROTOBUF_FIELD_OFFSET(::DBRoleData, citycopyid_),
  PROTOBUF_FIELD_OFFSET(::DBRoleData, action_),
  PROTOBUF_FIELD_OFFSET(::DBRoleData, actime_),
  PROTOBUF_FIELD_OFFSET(::DBRoleData, createtime_),
  PROTOBUF_FIELD_OFFSET(::DBRoleData, logontime_),
  PROTOBUF_FIELD_OFFSET(::DBRoleData, logofftime_),
  PROTOBUF_FIELD_OFFSET(::DBRoleData, guildid_),
  PROTOBUF_FIELD_OFFSET(::DBRoleData, channel_),
  PROTOBUF_FIELD_OFFSET(::DBRoleData, onlinetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBBagItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBBagItem, guid_),
  PROTOBUF_FIELD_OFFSET(::DBBagItem, roleid_),
  PROTOBUF_FIELD_OFFSET(::DBBagItem, itemguid_),
  PROTOBUF_FIELD_OFFSET(::DBBagItem, itemid_),
  PROTOBUF_FIELD_OFFSET(::DBBagItem, count_),
  PROTOBUF_FIELD_OFFSET(::DBBagItem, bind_),
  PROTOBUF_FIELD_OFFSET(::DBBagItem, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBBagData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBBagData, itemlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBCopyItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBCopyItem, roleid_),
  PROTOBUF_FIELD_OFFSET(::DBCopyItem, copyid_),
  PROTOBUF_FIELD_OFFSET(::DBCopyItem, starnum_),
  PROTOBUF_FIELD_OFFSET(::DBCopyItem, battlecnt_),
  PROTOBUF_FIELD_OFFSET(::DBCopyItem, resetcnt_),
  PROTOBUF_FIELD_OFFSET(::DBCopyItem, battletime_),
  PROTOBUF_FIELD_OFFSET(::DBCopyItem, resettime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBChapterItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBChapterItem, roleid_),
  PROTOBUF_FIELD_OFFSET(::DBChapterItem, copytype_),
  PROTOBUF_FIELD_OFFSET(::DBChapterItem, chapterid_),
  PROTOBUF_FIELD_OFFSET(::DBChapterItem, staraward_),
  PROTOBUF_FIELD_OFFSET(::DBChapterItem, sceneaward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBCopyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBCopyData, copylist_),
  PROTOBUF_FIELD_OFFSET(::DBCopyData, chapterlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBEquipItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBEquipItem, roleid_),
  PROTOBUF_FIELD_OFFSET(::DBEquipItem, guid_),
  PROTOBUF_FIELD_OFFSET(::DBEquipItem, equipid_),
  PROTOBUF_FIELD_OFFSET(::DBEquipItem, strengthlvl_),
  PROTOBUF_FIELD_OFFSET(::DBEquipItem, refinelevel_),
  PROTOBUF_FIELD_OFFSET(::DBEquipItem, starlevel_),
  PROTOBUF_FIELD_OFFSET(::DBEquipItem, refineexp_),
  PROTOBUF_FIELD_OFFSET(::DBEquipItem, starexp_),
  PROTOBUF_FIELD_OFFSET(::DBEquipItem, isusing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBEquipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBEquipData, equiplist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBGemItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBGemItem, roleid_),
  PROTOBUF_FIELD_OFFSET(::DBGemItem, guid_),
  PROTOBUF_FIELD_OFFSET(::DBGemItem, gemid_),
  PROTOBUF_FIELD_OFFSET(::DBGemItem, strengthlvl_),
  PROTOBUF_FIELD_OFFSET(::DBGemItem, refinelevel_),
  PROTOBUF_FIELD_OFFSET(::DBGemItem, starlevel_),
  PROTOBUF_FIELD_OFFSET(::DBGemItem, refineexp_),
  PROTOBUF_FIELD_OFFSET(::DBGemItem, starexp_),
  PROTOBUF_FIELD_OFFSET(::DBGemItem, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBGemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBGemData, gemlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBSkillItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBSkillItem, roleid_),
  PROTOBUF_FIELD_OFFSET(::DBSkillItem, skillid_),
  PROTOBUF_FIELD_OFFSET(::DBSkillItem, level_),
  PROTOBUF_FIELD_OFFSET(::DBSkillItem, keypos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBSkillData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBSkillData, skilllist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBPetItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBPetItem, roleid_),
  PROTOBUF_FIELD_OFFSET(::DBPetItem, guid_),
  PROTOBUF_FIELD_OFFSET(::DBPetItem, petid_),
  PROTOBUF_FIELD_OFFSET(::DBPetItem, strengthlvl_),
  PROTOBUF_FIELD_OFFSET(::DBPetItem, refinelevel_),
  PROTOBUF_FIELD_OFFSET(::DBPetItem, starlevel_),
  PROTOBUF_FIELD_OFFSET(::DBPetItem, isusing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBPetData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBPetData, petlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBMountItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBMountItem, roleid_),
  PROTOBUF_FIELD_OFFSET(::DBMountItem, guid_),
  PROTOBUF_FIELD_OFFSET(::DBMountItem, mountid_),
  PROTOBUF_FIELD_OFFSET(::DBMountItem, strengthlvl_),
  PROTOBUF_FIELD_OFFSET(::DBMountItem, refinelevel_),
  PROTOBUF_FIELD_OFFSET(::DBMountItem, starlevel_),
  PROTOBUF_FIELD_OFFSET(::DBMountItem, isusing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBMountData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBMountData, mountlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBPartnerItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBPartnerItem, roleid_),
  PROTOBUF_FIELD_OFFSET(::DBPartnerItem, guid_),
  PROTOBUF_FIELD_OFFSET(::DBPartnerItem, partnerid_),
  PROTOBUF_FIELD_OFFSET(::DBPartnerItem, strengthlvl_),
  PROTOBUF_FIELD_OFFSET(::DBPartnerItem, refinelevel_),
  PROTOBUF_FIELD_OFFSET(::DBPartnerItem, starlevel_),
  PROTOBUF_FIELD_OFFSET(::DBPartnerItem, setpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBPartnerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBPartnerData, partnerlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBTaskItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBTaskItem, roleid_),
  PROTOBUF_FIELD_OFFSET(::DBTaskItem, taskid_),
  PROTOBUF_FIELD_OFFSET(::DBTaskItem, status_),
  PROTOBUF_FIELD_OFFSET(::DBTaskItem, progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBTaskData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBTaskData, tasklist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBMailItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBMailItem, roleid_),
  PROTOBUF_FIELD_OFFSET(::DBMailItem, guid_),
  PROTOBUF_FIELD_OFFSET(::DBMailItem, groupid_),
  PROTOBUF_FIELD_OFFSET(::DBMailItem, time_),
  PROTOBUF_FIELD_OFFSET(::DBMailItem, senderid_),
  PROTOBUF_FIELD_OFFSET(::DBMailItem, sender_),
  PROTOBUF_FIELD_OFFSET(::DBMailItem, mailtype_),
  PROTOBUF_FIELD_OFFSET(::DBMailItem, status_),
  PROTOBUF_FIELD_OFFSET(::DBMailItem, title_),
  PROTOBUF_FIELD_OFFSET(::DBMailItem, content_),
  PROTOBUF_FIELD_OFFSET(::DBMailItem, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBMailData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBMailData, maillist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBActivityItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBActivityItem, roleid_),
  PROTOBUF_FIELD_OFFSET(::DBActivityItem, activityid_),
  PROTOBUF_FIELD_OFFSET(::DBActivityItem, activitytype_),
  PROTOBUF_FIELD_OFFSET(::DBActivityItem, jointime_),
  PROTOBUF_FIELD_OFFSET(::DBActivityItem, datalen_),
  PROTOBUF_FIELD_OFFSET(::DBActivityItem, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBActivityData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBActivityData, activitylist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBCounterItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBCounterItem, roleid_),
  PROTOBUF_FIELD_OFFSET(::DBCounterItem, counterid_),
  PROTOBUF_FIELD_OFFSET(::DBCounterItem, index_),
  PROTOBUF_FIELD_OFFSET(::DBCounterItem, value_),
  PROTOBUF_FIELD_OFFSET(::DBCounterItem, time_),
  PROTOBUF_FIELD_OFFSET(::DBCounterItem, param1_),
  PROTOBUF_FIELD_OFFSET(::DBCounterItem, param2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBCounterData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBCounterData, counterlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBFriendItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBFriendItem, roleid_),
  PROTOBUF_FIELD_OFFSET(::DBFriendItem, friendid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBFriendData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBFriendData, friendlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBRoleLoginAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DBRoleLoginAck, retcode_),
  PROTOBUF_FIELD_OFFSET(::DBRoleLoginAck, roleid_),
  PROTOBUF_FIELD_OFFSET(::DBRoleLoginAck, roledata_),
  PROTOBUF_FIELD_OFFSET(::DBRoleLoginAck, bagdata_),
  PROTOBUF_FIELD_OFFSET(::DBRoleLoginAck, copydata_),
  PROTOBUF_FIELD_OFFSET(::DBRoleLoginAck, equipdata_),
  PROTOBUF_FIELD_OFFSET(::DBRoleLoginAck, gemdata_),
  PROTOBUF_FIELD_OFFSET(::DBRoleLoginAck, petdata_),
  PROTOBUF_FIELD_OFFSET(::DBRoleLoginAck, partnerdata_),
  PROTOBUF_FIELD_OFFSET(::DBRoleLoginAck, taskdata_),
  PROTOBUF_FIELD_OFFSET(::DBRoleLoginAck, maildata_),
  PROTOBUF_FIELD_OFFSET(::DBRoleLoginAck, mountdata_),
  PROTOBUF_FIELD_OFFSET(::DBRoleLoginAck, activitydata_),
  PROTOBUF_FIELD_OFFSET(::DBRoleLoginAck, counterdata_),
  PROTOBUF_FIELD_OFFSET(::DBRoleLoginAck, frienddata_),
  PROTOBUF_FIELD_OFFSET(::DBRoleLoginAck, skilldata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DBRoleData)},
  { 24, -1, sizeof(::DBBagItem)},
  { 36, -1, sizeof(::DBBagData)},
  { 42, -1, sizeof(::DBCopyItem)},
  { 54, -1, sizeof(::DBChapterItem)},
  { 64, -1, sizeof(::DBCopyData)},
  { 71, -1, sizeof(::DBEquipItem)},
  { 85, -1, sizeof(::DBEquipData)},
  { 91, -1, sizeof(::DBGemItem)},
  { 105, -1, sizeof(::DBGemData)},
  { 111, -1, sizeof(::DBSkillItem)},
  { 120, -1, sizeof(::DBSkillData)},
  { 126, -1, sizeof(::DBPetItem)},
  { 138, -1, sizeof(::DBPetData)},
  { 144, -1, sizeof(::DBMountItem)},
  { 156, -1, sizeof(::DBMountData)},
  { 162, -1, sizeof(::DBPartnerItem)},
  { 174, -1, sizeof(::DBPartnerData)},
  { 180, -1, sizeof(::DBTaskItem)},
  { 189, -1, sizeof(::DBTaskData)},
  { 195, -1, sizeof(::DBMailItem)},
  { 211, -1, sizeof(::DBMailData)},
  { 217, -1, sizeof(::DBActivityItem)},
  { 228, -1, sizeof(::DBActivityData)},
  { 234, -1, sizeof(::DBCounterItem)},
  { 246, -1, sizeof(::DBCounterData)},
  { 252, -1, sizeof(::DBFriendItem)},
  { 259, -1, sizeof(::DBFriendData)},
  { 265, -1, sizeof(::DBRoleLoginAck)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBRoleData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBBagItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBBagData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBCopyItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBChapterItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBCopyData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBEquipItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBEquipData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBGemItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBGemData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBSkillItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBSkillData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBPetItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBPetData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBMountItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBMountData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBPartnerItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBPartnerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBTaskItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBTaskData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBMailItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBMailData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBActivityItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBActivityData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBCounterItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBCounterData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBFriendItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBFriendData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DBRoleLoginAck_default_instance_),
};

const char descriptor_table_protodef_Msg_5fLoginDBData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025Msg_LoginDBData.proto\"\324\002\n\nDBRoleData\022\021"
  "\n\tAccountID\030\001 \001(\004\022\016\n\006RoleID\030\002 \001(\004\022\020\n\010Car"
  "rerID\030\003 \001(\005\022\r\n\005Level\030\004 \001(\005\022\013\n\003Exp\030\005 \001(\003\022"
  "\014\n\004Name\030\006 \001(\t\022\016\n\006LangID\030\007 \001(\005\022\016\n\006VipLvl\030"
  "\010 \001(\005\022\016\n\006VipExp\030\t \001(\005\022\022\n\nFightValue\030\n \001("
  "\003\022\022\n\nCityCopyID\030\013 \001(\005\022\016\n\006Action\030\014 \003(\003\022\016\n"
  "\006Actime\030\r \003(\003\022\022\n\nCreateTime\030\016 \001(\004\022\021\n\tLog"
  "onTime\030\017 \001(\004\022\022\n\nLogoffTime\030\020 \001(\004\022\017\n\007Guil"
  "dID\030\021 \001(\004\022\017\n\007Channel\030\022 \001(\005\022\022\n\nOnlineTime"
  "\030\023 \001(\r\"x\n\tDBBagItem\022\014\n\004Guid\030\001 \001(\004\022\016\n\006Rol"
  "eID\030\002 \001(\004\022\020\n\010ItemGuid\030\003 \001(\004\022\016\n\006ItemID\030\004 "
  "\001(\r\022\r\n\005Count\030\005 \001(\003\022\014\n\004Bind\030\006 \001(\005\022\016\n\006Stat"
  "us\030\007 \001(\005\")\n\tDBBagData\022\034\n\010ItemList\030\001 \003(\0132"
  "\n.DBBagItem\"\211\001\n\nDBCopyItem\022\016\n\006RoleID\030\001 \001"
  "(\004\022\016\n\006CopyID\030\002 \001(\r\022\017\n\007StarNum\030\003 \001(\005\022\021\n\tB"
  "attleCnt\030\004 \001(\005\022\020\n\010ResetCnt\030\005 \001(\005\022\022\n\nBatt"
  "leTime\030\006 \001(\004\022\021\n\tResetTime\030\007 \001(\004\"k\n\rDBCha"
  "pterItem\022\016\n\006RoleID\030\001 \001(\004\022\020\n\010CopyType\030\002 \001"
  "(\r\022\021\n\tChapterID\030\003 \001(\r\022\021\n\tStarAward\030\004 \001(\r"
  "\022\022\n\nSceneAward\030\005 \001(\r\"P\n\nDBCopyData\022\035\n\010Co"
  "pyList\030\001 \003(\0132\013.DBCopyItem\022#\n\013ChapterList"
  "\030\002 \003(\0132\016.DBChapterItem\"\256\001\n\013DBEquipItem\022\016"
  "\n\006RoleID\030\001 \001(\004\022\014\n\004Guid\030\002 \001(\004\022\017\n\007EquipID\030"
  "\003 \001(\005\022\023\n\013StrengthLvl\030\004 \001(\005\022\023\n\013RefineLeve"
  "l\030\005 \001(\005\022\021\n\tStarLevel\030\006 \001(\005\022\021\n\tRefineExp\030"
  "\007 \001(\005\022\017\n\007StarExp\030\010 \001(\005\022\017\n\007IsUsing\030\t \001(\010\""
  ".\n\013DBEquipData\022\037\n\tEquipList\030\001 \003(\0132\014.DBEq"
  "uipItem\"\246\001\n\tDBGemItem\022\016\n\006RoleID\030\001 \001(\004\022\014\n"
  "\004Guid\030\002 \001(\004\022\r\n\005GemID\030\003 \001(\005\022\023\n\013StrengthLv"
  "l\030\004 \001(\005\022\023\n\013RefineLevel\030\005 \001(\005\022\021\n\tStarLeve"
  "l\030\006 \001(\005\022\021\n\tRefineExp\030\007 \001(\005\022\017\n\007StarExp\030\010 "
  "\001(\005\022\013\n\003Pos\030\t \001(\005\"(\n\tDBGemData\022\033\n\007GemList"
  "\030\001 \003(\0132\n.DBGemItem\"M\n\013DBSkillItem\022\016\n\006Rol"
  "eID\030\001 \001(\004\022\017\n\007SkillID\030\002 \001(\r\022\r\n\005Level\030\003 \001("
  "\005\022\016\n\006KeyPos\030\004 \001(\005\".\n\013DBSkillData\022\037\n\tSkil"
  "lList\030\001 \003(\0132\014.DBSkillItem\"\206\001\n\tDBPetItem\022"
  "\016\n\006RoleID\030\001 \001(\004\022\014\n\004Guid\030\002 \001(\004\022\r\n\005PetID\030\003"
  " \001(\005\022\023\n\013StrengthLvl\030\004 \001(\005\022\023\n\013RefineLevel"
  "\030\005 \001(\005\022\021\n\tStarLevel\030\006 \001(\005\022\017\n\007IsUsing\030\007 \001"
  "(\010\"(\n\tDBPetData\022\033\n\007PetList\030\001 \003(\0132\n.DBPet"
  "Item\"\212\001\n\013DBMountItem\022\016\n\006RoleID\030\001 \001(\004\022\014\n\004"
  "Guid\030\002 \001(\004\022\017\n\007MountID\030\003 \001(\005\022\023\n\013StrengthL"
  "vl\030\004 \001(\005\022\023\n\013RefineLevel\030\005 \001(\005\022\021\n\tStarLev"
  "el\030\006 \001(\005\022\017\n\007IsUsing\030\007 \001(\010\".\n\013DBMountData"
  "\022\037\n\tMountList\030\001 \003(\0132\014.DBMountItem\"\215\001\n\rDB"
  "PartnerItem\022\016\n\006RoleID\030\001 \001(\004\022\014\n\004Guid\030\002 \001("
  "\004\022\021\n\tPartnerID\030\003 \001(\005\022\023\n\013StrengthLvl\030\004 \001("
  "\005\022\023\n\013RefineLevel\030\005 \001(\005\022\021\n\tStarLevel\030\006 \001("
  "\005\022\016\n\006SetPos\030\007 \001(\005\"4\n\rDBPartnerData\022#\n\013Pa"
  "rtnerList\030\001 \003(\0132\016.DBPartnerItem\"N\n\nDBTas"
  "kItem\022\016\n\006RoleID\030\001 \001(\004\022\016\n\006TaskID\030\002 \001(\r\022\016\n"
  "\006Status\030\003 \001(\005\022\020\n\010Progress\030\004 \001(\005\"+\n\nDBTas"
  "kData\022\035\n\010TaskList\030\001 \003(\0132\013.DBTaskItem\"\274\001\n"
  "\nDBMailItem\022\016\n\006RoleID\030\001 \001(\004\022\014\n\004Guid\030\002 \001("
  "\004\022\017\n\007GroupID\030\003 \001(\004\022\014\n\004Time\030\004 \001(\004\022\020\n\010Send"
  "erID\030\005 \001(\004\022\016\n\006Sender\030\006 \001(\t\022\020\n\010MailType\030\007"
  " \001(\r\022\016\n\006Status\030\010 \001(\r\022\r\n\005Title\030\t \001(\t\022\017\n\007C"
  "ontent\030\n \001(\t\022\r\n\005Items\030\013 \001(\014\"+\n\nDBMailDat"
  "a\022\035\n\010MailList\030\001 \003(\0132\013.DBMailItem\"{\n\016DBAc"
  "tivityItem\022\016\n\006RoleID\030\001 \001(\004\022\022\n\nActivityID"
  "\030\002 \001(\r\022\024\n\014ActivityType\030\003 \001(\r\022\020\n\010JoinTime"
  "\030\004 \001(\r\022\017\n\007DataLen\030\005 \001(\r\022\014\n\004Data\030\006 \001(\014\"7\n"
  "\016DBActivityData\022%\n\014ActivityList\030\001 \003(\0132\017."
  "DBActivityItem\"~\n\rDBCounterItem\022\016\n\006RoleI"
  "D\030\001 \001(\004\022\021\n\tCounterID\030\002 \001(\r\022\r\n\005Index\030\003 \001("
  "\r\022\r\n\005Value\030\004 \001(\003\022\014\n\004Time\030\005 \001(\004\022\016\n\006Param1"
  "\030\006 \001(\r\022\016\n\006Param2\030\007 \001(\r\"4\n\rDBCounterData\022"
  "#\n\013CounterList\030\001 \003(\0132\016.DBCounterItem\"0\n\014"
  "DBFriendItem\022\016\n\006RoleID\030\001 \001(\004\022\020\n\010FriendID"
  "\030\002 \001(\004\"1\n\014DBFriendData\022!\n\nFriendList\030\001 \003"
  "(\0132\r.DBFriendItem\"\373\003\n\016DBRoleLoginAck\022\017\n\007"
  "RetCode\030\001 \001(\r\022\016\n\006RoleID\030\002 \001(\004\022\035\n\010RoleDat"
  "a\030\003 \001(\0132\013.DBRoleData\022\033\n\007BagData\030\004 \001(\0132\n."
  "DBBagData\022\035\n\010CopyData\030\005 \001(\0132\013.DBCopyData"
  "\022\037\n\tEquipData\030\006 \001(\0132\014.DBEquipData\022\033\n\007Gem"
  "Data\030\007 \001(\0132\n.DBGemData\022\033\n\007PetData\030\010 \001(\0132"
  "\n.DBPetData\022#\n\013PartnerData\030\t \001(\0132\016.DBPar"
  "tnerData\022\035\n\010TaskData\030\n \001(\0132\013.DBTaskData\022"
  "\035\n\010MailData\030\013 \001(\0132\013.DBMailData\022\037\n\tMountD"
  "ata\030\014 \001(\0132\014.DBMountData\022%\n\014ActivityData\030"
  "\r \001(\0132\017.DBActivityData\022#\n\013CounterData\030\016 "
  "\001(\0132\016.DBCounterData\022!\n\nFriendData\030\017 \001(\0132"
  "\r.DBFriendData\022\037\n\tSkillData\030\020 \001(\0132\014.DBSk"
  "illDatab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Msg_5fLoginDBData_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Msg_5fLoginDBData_2eproto_sccs[29] = {
  &scc_info_DBActivityData_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBActivityItem_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBBagData_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBBagItem_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBChapterItem_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBCopyData_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBCopyItem_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBCounterData_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBCounterItem_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBEquipData_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBEquipItem_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBFriendData_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBFriendItem_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBGemData_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBGemItem_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBMailData_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBMailItem_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBMountData_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBMountItem_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBPartnerData_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBPartnerItem_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBPetData_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBPetItem_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBRoleData_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBRoleLoginAck_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBSkillData_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBSkillItem_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBTaskData_Msg_5fLoginDBData_2eproto.base,
  &scc_info_DBTaskItem_Msg_5fLoginDBData_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Msg_5fLoginDBData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Msg_5fLoginDBData_2eproto = {
  false, false, descriptor_table_protodef_Msg_5fLoginDBData_2eproto, "Msg_LoginDBData.proto", 3335,
  &descriptor_table_Msg_5fLoginDBData_2eproto_once, descriptor_table_Msg_5fLoginDBData_2eproto_sccs, descriptor_table_Msg_5fLoginDBData_2eproto_deps, 29, 0,
  schemas, file_default_instances, TableStruct_Msg_5fLoginDBData_2eproto::offsets,
  file_level_metadata_Msg_5fLoginDBData_2eproto, 29, file_level_enum_descriptors_Msg_5fLoginDBData_2eproto, file_level_service_descriptors_Msg_5fLoginDBData_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Msg_5fLoginDBData_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Msg_5fLoginDBData_2eproto)), true);

// ===================================================================

void DBRoleData::InitAsDefaultInstance() {
}
class DBRoleData::_Internal {
 public:
};

DBRoleData::DBRoleData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  action_(arena),
  actime_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBRoleData)
}
DBRoleData::DBRoleData(const DBRoleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      action_(from.action_),
      actime_(from.actime_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&onlinetime_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(onlinetime_));
  // @@protoc_insertion_point(copy_constructor:DBRoleData)
}

void DBRoleData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBRoleData_Msg_5fLoginDBData_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&onlinetime_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(onlinetime_));
}

DBRoleData::~DBRoleData() {
  // @@protoc_insertion_point(destructor:DBRoleData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBRoleData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DBRoleData::ArenaDtor(void* object) {
  DBRoleData* _this = reinterpret_cast< DBRoleData* >(object);
  (void)_this;
}
void DBRoleData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBRoleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBRoleData& DBRoleData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBRoleData_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBRoleData::Clear() {
// @@protoc_insertion_point(message_clear_start:DBRoleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.Clear();
  actime_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&onlinetime_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(onlinetime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBRoleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 AccountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 RoleID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CarrerID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          carrerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Exp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DBRoleData.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LangID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          langid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 VipLvl = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          viplvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 VipExp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          vipexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 FightValue = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          fightvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CityCopyID = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          citycopyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 Action = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_action(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_action(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 Actime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_actime(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          _internal_add_actime(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 CreateTime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 LogonTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          logontime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 LogoffTime = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          logofftime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 GuildID = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Channel = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 OnlineTime = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          onlinetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBRoleData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBRoleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 AccountID = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accountid(), target);
  }

  // uint64 RoleID = 2;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roleid(), target);
  }

  // int32 CarrerID = 3;
  if (this->carrerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_carrerid(), target);
  }

  // int32 Level = 4;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_level(), target);
  }

  // int64 Exp = 5;
  if (this->exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_exp(), target);
  }

  // string Name = 6;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DBRoleData.Name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  // int32 LangID = 7;
  if (this->langid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_langid(), target);
  }

  // int32 VipLvl = 8;
  if (this->viplvl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_viplvl(), target);
  }

  // int32 VipExp = 9;
  if (this->vipexp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_vipexp(), target);
  }

  // int64 FightValue = 10;
  if (this->fightvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_fightvalue(), target);
  }

  // int32 CityCopyID = 11;
  if (this->citycopyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_citycopyid(), target);
  }

  // repeated int64 Action = 12;
  {
    int byte_size = _action_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          12, _internal_action(), byte_size, target);
    }
  }

  // repeated int64 Actime = 13;
  {
    int byte_size = _actime_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          13, _internal_actime(), byte_size, target);
    }
  }

  // uint64 CreateTime = 14;
  if (this->createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_createtime(), target);
  }

  // uint64 LogonTime = 15;
  if (this->logontime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_logontime(), target);
  }

  // uint64 LogoffTime = 16;
  if (this->logofftime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_logofftime(), target);
  }

  // uint64 GuildID = 17;
  if (this->guildid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_guildid(), target);
  }

  // int32 Channel = 18;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_channel(), target);
  }

  // uint32 OnlineTime = 19;
  if (this->onlinetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_onlinetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBRoleData)
  return target;
}

size_t DBRoleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBRoleData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 Action = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->action_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _action_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 Actime = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->actime_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _actime_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string Name = 6;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 AccountID = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accountid());
  }

  // uint64 RoleID = 2;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // int32 CarrerID = 3;
  if (this->carrerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_carrerid());
  }

  // int32 Level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int64 Exp = 5;
  if (this->exp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_exp());
  }

  // int32 LangID = 7;
  if (this->langid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_langid());
  }

  // int32 VipLvl = 8;
  if (this->viplvl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_viplvl());
  }

  // int64 FightValue = 10;
  if (this->fightvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fightvalue());
  }

  // int32 VipExp = 9;
  if (this->vipexp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vipexp());
  }

  // int32 CityCopyID = 11;
  if (this->citycopyid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_citycopyid());
  }

  // uint64 CreateTime = 14;
  if (this->createtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_createtime());
  }

  // uint64 LogonTime = 15;
  if (this->logontime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_logontime());
  }

  // uint64 LogoffTime = 16;
  if (this->logofftime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_logofftime());
  }

  // uint64 GuildID = 17;
  if (this->guildid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guildid());
  }

  // int32 Channel = 18;
  if (this->channel() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel());
  }

  // uint32 OnlineTime = 19;
  if (this->onlinetime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_onlinetime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBRoleData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBRoleData)
  GOOGLE_DCHECK_NE(&from, this);
  const DBRoleData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBRoleData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBRoleData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBRoleData)
    MergeFrom(*source);
  }
}

void DBRoleData::MergeFrom(const DBRoleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBRoleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  action_.MergeFrom(from.action_);
  actime_.MergeFrom(from.actime_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.carrerid() != 0) {
    _internal_set_carrerid(from._internal_carrerid());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.exp() != 0) {
    _internal_set_exp(from._internal_exp());
  }
  if (from.langid() != 0) {
    _internal_set_langid(from._internal_langid());
  }
  if (from.viplvl() != 0) {
    _internal_set_viplvl(from._internal_viplvl());
  }
  if (from.fightvalue() != 0) {
    _internal_set_fightvalue(from._internal_fightvalue());
  }
  if (from.vipexp() != 0) {
    _internal_set_vipexp(from._internal_vipexp());
  }
  if (from.citycopyid() != 0) {
    _internal_set_citycopyid(from._internal_citycopyid());
  }
  if (from.createtime() != 0) {
    _internal_set_createtime(from._internal_createtime());
  }
  if (from.logontime() != 0) {
    _internal_set_logontime(from._internal_logontime());
  }
  if (from.logofftime() != 0) {
    _internal_set_logofftime(from._internal_logofftime());
  }
  if (from.guildid() != 0) {
    _internal_set_guildid(from._internal_guildid());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from.onlinetime() != 0) {
    _internal_set_onlinetime(from._internal_onlinetime());
  }
}

void DBRoleData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBRoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBRoleData::CopyFrom(const DBRoleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBRoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBRoleData::IsInitialized() const {
  return true;
}

void DBRoleData::InternalSwap(DBRoleData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  action_.InternalSwap(&other->action_);
  actime_.InternalSwap(&other->actime_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBRoleData, onlinetime_)
      + sizeof(DBRoleData::onlinetime_)
      - PROTOBUF_FIELD_OFFSET(DBRoleData, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBRoleData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBBagItem::InitAsDefaultInstance() {
}
class DBBagItem::_Internal {
 public:
};

DBBagItem::DBBagItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBBagItem)
}
DBBagItem::DBBagItem(const DBBagItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:DBBagItem)
}

void DBBagItem::SharedCtor() {
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(status_));
}

DBBagItem::~DBBagItem() {
  // @@protoc_insertion_point(destructor:DBBagItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBBagItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBBagItem::ArenaDtor(void* object) {
  DBBagItem* _this = reinterpret_cast< DBBagItem* >(object);
  (void)_this;
}
void DBBagItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBBagItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBBagItem& DBBagItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBBagItem_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBBagItem::Clear() {
// @@protoc_insertion_point(message_clear_start:DBBagItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBBagItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 Guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 RoleID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ItemGuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          itemguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ItemID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Bind = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBBagItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBBagItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Guid = 1;
  if (this->guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guid(), target);
  }

  // uint64 RoleID = 2;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roleid(), target);
  }

  // uint64 ItemGuid = 3;
  if (this->itemguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_itemguid(), target);
  }

  // uint32 ItemID = 4;
  if (this->itemid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_itemid(), target);
  }

  // int64 Count = 5;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_count(), target);
  }

  // int32 Bind = 6;
  if (this->bind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_bind(), target);
  }

  // int32 Status = 7;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBBagItem)
  return target;
}

size_t DBBagItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBBagItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 Guid = 1;
  if (this->guid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guid());
  }

  // uint64 RoleID = 2;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint64 ItemGuid = 3;
  if (this->itemguid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_itemguid());
  }

  // int64 Count = 5;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  // uint32 ItemID = 4;
  if (this->itemid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_itemid());
  }

  // int32 Bind = 6;
  if (this->bind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bind());
  }

  // int32 Status = 7;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBBagItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBBagItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DBBagItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBBagItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBBagItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBBagItem)
    MergeFrom(*source);
  }
}

void DBBagItem::MergeFrom(const DBBagItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBBagItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guid() != 0) {
    _internal_set_guid(from._internal_guid());
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.itemguid() != 0) {
    _internal_set_itemguid(from._internal_itemguid());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.itemid() != 0) {
    _internal_set_itemid(from._internal_itemid());
  }
  if (from.bind() != 0) {
    _internal_set_bind(from._internal_bind());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void DBBagItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBBagItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBBagItem::CopyFrom(const DBBagItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBBagItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBBagItem::IsInitialized() const {
  return true;
}

void DBBagItem::InternalSwap(DBBagItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBBagItem, status_)
      + sizeof(DBBagItem::status_)
      - PROTOBUF_FIELD_OFFSET(DBBagItem, guid_)>(
          reinterpret_cast<char*>(&guid_),
          reinterpret_cast<char*>(&other->guid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBBagItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBBagData::InitAsDefaultInstance() {
}
class DBBagData::_Internal {
 public:
};

DBBagData::DBBagData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  itemlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBBagData)
}
DBBagData::DBBagData(const DBBagData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      itemlist_(from.itemlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DBBagData)
}

void DBBagData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBBagData_Msg_5fLoginDBData_2eproto.base);
}

DBBagData::~DBBagData() {
  // @@protoc_insertion_point(destructor:DBBagData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBBagData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBBagData::ArenaDtor(void* object) {
  DBBagData* _this = reinterpret_cast< DBBagData* >(object);
  (void)_this;
}
void DBBagData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBBagData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBBagData& DBBagData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBBagData_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBBagData::Clear() {
// @@protoc_insertion_point(message_clear_start:DBBagData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBBagData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DBBagItem ItemList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_itemlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBBagData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBBagData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DBBagItem ItemList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_itemlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_itemlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBBagData)
  return target;
}

size_t DBBagData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBBagData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DBBagItem ItemList = 1;
  total_size += 1UL * this->_internal_itemlist_size();
  for (const auto& msg : this->itemlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBBagData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBBagData)
  GOOGLE_DCHECK_NE(&from, this);
  const DBBagData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBBagData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBBagData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBBagData)
    MergeFrom(*source);
  }
}

void DBBagData::MergeFrom(const DBBagData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBBagData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  itemlist_.MergeFrom(from.itemlist_);
}

void DBBagData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBBagData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBBagData::CopyFrom(const DBBagData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBBagData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBBagData::IsInitialized() const {
  return true;
}

void DBBagData::InternalSwap(DBBagData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  itemlist_.InternalSwap(&other->itemlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBBagData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBCopyItem::InitAsDefaultInstance() {
}
class DBCopyItem::_Internal {
 public:
};

DBCopyItem::DBCopyItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBCopyItem)
}
DBCopyItem::DBCopyItem(const DBCopyItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&resettime_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(resettime_));
  // @@protoc_insertion_point(copy_constructor:DBCopyItem)
}

void DBCopyItem::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resettime_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(resettime_));
}

DBCopyItem::~DBCopyItem() {
  // @@protoc_insertion_point(destructor:DBCopyItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBCopyItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBCopyItem::ArenaDtor(void* object) {
  DBCopyItem* _this = reinterpret_cast< DBCopyItem* >(object);
  (void)_this;
}
void DBCopyItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBCopyItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBCopyItem& DBCopyItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBCopyItem_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBCopyItem::Clear() {
// @@protoc_insertion_point(message_clear_start:DBCopyItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resettime_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(resettime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBCopyItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 CopyID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          copyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 StarNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          starnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BattleCnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          battlecnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ResetCnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          resetcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 BattleTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          battletime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ResetTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          resettime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBCopyItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBCopyItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // uint32 CopyID = 2;
  if (this->copyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_copyid(), target);
  }

  // int32 StarNum = 3;
  if (this->starnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_starnum(), target);
  }

  // int32 BattleCnt = 4;
  if (this->battlecnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_battlecnt(), target);
  }

  // int32 ResetCnt = 5;
  if (this->resetcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_resetcnt(), target);
  }

  // uint64 BattleTime = 6;
  if (this->battletime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_battletime(), target);
  }

  // uint64 ResetTime = 7;
  if (this->resettime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_resettime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBCopyItem)
  return target;
}

size_t DBCopyItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBCopyItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint32 CopyID = 2;
  if (this->copyid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_copyid());
  }

  // int32 StarNum = 3;
  if (this->starnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starnum());
  }

  // int32 BattleCnt = 4;
  if (this->battlecnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battlecnt());
  }

  // int32 ResetCnt = 5;
  if (this->resetcnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_resetcnt());
  }

  // uint64 BattleTime = 6;
  if (this->battletime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_battletime());
  }

  // uint64 ResetTime = 7;
  if (this->resettime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_resettime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBCopyItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBCopyItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DBCopyItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBCopyItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBCopyItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBCopyItem)
    MergeFrom(*source);
  }
}

void DBCopyItem::MergeFrom(const DBCopyItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBCopyItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.copyid() != 0) {
    _internal_set_copyid(from._internal_copyid());
  }
  if (from.starnum() != 0) {
    _internal_set_starnum(from._internal_starnum());
  }
  if (from.battlecnt() != 0) {
    _internal_set_battlecnt(from._internal_battlecnt());
  }
  if (from.resetcnt() != 0) {
    _internal_set_resetcnt(from._internal_resetcnt());
  }
  if (from.battletime() != 0) {
    _internal_set_battletime(from._internal_battletime());
  }
  if (from.resettime() != 0) {
    _internal_set_resettime(from._internal_resettime());
  }
}

void DBCopyItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBCopyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCopyItem::CopyFrom(const DBCopyItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBCopyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCopyItem::IsInitialized() const {
  return true;
}

void DBCopyItem::InternalSwap(DBCopyItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBCopyItem, resettime_)
      + sizeof(DBCopyItem::resettime_)
      - PROTOBUF_FIELD_OFFSET(DBCopyItem, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBCopyItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBChapterItem::InitAsDefaultInstance() {
}
class DBChapterItem::_Internal {
 public:
};

DBChapterItem::DBChapterItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBChapterItem)
}
DBChapterItem::DBChapterItem(const DBChapterItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sceneaward_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(sceneaward_));
  // @@protoc_insertion_point(copy_constructor:DBChapterItem)
}

void DBChapterItem::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sceneaward_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(sceneaward_));
}

DBChapterItem::~DBChapterItem() {
  // @@protoc_insertion_point(destructor:DBChapterItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBChapterItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBChapterItem::ArenaDtor(void* object) {
  DBChapterItem* _this = reinterpret_cast< DBChapterItem* >(object);
  (void)_this;
}
void DBChapterItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBChapterItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBChapterItem& DBChapterItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBChapterItem_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBChapterItem::Clear() {
// @@protoc_insertion_point(message_clear_start:DBChapterItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sceneaward_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(sceneaward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBChapterItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 CopyType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          copytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ChapterID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chapterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 StarAward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          staraward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SceneAward = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sceneaward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBChapterItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBChapterItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // uint32 CopyType = 2;
  if (this->copytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_copytype(), target);
  }

  // uint32 ChapterID = 3;
  if (this->chapterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chapterid(), target);
  }

  // uint32 StarAward = 4;
  if (this->staraward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_staraward(), target);
  }

  // uint32 SceneAward = 5;
  if (this->sceneaward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sceneaward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBChapterItem)
  return target;
}

size_t DBChapterItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBChapterItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint32 CopyType = 2;
  if (this->copytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_copytype());
  }

  // uint32 ChapterID = 3;
  if (this->chapterid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chapterid());
  }

  // uint32 StarAward = 4;
  if (this->staraward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_staraward());
  }

  // uint32 SceneAward = 5;
  if (this->sceneaward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sceneaward());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBChapterItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBChapterItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DBChapterItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBChapterItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBChapterItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBChapterItem)
    MergeFrom(*source);
  }
}

void DBChapterItem::MergeFrom(const DBChapterItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBChapterItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.copytype() != 0) {
    _internal_set_copytype(from._internal_copytype());
  }
  if (from.chapterid() != 0) {
    _internal_set_chapterid(from._internal_chapterid());
  }
  if (from.staraward() != 0) {
    _internal_set_staraward(from._internal_staraward());
  }
  if (from.sceneaward() != 0) {
    _internal_set_sceneaward(from._internal_sceneaward());
  }
}

void DBChapterItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBChapterItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBChapterItem::CopyFrom(const DBChapterItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBChapterItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBChapterItem::IsInitialized() const {
  return true;
}

void DBChapterItem::InternalSwap(DBChapterItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBChapterItem, sceneaward_)
      + sizeof(DBChapterItem::sceneaward_)
      - PROTOBUF_FIELD_OFFSET(DBChapterItem, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBChapterItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBCopyData::InitAsDefaultInstance() {
}
class DBCopyData::_Internal {
 public:
};

DBCopyData::DBCopyData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  copylist_(arena),
  chapterlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBCopyData)
}
DBCopyData::DBCopyData(const DBCopyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      copylist_(from.copylist_),
      chapterlist_(from.chapterlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DBCopyData)
}

void DBCopyData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBCopyData_Msg_5fLoginDBData_2eproto.base);
}

DBCopyData::~DBCopyData() {
  // @@protoc_insertion_point(destructor:DBCopyData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBCopyData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBCopyData::ArenaDtor(void* object) {
  DBCopyData* _this = reinterpret_cast< DBCopyData* >(object);
  (void)_this;
}
void DBCopyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBCopyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBCopyData& DBCopyData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBCopyData_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBCopyData::Clear() {
// @@protoc_insertion_point(message_clear_start:DBCopyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  copylist_.Clear();
  chapterlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBCopyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DBCopyItem CopyList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_copylist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .DBChapterItem ChapterList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chapterlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBCopyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBCopyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DBCopyItem CopyList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_copylist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_copylist(i), target, stream);
  }

  // repeated .DBChapterItem ChapterList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chapterlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_chapterlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBCopyData)
  return target;
}

size_t DBCopyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBCopyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DBCopyItem CopyList = 1;
  total_size += 1UL * this->_internal_copylist_size();
  for (const auto& msg : this->copylist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DBChapterItem ChapterList = 2;
  total_size += 1UL * this->_internal_chapterlist_size();
  for (const auto& msg : this->chapterlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBCopyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBCopyData)
  GOOGLE_DCHECK_NE(&from, this);
  const DBCopyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBCopyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBCopyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBCopyData)
    MergeFrom(*source);
  }
}

void DBCopyData::MergeFrom(const DBCopyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBCopyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  copylist_.MergeFrom(from.copylist_);
  chapterlist_.MergeFrom(from.chapterlist_);
}

void DBCopyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBCopyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCopyData::CopyFrom(const DBCopyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBCopyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCopyData::IsInitialized() const {
  return true;
}

void DBCopyData::InternalSwap(DBCopyData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  copylist_.InternalSwap(&other->copylist_);
  chapterlist_.InternalSwap(&other->chapterlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBCopyData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBEquipItem::InitAsDefaultInstance() {
}
class DBEquipItem::_Internal {
 public:
};

DBEquipItem::DBEquipItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBEquipItem)
}
DBEquipItem::DBEquipItem(const DBEquipItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isusing_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(isusing_));
  // @@protoc_insertion_point(copy_constructor:DBEquipItem)
}

void DBEquipItem::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isusing_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(isusing_));
}

DBEquipItem::~DBEquipItem() {
  // @@protoc_insertion_point(destructor:DBEquipItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBEquipItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBEquipItem::ArenaDtor(void* object) {
  DBEquipItem* _this = reinterpret_cast< DBEquipItem* >(object);
  (void)_this;
}
void DBEquipItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBEquipItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBEquipItem& DBEquipItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBEquipItem_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBEquipItem::Clear() {
// @@protoc_insertion_point(message_clear_start:DBEquipItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isusing_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(isusing_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBEquipItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 EquipID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          equipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 StrengthLvl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          strengthlvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 RefineLevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          refinelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 StarLevel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          starlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 RefineExp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          refineexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 StarExp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          starexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsUsing = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          isusing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBEquipItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBEquipItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // uint64 Guid = 2;
  if (this->guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_guid(), target);
  }

  // int32 EquipID = 3;
  if (this->equipid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_equipid(), target);
  }

  // int32 StrengthLvl = 4;
  if (this->strengthlvl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_strengthlvl(), target);
  }

  // int32 RefineLevel = 5;
  if (this->refinelevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_refinelevel(), target);
  }

  // int32 StarLevel = 6;
  if (this->starlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_starlevel(), target);
  }

  // int32 RefineExp = 7;
  if (this->refineexp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_refineexp(), target);
  }

  // int32 StarExp = 8;
  if (this->starexp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_starexp(), target);
  }

  // bool IsUsing = 9;
  if (this->isusing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_isusing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBEquipItem)
  return target;
}

size_t DBEquipItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBEquipItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint64 Guid = 2;
  if (this->guid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guid());
  }

  // int32 EquipID = 3;
  if (this->equipid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_equipid());
  }

  // int32 StrengthLvl = 4;
  if (this->strengthlvl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_strengthlvl());
  }

  // int32 RefineLevel = 5;
  if (this->refinelevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_refinelevel());
  }

  // int32 StarLevel = 6;
  if (this->starlevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starlevel());
  }

  // int32 RefineExp = 7;
  if (this->refineexp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_refineexp());
  }

  // int32 StarExp = 8;
  if (this->starexp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starexp());
  }

  // bool IsUsing = 9;
  if (this->isusing() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBEquipItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBEquipItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DBEquipItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBEquipItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBEquipItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBEquipItem)
    MergeFrom(*source);
  }
}

void DBEquipItem::MergeFrom(const DBEquipItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBEquipItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.guid() != 0) {
    _internal_set_guid(from._internal_guid());
  }
  if (from.equipid() != 0) {
    _internal_set_equipid(from._internal_equipid());
  }
  if (from.strengthlvl() != 0) {
    _internal_set_strengthlvl(from._internal_strengthlvl());
  }
  if (from.refinelevel() != 0) {
    _internal_set_refinelevel(from._internal_refinelevel());
  }
  if (from.starlevel() != 0) {
    _internal_set_starlevel(from._internal_starlevel());
  }
  if (from.refineexp() != 0) {
    _internal_set_refineexp(from._internal_refineexp());
  }
  if (from.starexp() != 0) {
    _internal_set_starexp(from._internal_starexp());
  }
  if (from.isusing() != 0) {
    _internal_set_isusing(from._internal_isusing());
  }
}

void DBEquipItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBEquipItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBEquipItem::CopyFrom(const DBEquipItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBEquipItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBEquipItem::IsInitialized() const {
  return true;
}

void DBEquipItem::InternalSwap(DBEquipItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBEquipItem, isusing_)
      + sizeof(DBEquipItem::isusing_)
      - PROTOBUF_FIELD_OFFSET(DBEquipItem, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBEquipItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBEquipData::InitAsDefaultInstance() {
}
class DBEquipData::_Internal {
 public:
};

DBEquipData::DBEquipData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  equiplist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBEquipData)
}
DBEquipData::DBEquipData(const DBEquipData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      equiplist_(from.equiplist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DBEquipData)
}

void DBEquipData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBEquipData_Msg_5fLoginDBData_2eproto.base);
}

DBEquipData::~DBEquipData() {
  // @@protoc_insertion_point(destructor:DBEquipData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBEquipData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBEquipData::ArenaDtor(void* object) {
  DBEquipData* _this = reinterpret_cast< DBEquipData* >(object);
  (void)_this;
}
void DBEquipData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBEquipData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBEquipData& DBEquipData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBEquipData_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBEquipData::Clear() {
// @@protoc_insertion_point(message_clear_start:DBEquipData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equiplist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBEquipData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DBEquipItem EquipList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equiplist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBEquipData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBEquipData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DBEquipItem EquipList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equiplist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_equiplist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBEquipData)
  return target;
}

size_t DBEquipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBEquipData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DBEquipItem EquipList = 1;
  total_size += 1UL * this->_internal_equiplist_size();
  for (const auto& msg : this->equiplist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBEquipData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBEquipData)
  GOOGLE_DCHECK_NE(&from, this);
  const DBEquipData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBEquipData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBEquipData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBEquipData)
    MergeFrom(*source);
  }
}

void DBEquipData::MergeFrom(const DBEquipData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBEquipData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equiplist_.MergeFrom(from.equiplist_);
}

void DBEquipData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBEquipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBEquipData::CopyFrom(const DBEquipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBEquipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBEquipData::IsInitialized() const {
  return true;
}

void DBEquipData::InternalSwap(DBEquipData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  equiplist_.InternalSwap(&other->equiplist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBEquipData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBGemItem::InitAsDefaultInstance() {
}
class DBGemItem::_Internal {
 public:
};

DBGemItem::DBGemItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBGemItem)
}
DBGemItem::DBGemItem(const DBGemItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(pos_));
  // @@protoc_insertion_point(copy_constructor:DBGemItem)
}

void DBGemItem::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(pos_));
}

DBGemItem::~DBGemItem() {
  // @@protoc_insertion_point(destructor:DBGemItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBGemItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBGemItem::ArenaDtor(void* object) {
  DBGemItem* _this = reinterpret_cast< DBGemItem* >(object);
  (void)_this;
}
void DBGemItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBGemItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBGemItem& DBGemItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBGemItem_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBGemItem::Clear() {
// @@protoc_insertion_point(message_clear_start:DBGemItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBGemItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 GemID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 StrengthLvl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          strengthlvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 RefineLevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          refinelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 StarLevel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          starlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 RefineExp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          refineexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 StarExp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          starexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Pos = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBGemItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBGemItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // uint64 Guid = 2;
  if (this->guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_guid(), target);
  }

  // int32 GemID = 3;
  if (this->gemid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gemid(), target);
  }

  // int32 StrengthLvl = 4;
  if (this->strengthlvl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_strengthlvl(), target);
  }

  // int32 RefineLevel = 5;
  if (this->refinelevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_refinelevel(), target);
  }

  // int32 StarLevel = 6;
  if (this->starlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_starlevel(), target);
  }

  // int32 RefineExp = 7;
  if (this->refineexp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_refineexp(), target);
  }

  // int32 StarExp = 8;
  if (this->starexp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_starexp(), target);
  }

  // int32 Pos = 9;
  if (this->pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBGemItem)
  return target;
}

size_t DBGemItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBGemItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint64 Guid = 2;
  if (this->guid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guid());
  }

  // int32 GemID = 3;
  if (this->gemid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gemid());
  }

  // int32 StrengthLvl = 4;
  if (this->strengthlvl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_strengthlvl());
  }

  // int32 RefineLevel = 5;
  if (this->refinelevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_refinelevel());
  }

  // int32 StarLevel = 6;
  if (this->starlevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starlevel());
  }

  // int32 RefineExp = 7;
  if (this->refineexp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_refineexp());
  }

  // int32 StarExp = 8;
  if (this->starexp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starexp());
  }

  // int32 Pos = 9;
  if (this->pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBGemItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBGemItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DBGemItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBGemItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBGemItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBGemItem)
    MergeFrom(*source);
  }
}

void DBGemItem::MergeFrom(const DBGemItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBGemItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.guid() != 0) {
    _internal_set_guid(from._internal_guid());
  }
  if (from.gemid() != 0) {
    _internal_set_gemid(from._internal_gemid());
  }
  if (from.strengthlvl() != 0) {
    _internal_set_strengthlvl(from._internal_strengthlvl());
  }
  if (from.refinelevel() != 0) {
    _internal_set_refinelevel(from._internal_refinelevel());
  }
  if (from.starlevel() != 0) {
    _internal_set_starlevel(from._internal_starlevel());
  }
  if (from.refineexp() != 0) {
    _internal_set_refineexp(from._internal_refineexp());
  }
  if (from.starexp() != 0) {
    _internal_set_starexp(from._internal_starexp());
  }
  if (from.pos() != 0) {
    _internal_set_pos(from._internal_pos());
  }
}

void DBGemItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBGemItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBGemItem::CopyFrom(const DBGemItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBGemItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBGemItem::IsInitialized() const {
  return true;
}

void DBGemItem::InternalSwap(DBGemItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBGemItem, pos_)
      + sizeof(DBGemItem::pos_)
      - PROTOBUF_FIELD_OFFSET(DBGemItem, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBGemItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBGemData::InitAsDefaultInstance() {
}
class DBGemData::_Internal {
 public:
};

DBGemData::DBGemData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gemlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBGemData)
}
DBGemData::DBGemData(const DBGemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gemlist_(from.gemlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DBGemData)
}

void DBGemData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBGemData_Msg_5fLoginDBData_2eproto.base);
}

DBGemData::~DBGemData() {
  // @@protoc_insertion_point(destructor:DBGemData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBGemData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBGemData::ArenaDtor(void* object) {
  DBGemData* _this = reinterpret_cast< DBGemData* >(object);
  (void)_this;
}
void DBGemData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBGemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBGemData& DBGemData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBGemData_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBGemData::Clear() {
// @@protoc_insertion_point(message_clear_start:DBGemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gemlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBGemData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DBGemItem GemList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gemlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBGemData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBGemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DBGemItem GemList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gemlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_gemlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBGemData)
  return target;
}

size_t DBGemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBGemData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DBGemItem GemList = 1;
  total_size += 1UL * this->_internal_gemlist_size();
  for (const auto& msg : this->gemlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBGemData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBGemData)
  GOOGLE_DCHECK_NE(&from, this);
  const DBGemData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBGemData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBGemData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBGemData)
    MergeFrom(*source);
  }
}

void DBGemData::MergeFrom(const DBGemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBGemData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gemlist_.MergeFrom(from.gemlist_);
}

void DBGemData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBGemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBGemData::CopyFrom(const DBGemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBGemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBGemData::IsInitialized() const {
  return true;
}

void DBGemData::InternalSwap(DBGemData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gemlist_.InternalSwap(&other->gemlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBGemData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBSkillItem::InitAsDefaultInstance() {
}
class DBSkillItem::_Internal {
 public:
};

DBSkillItem::DBSkillItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBSkillItem)
}
DBSkillItem::DBSkillItem(const DBSkillItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&keypos_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(keypos_));
  // @@protoc_insertion_point(copy_constructor:DBSkillItem)
}

void DBSkillItem::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keypos_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(keypos_));
}

DBSkillItem::~DBSkillItem() {
  // @@protoc_insertion_point(destructor:DBSkillItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBSkillItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBSkillItem::ArenaDtor(void* object) {
  DBSkillItem* _this = reinterpret_cast< DBSkillItem* >(object);
  (void)_this;
}
void DBSkillItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBSkillItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBSkillItem& DBSkillItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBSkillItem_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBSkillItem::Clear() {
// @@protoc_insertion_point(message_clear_start:DBSkillItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keypos_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(keypos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBSkillItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SkillID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 KeyPos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          keypos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBSkillItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBSkillItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // uint32 SkillID = 2;
  if (this->skillid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_skillid(), target);
  }

  // int32 Level = 3;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  // int32 KeyPos = 4;
  if (this->keypos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_keypos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBSkillItem)
  return target;
}

size_t DBSkillItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBSkillItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint32 SkillID = 2;
  if (this->skillid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_skillid());
  }

  // int32 Level = 3;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 KeyPos = 4;
  if (this->keypos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_keypos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBSkillItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBSkillItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DBSkillItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBSkillItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBSkillItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBSkillItem)
    MergeFrom(*source);
  }
}

void DBSkillItem::MergeFrom(const DBSkillItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBSkillItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.skillid() != 0) {
    _internal_set_skillid(from._internal_skillid());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.keypos() != 0) {
    _internal_set_keypos(from._internal_keypos());
  }
}

void DBSkillItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBSkillItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBSkillItem::CopyFrom(const DBSkillItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBSkillItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBSkillItem::IsInitialized() const {
  return true;
}

void DBSkillItem::InternalSwap(DBSkillItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBSkillItem, keypos_)
      + sizeof(DBSkillItem::keypos_)
      - PROTOBUF_FIELD_OFFSET(DBSkillItem, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBSkillItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBSkillData::InitAsDefaultInstance() {
}
class DBSkillData::_Internal {
 public:
};

DBSkillData::DBSkillData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  skilllist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBSkillData)
}
DBSkillData::DBSkillData(const DBSkillData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      skilllist_(from.skilllist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DBSkillData)
}

void DBSkillData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBSkillData_Msg_5fLoginDBData_2eproto.base);
}

DBSkillData::~DBSkillData() {
  // @@protoc_insertion_point(destructor:DBSkillData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBSkillData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBSkillData::ArenaDtor(void* object) {
  DBSkillData* _this = reinterpret_cast< DBSkillData* >(object);
  (void)_this;
}
void DBSkillData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBSkillData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBSkillData& DBSkillData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBSkillData_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBSkillData::Clear() {
// @@protoc_insertion_point(message_clear_start:DBSkillData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skilllist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBSkillData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DBSkillItem SkillList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skilllist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBSkillData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBSkillData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DBSkillItem SkillList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skilllist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_skilllist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBSkillData)
  return target;
}

size_t DBSkillData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBSkillData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DBSkillItem SkillList = 1;
  total_size += 1UL * this->_internal_skilllist_size();
  for (const auto& msg : this->skilllist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBSkillData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBSkillData)
  GOOGLE_DCHECK_NE(&from, this);
  const DBSkillData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBSkillData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBSkillData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBSkillData)
    MergeFrom(*source);
  }
}

void DBSkillData::MergeFrom(const DBSkillData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBSkillData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skilllist_.MergeFrom(from.skilllist_);
}

void DBSkillData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBSkillData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBSkillData::CopyFrom(const DBSkillData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBSkillData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBSkillData::IsInitialized() const {
  return true;
}

void DBSkillData::InternalSwap(DBSkillData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  skilllist_.InternalSwap(&other->skilllist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBSkillData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBPetItem::InitAsDefaultInstance() {
}
class DBPetItem::_Internal {
 public:
};

DBPetItem::DBPetItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBPetItem)
}
DBPetItem::DBPetItem(const DBPetItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isusing_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(isusing_));
  // @@protoc_insertion_point(copy_constructor:DBPetItem)
}

void DBPetItem::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isusing_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(isusing_));
}

DBPetItem::~DBPetItem() {
  // @@protoc_insertion_point(destructor:DBPetItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBPetItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBPetItem::ArenaDtor(void* object) {
  DBPetItem* _this = reinterpret_cast< DBPetItem* >(object);
  (void)_this;
}
void DBPetItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBPetItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBPetItem& DBPetItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBPetItem_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBPetItem::Clear() {
// @@protoc_insertion_point(message_clear_start:DBPetItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isusing_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(isusing_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBPetItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PetID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          petid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 StrengthLvl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          strengthlvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 RefineLevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          refinelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 StarLevel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          starlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsUsing = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          isusing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBPetItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBPetItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // uint64 Guid = 2;
  if (this->guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_guid(), target);
  }

  // int32 PetID = 3;
  if (this->petid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_petid(), target);
  }

  // int32 StrengthLvl = 4;
  if (this->strengthlvl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_strengthlvl(), target);
  }

  // int32 RefineLevel = 5;
  if (this->refinelevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_refinelevel(), target);
  }

  // int32 StarLevel = 6;
  if (this->starlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_starlevel(), target);
  }

  // bool IsUsing = 7;
  if (this->isusing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_isusing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBPetItem)
  return target;
}

size_t DBPetItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBPetItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint64 Guid = 2;
  if (this->guid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guid());
  }

  // int32 PetID = 3;
  if (this->petid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_petid());
  }

  // int32 StrengthLvl = 4;
  if (this->strengthlvl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_strengthlvl());
  }

  // int32 RefineLevel = 5;
  if (this->refinelevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_refinelevel());
  }

  // int32 StarLevel = 6;
  if (this->starlevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starlevel());
  }

  // bool IsUsing = 7;
  if (this->isusing() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBPetItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBPetItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DBPetItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBPetItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBPetItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBPetItem)
    MergeFrom(*source);
  }
}

void DBPetItem::MergeFrom(const DBPetItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBPetItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.guid() != 0) {
    _internal_set_guid(from._internal_guid());
  }
  if (from.petid() != 0) {
    _internal_set_petid(from._internal_petid());
  }
  if (from.strengthlvl() != 0) {
    _internal_set_strengthlvl(from._internal_strengthlvl());
  }
  if (from.refinelevel() != 0) {
    _internal_set_refinelevel(from._internal_refinelevel());
  }
  if (from.starlevel() != 0) {
    _internal_set_starlevel(from._internal_starlevel());
  }
  if (from.isusing() != 0) {
    _internal_set_isusing(from._internal_isusing());
  }
}

void DBPetItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBPetItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBPetItem::CopyFrom(const DBPetItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBPetItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBPetItem::IsInitialized() const {
  return true;
}

void DBPetItem::InternalSwap(DBPetItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBPetItem, isusing_)
      + sizeof(DBPetItem::isusing_)
      - PROTOBUF_FIELD_OFFSET(DBPetItem, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBPetItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBPetData::InitAsDefaultInstance() {
}
class DBPetData::_Internal {
 public:
};

DBPetData::DBPetData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  petlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBPetData)
}
DBPetData::DBPetData(const DBPetData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      petlist_(from.petlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DBPetData)
}

void DBPetData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBPetData_Msg_5fLoginDBData_2eproto.base);
}

DBPetData::~DBPetData() {
  // @@protoc_insertion_point(destructor:DBPetData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBPetData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBPetData::ArenaDtor(void* object) {
  DBPetData* _this = reinterpret_cast< DBPetData* >(object);
  (void)_this;
}
void DBPetData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBPetData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBPetData& DBPetData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBPetData_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBPetData::Clear() {
// @@protoc_insertion_point(message_clear_start:DBPetData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  petlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBPetData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DBPetItem PetList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_petlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBPetData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBPetData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DBPetItem PetList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_petlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_petlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBPetData)
  return target;
}

size_t DBPetData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBPetData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DBPetItem PetList = 1;
  total_size += 1UL * this->_internal_petlist_size();
  for (const auto& msg : this->petlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBPetData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBPetData)
  GOOGLE_DCHECK_NE(&from, this);
  const DBPetData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBPetData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBPetData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBPetData)
    MergeFrom(*source);
  }
}

void DBPetData::MergeFrom(const DBPetData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBPetData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  petlist_.MergeFrom(from.petlist_);
}

void DBPetData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBPetData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBPetData::CopyFrom(const DBPetData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBPetData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBPetData::IsInitialized() const {
  return true;
}

void DBPetData::InternalSwap(DBPetData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  petlist_.InternalSwap(&other->petlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBPetData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBMountItem::InitAsDefaultInstance() {
}
class DBMountItem::_Internal {
 public:
};

DBMountItem::DBMountItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBMountItem)
}
DBMountItem::DBMountItem(const DBMountItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isusing_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(isusing_));
  // @@protoc_insertion_point(copy_constructor:DBMountItem)
}

void DBMountItem::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isusing_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(isusing_));
}

DBMountItem::~DBMountItem() {
  // @@protoc_insertion_point(destructor:DBMountItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBMountItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBMountItem::ArenaDtor(void* object) {
  DBMountItem* _this = reinterpret_cast< DBMountItem* >(object);
  (void)_this;
}
void DBMountItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBMountItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBMountItem& DBMountItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBMountItem_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBMountItem::Clear() {
// @@protoc_insertion_point(message_clear_start:DBMountItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isusing_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(isusing_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBMountItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MountID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 StrengthLvl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          strengthlvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 RefineLevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          refinelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 StarLevel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          starlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsUsing = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          isusing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBMountItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBMountItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // uint64 Guid = 2;
  if (this->guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_guid(), target);
  }

  // int32 MountID = 3;
  if (this->mountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mountid(), target);
  }

  // int32 StrengthLvl = 4;
  if (this->strengthlvl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_strengthlvl(), target);
  }

  // int32 RefineLevel = 5;
  if (this->refinelevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_refinelevel(), target);
  }

  // int32 StarLevel = 6;
  if (this->starlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_starlevel(), target);
  }

  // bool IsUsing = 7;
  if (this->isusing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_isusing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBMountItem)
  return target;
}

size_t DBMountItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBMountItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint64 Guid = 2;
  if (this->guid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guid());
  }

  // int32 MountID = 3;
  if (this->mountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mountid());
  }

  // int32 StrengthLvl = 4;
  if (this->strengthlvl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_strengthlvl());
  }

  // int32 RefineLevel = 5;
  if (this->refinelevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_refinelevel());
  }

  // int32 StarLevel = 6;
  if (this->starlevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starlevel());
  }

  // bool IsUsing = 7;
  if (this->isusing() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBMountItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBMountItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DBMountItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBMountItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBMountItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBMountItem)
    MergeFrom(*source);
  }
}

void DBMountItem::MergeFrom(const DBMountItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBMountItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.guid() != 0) {
    _internal_set_guid(from._internal_guid());
  }
  if (from.mountid() != 0) {
    _internal_set_mountid(from._internal_mountid());
  }
  if (from.strengthlvl() != 0) {
    _internal_set_strengthlvl(from._internal_strengthlvl());
  }
  if (from.refinelevel() != 0) {
    _internal_set_refinelevel(from._internal_refinelevel());
  }
  if (from.starlevel() != 0) {
    _internal_set_starlevel(from._internal_starlevel());
  }
  if (from.isusing() != 0) {
    _internal_set_isusing(from._internal_isusing());
  }
}

void DBMountItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBMountItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBMountItem::CopyFrom(const DBMountItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBMountItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBMountItem::IsInitialized() const {
  return true;
}

void DBMountItem::InternalSwap(DBMountItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBMountItem, isusing_)
      + sizeof(DBMountItem::isusing_)
      - PROTOBUF_FIELD_OFFSET(DBMountItem, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBMountItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBMountData::InitAsDefaultInstance() {
}
class DBMountData::_Internal {
 public:
};

DBMountData::DBMountData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mountlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBMountData)
}
DBMountData::DBMountData(const DBMountData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mountlist_(from.mountlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DBMountData)
}

void DBMountData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBMountData_Msg_5fLoginDBData_2eproto.base);
}

DBMountData::~DBMountData() {
  // @@protoc_insertion_point(destructor:DBMountData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBMountData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBMountData::ArenaDtor(void* object) {
  DBMountData* _this = reinterpret_cast< DBMountData* >(object);
  (void)_this;
}
void DBMountData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBMountData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBMountData& DBMountData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBMountData_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBMountData::Clear() {
// @@protoc_insertion_point(message_clear_start:DBMountData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mountlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBMountData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DBMountItem MountList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mountlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBMountData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBMountData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DBMountItem MountList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mountlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mountlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBMountData)
  return target;
}

size_t DBMountData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBMountData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DBMountItem MountList = 1;
  total_size += 1UL * this->_internal_mountlist_size();
  for (const auto& msg : this->mountlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBMountData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBMountData)
  GOOGLE_DCHECK_NE(&from, this);
  const DBMountData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBMountData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBMountData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBMountData)
    MergeFrom(*source);
  }
}

void DBMountData::MergeFrom(const DBMountData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBMountData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mountlist_.MergeFrom(from.mountlist_);
}

void DBMountData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBMountData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBMountData::CopyFrom(const DBMountData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBMountData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBMountData::IsInitialized() const {
  return true;
}

void DBMountData::InternalSwap(DBMountData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mountlist_.InternalSwap(&other->mountlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBMountData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBPartnerItem::InitAsDefaultInstance() {
}
class DBPartnerItem::_Internal {
 public:
};

DBPartnerItem::DBPartnerItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBPartnerItem)
}
DBPartnerItem::DBPartnerItem(const DBPartnerItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&setpos_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(setpos_));
  // @@protoc_insertion_point(copy_constructor:DBPartnerItem)
}

void DBPartnerItem::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&setpos_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(setpos_));
}

DBPartnerItem::~DBPartnerItem() {
  // @@protoc_insertion_point(destructor:DBPartnerItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBPartnerItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBPartnerItem::ArenaDtor(void* object) {
  DBPartnerItem* _this = reinterpret_cast< DBPartnerItem* >(object);
  (void)_this;
}
void DBPartnerItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBPartnerItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBPartnerItem& DBPartnerItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBPartnerItem_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBPartnerItem::Clear() {
// @@protoc_insertion_point(message_clear_start:DBPartnerItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&setpos_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(setpos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBPartnerItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PartnerID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          partnerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 StrengthLvl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          strengthlvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 RefineLevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          refinelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 StarLevel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          starlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 SetPos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          setpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBPartnerItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBPartnerItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // uint64 Guid = 2;
  if (this->guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_guid(), target);
  }

  // int32 PartnerID = 3;
  if (this->partnerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_partnerid(), target);
  }

  // int32 StrengthLvl = 4;
  if (this->strengthlvl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_strengthlvl(), target);
  }

  // int32 RefineLevel = 5;
  if (this->refinelevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_refinelevel(), target);
  }

  // int32 StarLevel = 6;
  if (this->starlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_starlevel(), target);
  }

  // int32 SetPos = 7;
  if (this->setpos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_setpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBPartnerItem)
  return target;
}

size_t DBPartnerItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBPartnerItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint64 Guid = 2;
  if (this->guid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guid());
  }

  // int32 PartnerID = 3;
  if (this->partnerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_partnerid());
  }

  // int32 StrengthLvl = 4;
  if (this->strengthlvl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_strengthlvl());
  }

  // int32 RefineLevel = 5;
  if (this->refinelevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_refinelevel());
  }

  // int32 StarLevel = 6;
  if (this->starlevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starlevel());
  }

  // int32 SetPos = 7;
  if (this->setpos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_setpos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBPartnerItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBPartnerItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DBPartnerItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBPartnerItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBPartnerItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBPartnerItem)
    MergeFrom(*source);
  }
}

void DBPartnerItem::MergeFrom(const DBPartnerItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBPartnerItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.guid() != 0) {
    _internal_set_guid(from._internal_guid());
  }
  if (from.partnerid() != 0) {
    _internal_set_partnerid(from._internal_partnerid());
  }
  if (from.strengthlvl() != 0) {
    _internal_set_strengthlvl(from._internal_strengthlvl());
  }
  if (from.refinelevel() != 0) {
    _internal_set_refinelevel(from._internal_refinelevel());
  }
  if (from.starlevel() != 0) {
    _internal_set_starlevel(from._internal_starlevel());
  }
  if (from.setpos() != 0) {
    _internal_set_setpos(from._internal_setpos());
  }
}

void DBPartnerItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBPartnerItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBPartnerItem::CopyFrom(const DBPartnerItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBPartnerItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBPartnerItem::IsInitialized() const {
  return true;
}

void DBPartnerItem::InternalSwap(DBPartnerItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBPartnerItem, setpos_)
      + sizeof(DBPartnerItem::setpos_)
      - PROTOBUF_FIELD_OFFSET(DBPartnerItem, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBPartnerItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBPartnerData::InitAsDefaultInstance() {
}
class DBPartnerData::_Internal {
 public:
};

DBPartnerData::DBPartnerData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  partnerlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBPartnerData)
}
DBPartnerData::DBPartnerData(const DBPartnerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      partnerlist_(from.partnerlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DBPartnerData)
}

void DBPartnerData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBPartnerData_Msg_5fLoginDBData_2eproto.base);
}

DBPartnerData::~DBPartnerData() {
  // @@protoc_insertion_point(destructor:DBPartnerData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBPartnerData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBPartnerData::ArenaDtor(void* object) {
  DBPartnerData* _this = reinterpret_cast< DBPartnerData* >(object);
  (void)_this;
}
void DBPartnerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBPartnerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBPartnerData& DBPartnerData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBPartnerData_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBPartnerData::Clear() {
// @@protoc_insertion_point(message_clear_start:DBPartnerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partnerlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBPartnerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DBPartnerItem PartnerList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partnerlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBPartnerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBPartnerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DBPartnerItem PartnerList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_partnerlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_partnerlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBPartnerData)
  return target;
}

size_t DBPartnerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBPartnerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DBPartnerItem PartnerList = 1;
  total_size += 1UL * this->_internal_partnerlist_size();
  for (const auto& msg : this->partnerlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBPartnerData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBPartnerData)
  GOOGLE_DCHECK_NE(&from, this);
  const DBPartnerData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBPartnerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBPartnerData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBPartnerData)
    MergeFrom(*source);
  }
}

void DBPartnerData::MergeFrom(const DBPartnerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBPartnerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partnerlist_.MergeFrom(from.partnerlist_);
}

void DBPartnerData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBPartnerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBPartnerData::CopyFrom(const DBPartnerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBPartnerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBPartnerData::IsInitialized() const {
  return true;
}

void DBPartnerData::InternalSwap(DBPartnerData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partnerlist_.InternalSwap(&other->partnerlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBPartnerData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBTaskItem::InitAsDefaultInstance() {
}
class DBTaskItem::_Internal {
 public:
};

DBTaskItem::DBTaskItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBTaskItem)
}
DBTaskItem::DBTaskItem(const DBTaskItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&progress_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(progress_));
  // @@protoc_insertion_point(copy_constructor:DBTaskItem)
}

void DBTaskItem::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(progress_));
}

DBTaskItem::~DBTaskItem() {
  // @@protoc_insertion_point(destructor:DBTaskItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBTaskItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBTaskItem::ArenaDtor(void* object) {
  DBTaskItem* _this = reinterpret_cast< DBTaskItem* >(object);
  (void)_this;
}
void DBTaskItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBTaskItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBTaskItem& DBTaskItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBTaskItem_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBTaskItem::Clear() {
// @@protoc_insertion_point(message_clear_start:DBTaskItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(progress_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBTaskItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 TaskID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Progress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBTaskItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBTaskItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // uint32 TaskID = 2;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_taskid(), target);
  }

  // int32 Status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_status(), target);
  }

  // int32 Progress = 4;
  if (this->progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBTaskItem)
  return target;
}

size_t DBTaskItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBTaskItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint32 TaskID = 2;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_taskid());
  }

  // int32 Status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 Progress = 4;
  if (this->progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_progress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBTaskItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBTaskItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DBTaskItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBTaskItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBTaskItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBTaskItem)
    MergeFrom(*source);
  }
}

void DBTaskItem::MergeFrom(const DBTaskItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBTaskItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.progress() != 0) {
    _internal_set_progress(from._internal_progress());
  }
}

void DBTaskItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBTaskItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBTaskItem::CopyFrom(const DBTaskItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBTaskItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBTaskItem::IsInitialized() const {
  return true;
}

void DBTaskItem::InternalSwap(DBTaskItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBTaskItem, progress_)
      + sizeof(DBTaskItem::progress_)
      - PROTOBUF_FIELD_OFFSET(DBTaskItem, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBTaskItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBTaskData::InitAsDefaultInstance() {
}
class DBTaskData::_Internal {
 public:
};

DBTaskData::DBTaskData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tasklist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBTaskData)
}
DBTaskData::DBTaskData(const DBTaskData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasklist_(from.tasklist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DBTaskData)
}

void DBTaskData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBTaskData_Msg_5fLoginDBData_2eproto.base);
}

DBTaskData::~DBTaskData() {
  // @@protoc_insertion_point(destructor:DBTaskData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBTaskData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBTaskData::ArenaDtor(void* object) {
  DBTaskData* _this = reinterpret_cast< DBTaskData* >(object);
  (void)_this;
}
void DBTaskData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBTaskData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBTaskData& DBTaskData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBTaskData_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBTaskData::Clear() {
// @@protoc_insertion_point(message_clear_start:DBTaskData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasklist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBTaskData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DBTaskItem TaskList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasklist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBTaskData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBTaskData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DBTaskItem TaskList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasklist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tasklist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBTaskData)
  return target;
}

size_t DBTaskData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBTaskData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DBTaskItem TaskList = 1;
  total_size += 1UL * this->_internal_tasklist_size();
  for (const auto& msg : this->tasklist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBTaskData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBTaskData)
  GOOGLE_DCHECK_NE(&from, this);
  const DBTaskData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBTaskData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBTaskData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBTaskData)
    MergeFrom(*source);
  }
}

void DBTaskData::MergeFrom(const DBTaskData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBTaskData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasklist_.MergeFrom(from.tasklist_);
}

void DBTaskData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBTaskData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBTaskData::CopyFrom(const DBTaskData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBTaskData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBTaskData::IsInitialized() const {
  return true;
}

void DBTaskData::InternalSwap(DBTaskData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tasklist_.InternalSwap(&other->tasklist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBTaskData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBMailItem::InitAsDefaultInstance() {
}
class DBMailItem::_Internal {
 public:
};

DBMailItem::DBMailItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBMailItem)
}
DBMailItem::DBMailItem(const DBMailItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender().empty()) {
    sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sender(),
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title(),
      GetArena());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_content(),
      GetArena());
  }
  items_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_items().empty()) {
    items_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_items(),
      GetArena());
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:DBMailItem)
}

void DBMailItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBMailItem_Msg_5fLoginDBData_2eproto.base);
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  items_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(status_));
}

DBMailItem::~DBMailItem() {
  // @@protoc_insertion_point(destructor:DBMailItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBMailItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  items_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DBMailItem::ArenaDtor(void* object) {
  DBMailItem* _this = reinterpret_cast< DBMailItem* >(object);
  (void)_this;
}
void DBMailItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBMailItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBMailItem& DBMailItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBMailItem_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBMailItem::Clear() {
// @@protoc_insertion_point(message_clear_start:DBMailItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  items_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBMailItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 GroupID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 SenderID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          senderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Sender = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_sender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DBMailItem.Sender"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MailType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          mailtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Title = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DBMailItem.Title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Content = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DBMailItem.Content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Items = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_items();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBMailItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBMailItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // uint64 Guid = 2;
  if (this->guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_guid(), target);
  }

  // uint64 GroupID = 3;
  if (this->groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_groupid(), target);
  }

  // uint64 Time = 4;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_time(), target);
  }

  // uint64 SenderID = 5;
  if (this->senderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_senderid(), target);
  }

  // string Sender = 6;
  if (this->sender().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender().data(), static_cast<int>(this->_internal_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DBMailItem.Sender");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sender(), target);
  }

  // uint32 MailType = 7;
  if (this->mailtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_mailtype(), target);
  }

  // uint32 Status = 8;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_status(), target);
  }

  // string Title = 9;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DBMailItem.Title");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_title(), target);
  }

  // string Content = 10;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DBMailItem.Content");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_content(), target);
  }

  // bytes Items = 11;
  if (this->items().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_items(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBMailItem)
  return target;
}

size_t DBMailItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBMailItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Sender = 6;
  if (this->sender().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender());
  }

  // string Title = 9;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string Content = 10;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // bytes Items = 11;
  if (this->items().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_items());
  }

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint64 Guid = 2;
  if (this->guid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guid());
  }

  // uint64 GroupID = 3;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_groupid());
  }

  // uint64 Time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time());
  }

  // uint64 SenderID = 5;
  if (this->senderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_senderid());
  }

  // uint32 MailType = 7;
  if (this->mailtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mailtype());
  }

  // uint32 Status = 8;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBMailItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBMailItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DBMailItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBMailItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBMailItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBMailItem)
    MergeFrom(*source);
  }
}

void DBMailItem::MergeFrom(const DBMailItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBMailItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sender().size() > 0) {
    _internal_set_sender(from._internal_sender());
  }
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.items().size() > 0) {
    _internal_set_items(from._internal_items());
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.guid() != 0) {
    _internal_set_guid(from._internal_guid());
  }
  if (from.groupid() != 0) {
    _internal_set_groupid(from._internal_groupid());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.senderid() != 0) {
    _internal_set_senderid(from._internal_senderid());
  }
  if (from.mailtype() != 0) {
    _internal_set_mailtype(from._internal_mailtype());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void DBMailItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBMailItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBMailItem::CopyFrom(const DBMailItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBMailItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBMailItem::IsInitialized() const {
  return true;
}

void DBMailItem::InternalSwap(DBMailItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sender_.Swap(&other->sender_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  items_.Swap(&other->items_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBMailItem, status_)
      + sizeof(DBMailItem::status_)
      - PROTOBUF_FIELD_OFFSET(DBMailItem, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBMailItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBMailData::InitAsDefaultInstance() {
}
class DBMailData::_Internal {
 public:
};

DBMailData::DBMailData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  maillist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBMailData)
}
DBMailData::DBMailData(const DBMailData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      maillist_(from.maillist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DBMailData)
}

void DBMailData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBMailData_Msg_5fLoginDBData_2eproto.base);
}

DBMailData::~DBMailData() {
  // @@protoc_insertion_point(destructor:DBMailData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBMailData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBMailData::ArenaDtor(void* object) {
  DBMailData* _this = reinterpret_cast< DBMailData* >(object);
  (void)_this;
}
void DBMailData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBMailData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBMailData& DBMailData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBMailData_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBMailData::Clear() {
// @@protoc_insertion_point(message_clear_start:DBMailData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maillist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBMailData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DBMailItem MailList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_maillist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBMailData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBMailData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DBMailItem MailList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_maillist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_maillist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBMailData)
  return target;
}

size_t DBMailData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBMailData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DBMailItem MailList = 1;
  total_size += 1UL * this->_internal_maillist_size();
  for (const auto& msg : this->maillist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBMailData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBMailData)
  GOOGLE_DCHECK_NE(&from, this);
  const DBMailData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBMailData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBMailData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBMailData)
    MergeFrom(*source);
  }
}

void DBMailData::MergeFrom(const DBMailData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBMailData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  maillist_.MergeFrom(from.maillist_);
}

void DBMailData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBMailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBMailData::CopyFrom(const DBMailData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBMailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBMailData::IsInitialized() const {
  return true;
}

void DBMailData::InternalSwap(DBMailData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  maillist_.InternalSwap(&other->maillist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBMailData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBActivityItem::InitAsDefaultInstance() {
}
class DBActivityItem::_Internal {
 public:
};

DBActivityItem::DBActivityItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBActivityItem)
}
DBActivityItem::DBActivityItem(const DBActivityItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&datalen_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(datalen_));
  // @@protoc_insertion_point(copy_constructor:DBActivityItem)
}

void DBActivityItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBActivityItem_Msg_5fLoginDBData_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datalen_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(datalen_));
}

DBActivityItem::~DBActivityItem() {
  // @@protoc_insertion_point(destructor:DBActivityItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBActivityItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DBActivityItem::ArenaDtor(void* object) {
  DBActivityItem* _this = reinterpret_cast< DBActivityItem* >(object);
  (void)_this;
}
void DBActivityItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBActivityItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBActivityItem& DBActivityItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBActivityItem_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBActivityItem::Clear() {
// @@protoc_insertion_point(message_clear_start:DBActivityItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datalen_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(datalen_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBActivityItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ActivityID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          activityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ActivityType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          activitytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 JoinTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          jointime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 DataLen = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          datalen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBActivityItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBActivityItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // uint32 ActivityID = 2;
  if (this->activityid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_activityid(), target);
  }

  // uint32 ActivityType = 3;
  if (this->activitytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_activitytype(), target);
  }

  // uint32 JoinTime = 4;
  if (this->jointime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_jointime(), target);
  }

  // uint32 DataLen = 5;
  if (this->datalen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_datalen(), target);
  }

  // bytes Data = 6;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBActivityItem)
  return target;
}

size_t DBActivityItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBActivityItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Data = 6;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint32 ActivityID = 2;
  if (this->activityid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_activityid());
  }

  // uint32 ActivityType = 3;
  if (this->activitytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_activitytype());
  }

  // uint32 JoinTime = 4;
  if (this->jointime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_jointime());
  }

  // uint32 DataLen = 5;
  if (this->datalen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_datalen());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBActivityItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBActivityItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DBActivityItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBActivityItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBActivityItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBActivityItem)
    MergeFrom(*source);
  }
}

void DBActivityItem::MergeFrom(const DBActivityItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBActivityItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.activityid() != 0) {
    _internal_set_activityid(from._internal_activityid());
  }
  if (from.activitytype() != 0) {
    _internal_set_activitytype(from._internal_activitytype());
  }
  if (from.jointime() != 0) {
    _internal_set_jointime(from._internal_jointime());
  }
  if (from.datalen() != 0) {
    _internal_set_datalen(from._internal_datalen());
  }
}

void DBActivityItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBActivityItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBActivityItem::CopyFrom(const DBActivityItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBActivityItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBActivityItem::IsInitialized() const {
  return true;
}

void DBActivityItem::InternalSwap(DBActivityItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBActivityItem, datalen_)
      + sizeof(DBActivityItem::datalen_)
      - PROTOBUF_FIELD_OFFSET(DBActivityItem, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBActivityItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBActivityData::InitAsDefaultInstance() {
}
class DBActivityData::_Internal {
 public:
};

DBActivityData::DBActivityData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  activitylist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBActivityData)
}
DBActivityData::DBActivityData(const DBActivityData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      activitylist_(from.activitylist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DBActivityData)
}

void DBActivityData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBActivityData_Msg_5fLoginDBData_2eproto.base);
}

DBActivityData::~DBActivityData() {
  // @@protoc_insertion_point(destructor:DBActivityData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBActivityData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBActivityData::ArenaDtor(void* object) {
  DBActivityData* _this = reinterpret_cast< DBActivityData* >(object);
  (void)_this;
}
void DBActivityData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBActivityData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBActivityData& DBActivityData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBActivityData_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBActivityData::Clear() {
// @@protoc_insertion_point(message_clear_start:DBActivityData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activitylist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBActivityData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DBActivityItem ActivityList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activitylist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBActivityData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBActivityData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DBActivityItem ActivityList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_activitylist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_activitylist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBActivityData)
  return target;
}

size_t DBActivityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBActivityData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DBActivityItem ActivityList = 1;
  total_size += 1UL * this->_internal_activitylist_size();
  for (const auto& msg : this->activitylist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBActivityData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBActivityData)
  GOOGLE_DCHECK_NE(&from, this);
  const DBActivityData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBActivityData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBActivityData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBActivityData)
    MergeFrom(*source);
  }
}

void DBActivityData::MergeFrom(const DBActivityData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBActivityData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activitylist_.MergeFrom(from.activitylist_);
}

void DBActivityData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBActivityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBActivityData::CopyFrom(const DBActivityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBActivityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBActivityData::IsInitialized() const {
  return true;
}

void DBActivityData::InternalSwap(DBActivityData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  activitylist_.InternalSwap(&other->activitylist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBActivityData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBCounterItem::InitAsDefaultInstance() {
}
class DBCounterItem::_Internal {
 public:
};

DBCounterItem::DBCounterItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBCounterItem)
}
DBCounterItem::DBCounterItem(const DBCounterItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&param2_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(param2_));
  // @@protoc_insertion_point(copy_constructor:DBCounterItem)
}

void DBCounterItem::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param2_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(param2_));
}

DBCounterItem::~DBCounterItem() {
  // @@protoc_insertion_point(destructor:DBCounterItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBCounterItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBCounterItem::ArenaDtor(void* object) {
  DBCounterItem* _this = reinterpret_cast< DBCounterItem* >(object);
  (void)_this;
}
void DBCounterItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBCounterItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBCounterItem& DBCounterItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBCounterItem_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBCounterItem::Clear() {
// @@protoc_insertion_point(message_clear_start:DBCounterItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param2_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(param2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBCounterItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 CounterID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          counterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Param1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          param1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Param2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          param2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBCounterItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBCounterItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // uint32 CounterID = 2;
  if (this->counterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_counterid(), target);
  }

  // uint32 Index = 3;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_index(), target);
  }

  // int64 Value = 4;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_value(), target);
  }

  // uint64 Time = 5;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_time(), target);
  }

  // uint32 Param1 = 6;
  if (this->param1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_param1(), target);
  }

  // uint32 Param2 = 7;
  if (this->param2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_param2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBCounterItem)
  return target;
}

size_t DBCounterItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBCounterItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint32 CounterID = 2;
  if (this->counterid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_counterid());
  }

  // uint32 Index = 3;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  // int64 Value = 4;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  // uint64 Time = 5;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time());
  }

  // uint32 Param1 = 6;
  if (this->param1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_param1());
  }

  // uint32 Param2 = 7;
  if (this->param2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_param2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBCounterItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBCounterItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DBCounterItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBCounterItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBCounterItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBCounterItem)
    MergeFrom(*source);
  }
}

void DBCounterItem::MergeFrom(const DBCounterItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBCounterItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.counterid() != 0) {
    _internal_set_counterid(from._internal_counterid());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.param1() != 0) {
    _internal_set_param1(from._internal_param1());
  }
  if (from.param2() != 0) {
    _internal_set_param2(from._internal_param2());
  }
}

void DBCounterItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBCounterItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCounterItem::CopyFrom(const DBCounterItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBCounterItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCounterItem::IsInitialized() const {
  return true;
}

void DBCounterItem::InternalSwap(DBCounterItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBCounterItem, param2_)
      + sizeof(DBCounterItem::param2_)
      - PROTOBUF_FIELD_OFFSET(DBCounterItem, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBCounterItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBCounterData::InitAsDefaultInstance() {
}
class DBCounterData::_Internal {
 public:
};

DBCounterData::DBCounterData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  counterlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBCounterData)
}
DBCounterData::DBCounterData(const DBCounterData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      counterlist_(from.counterlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DBCounterData)
}

void DBCounterData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBCounterData_Msg_5fLoginDBData_2eproto.base);
}

DBCounterData::~DBCounterData() {
  // @@protoc_insertion_point(destructor:DBCounterData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBCounterData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBCounterData::ArenaDtor(void* object) {
  DBCounterData* _this = reinterpret_cast< DBCounterData* >(object);
  (void)_this;
}
void DBCounterData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBCounterData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBCounterData& DBCounterData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBCounterData_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBCounterData::Clear() {
// @@protoc_insertion_point(message_clear_start:DBCounterData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  counterlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBCounterData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DBCounterItem CounterList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_counterlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBCounterData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBCounterData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DBCounterItem CounterList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_counterlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_counterlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBCounterData)
  return target;
}

size_t DBCounterData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBCounterData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DBCounterItem CounterList = 1;
  total_size += 1UL * this->_internal_counterlist_size();
  for (const auto& msg : this->counterlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBCounterData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBCounterData)
  GOOGLE_DCHECK_NE(&from, this);
  const DBCounterData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBCounterData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBCounterData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBCounterData)
    MergeFrom(*source);
  }
}

void DBCounterData::MergeFrom(const DBCounterData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBCounterData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  counterlist_.MergeFrom(from.counterlist_);
}

void DBCounterData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBCounterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCounterData::CopyFrom(const DBCounterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBCounterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCounterData::IsInitialized() const {
  return true;
}

void DBCounterData::InternalSwap(DBCounterData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  counterlist_.InternalSwap(&other->counterlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBCounterData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBFriendItem::InitAsDefaultInstance() {
}
class DBFriendItem::_Internal {
 public:
};

DBFriendItem::DBFriendItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBFriendItem)
}
DBFriendItem::DBFriendItem(const DBFriendItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&friendid_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(friendid_));
  // @@protoc_insertion_point(copy_constructor:DBFriendItem)
}

void DBFriendItem::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&friendid_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(friendid_));
}

DBFriendItem::~DBFriendItem() {
  // @@protoc_insertion_point(destructor:DBFriendItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBFriendItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBFriendItem::ArenaDtor(void* object) {
  DBFriendItem* _this = reinterpret_cast< DBFriendItem* >(object);
  (void)_this;
}
void DBFriendItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBFriendItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBFriendItem& DBFriendItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBFriendItem_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBFriendItem::Clear() {
// @@protoc_insertion_point(message_clear_start:DBFriendItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&friendid_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(friendid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBFriendItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 FriendID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          friendid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBFriendItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBFriendItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // uint64 FriendID = 2;
  if (this->friendid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_friendid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBFriendItem)
  return target;
}

size_t DBFriendItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBFriendItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint64 FriendID = 2;
  if (this->friendid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_friendid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBFriendItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBFriendItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DBFriendItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBFriendItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBFriendItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBFriendItem)
    MergeFrom(*source);
  }
}

void DBFriendItem::MergeFrom(const DBFriendItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBFriendItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.friendid() != 0) {
    _internal_set_friendid(from._internal_friendid());
  }
}

void DBFriendItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBFriendItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBFriendItem::CopyFrom(const DBFriendItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBFriendItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBFriendItem::IsInitialized() const {
  return true;
}

void DBFriendItem::InternalSwap(DBFriendItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBFriendItem, friendid_)
      + sizeof(DBFriendItem::friendid_)
      - PROTOBUF_FIELD_OFFSET(DBFriendItem, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBFriendItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBFriendData::InitAsDefaultInstance() {
}
class DBFriendData::_Internal {
 public:
};

DBFriendData::DBFriendData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  friendlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBFriendData)
}
DBFriendData::DBFriendData(const DBFriendData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      friendlist_(from.friendlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DBFriendData)
}

void DBFriendData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBFriendData_Msg_5fLoginDBData_2eproto.base);
}

DBFriendData::~DBFriendData() {
  // @@protoc_insertion_point(destructor:DBFriendData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBFriendData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DBFriendData::ArenaDtor(void* object) {
  DBFriendData* _this = reinterpret_cast< DBFriendData* >(object);
  (void)_this;
}
void DBFriendData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBFriendData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBFriendData& DBFriendData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBFriendData_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBFriendData::Clear() {
// @@protoc_insertion_point(message_clear_start:DBFriendData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friendlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBFriendData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DBFriendItem FriendList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friendlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBFriendData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBFriendData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DBFriendItem FriendList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friendlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_friendlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBFriendData)
  return target;
}

size_t DBFriendData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBFriendData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DBFriendItem FriendList = 1;
  total_size += 1UL * this->_internal_friendlist_size();
  for (const auto& msg : this->friendlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBFriendData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBFriendData)
  GOOGLE_DCHECK_NE(&from, this);
  const DBFriendData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBFriendData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBFriendData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBFriendData)
    MergeFrom(*source);
  }
}

void DBFriendData::MergeFrom(const DBFriendData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBFriendData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friendlist_.MergeFrom(from.friendlist_);
}

void DBFriendData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBFriendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBFriendData::CopyFrom(const DBFriendData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBFriendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBFriendData::IsInitialized() const {
  return true;
}

void DBFriendData::InternalSwap(DBFriendData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  friendlist_.InternalSwap(&other->friendlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBFriendData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBRoleLoginAck::InitAsDefaultInstance() {
  ::_DBRoleLoginAck_default_instance_._instance.get_mutable()->roledata_ = const_cast< ::DBRoleData*>(
      ::DBRoleData::internal_default_instance());
  ::_DBRoleLoginAck_default_instance_._instance.get_mutable()->bagdata_ = const_cast< ::DBBagData*>(
      ::DBBagData::internal_default_instance());
  ::_DBRoleLoginAck_default_instance_._instance.get_mutable()->copydata_ = const_cast< ::DBCopyData*>(
      ::DBCopyData::internal_default_instance());
  ::_DBRoleLoginAck_default_instance_._instance.get_mutable()->equipdata_ = const_cast< ::DBEquipData*>(
      ::DBEquipData::internal_default_instance());
  ::_DBRoleLoginAck_default_instance_._instance.get_mutable()->gemdata_ = const_cast< ::DBGemData*>(
      ::DBGemData::internal_default_instance());
  ::_DBRoleLoginAck_default_instance_._instance.get_mutable()->petdata_ = const_cast< ::DBPetData*>(
      ::DBPetData::internal_default_instance());
  ::_DBRoleLoginAck_default_instance_._instance.get_mutable()->partnerdata_ = const_cast< ::DBPartnerData*>(
      ::DBPartnerData::internal_default_instance());
  ::_DBRoleLoginAck_default_instance_._instance.get_mutable()->taskdata_ = const_cast< ::DBTaskData*>(
      ::DBTaskData::internal_default_instance());
  ::_DBRoleLoginAck_default_instance_._instance.get_mutable()->maildata_ = const_cast< ::DBMailData*>(
      ::DBMailData::internal_default_instance());
  ::_DBRoleLoginAck_default_instance_._instance.get_mutable()->mountdata_ = const_cast< ::DBMountData*>(
      ::DBMountData::internal_default_instance());
  ::_DBRoleLoginAck_default_instance_._instance.get_mutable()->activitydata_ = const_cast< ::DBActivityData*>(
      ::DBActivityData::internal_default_instance());
  ::_DBRoleLoginAck_default_instance_._instance.get_mutable()->counterdata_ = const_cast< ::DBCounterData*>(
      ::DBCounterData::internal_default_instance());
  ::_DBRoleLoginAck_default_instance_._instance.get_mutable()->frienddata_ = const_cast< ::DBFriendData*>(
      ::DBFriendData::internal_default_instance());
  ::_DBRoleLoginAck_default_instance_._instance.get_mutable()->skilldata_ = const_cast< ::DBSkillData*>(
      ::DBSkillData::internal_default_instance());
}
class DBRoleLoginAck::_Internal {
 public:
  static const ::DBRoleData& roledata(const DBRoleLoginAck* msg);
  static const ::DBBagData& bagdata(const DBRoleLoginAck* msg);
  static const ::DBCopyData& copydata(const DBRoleLoginAck* msg);
  static const ::DBEquipData& equipdata(const DBRoleLoginAck* msg);
  static const ::DBGemData& gemdata(const DBRoleLoginAck* msg);
  static const ::DBPetData& petdata(const DBRoleLoginAck* msg);
  static const ::DBPartnerData& partnerdata(const DBRoleLoginAck* msg);
  static const ::DBTaskData& taskdata(const DBRoleLoginAck* msg);
  static const ::DBMailData& maildata(const DBRoleLoginAck* msg);
  static const ::DBMountData& mountdata(const DBRoleLoginAck* msg);
  static const ::DBActivityData& activitydata(const DBRoleLoginAck* msg);
  static const ::DBCounterData& counterdata(const DBRoleLoginAck* msg);
  static const ::DBFriendData& frienddata(const DBRoleLoginAck* msg);
  static const ::DBSkillData& skilldata(const DBRoleLoginAck* msg);
};

const ::DBRoleData&
DBRoleLoginAck::_Internal::roledata(const DBRoleLoginAck* msg) {
  return *msg->roledata_;
}
const ::DBBagData&
DBRoleLoginAck::_Internal::bagdata(const DBRoleLoginAck* msg) {
  return *msg->bagdata_;
}
const ::DBCopyData&
DBRoleLoginAck::_Internal::copydata(const DBRoleLoginAck* msg) {
  return *msg->copydata_;
}
const ::DBEquipData&
DBRoleLoginAck::_Internal::equipdata(const DBRoleLoginAck* msg) {
  return *msg->equipdata_;
}
const ::DBGemData&
DBRoleLoginAck::_Internal::gemdata(const DBRoleLoginAck* msg) {
  return *msg->gemdata_;
}
const ::DBPetData&
DBRoleLoginAck::_Internal::petdata(const DBRoleLoginAck* msg) {
  return *msg->petdata_;
}
const ::DBPartnerData&
DBRoleLoginAck::_Internal::partnerdata(const DBRoleLoginAck* msg) {
  return *msg->partnerdata_;
}
const ::DBTaskData&
DBRoleLoginAck::_Internal::taskdata(const DBRoleLoginAck* msg) {
  return *msg->taskdata_;
}
const ::DBMailData&
DBRoleLoginAck::_Internal::maildata(const DBRoleLoginAck* msg) {
  return *msg->maildata_;
}
const ::DBMountData&
DBRoleLoginAck::_Internal::mountdata(const DBRoleLoginAck* msg) {
  return *msg->mountdata_;
}
const ::DBActivityData&
DBRoleLoginAck::_Internal::activitydata(const DBRoleLoginAck* msg) {
  return *msg->activitydata_;
}
const ::DBCounterData&
DBRoleLoginAck::_Internal::counterdata(const DBRoleLoginAck* msg) {
  return *msg->counterdata_;
}
const ::DBFriendData&
DBRoleLoginAck::_Internal::frienddata(const DBRoleLoginAck* msg) {
  return *msg->frienddata_;
}
const ::DBSkillData&
DBRoleLoginAck::_Internal::skilldata(const DBRoleLoginAck* msg) {
  return *msg->skilldata_;
}
DBRoleLoginAck::DBRoleLoginAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DBRoleLoginAck)
}
DBRoleLoginAck::DBRoleLoginAck(const DBRoleLoginAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roledata()) {
    roledata_ = new ::DBRoleData(*from.roledata_);
  } else {
    roledata_ = nullptr;
  }
  if (from._internal_has_bagdata()) {
    bagdata_ = new ::DBBagData(*from.bagdata_);
  } else {
    bagdata_ = nullptr;
  }
  if (from._internal_has_copydata()) {
    copydata_ = new ::DBCopyData(*from.copydata_);
  } else {
    copydata_ = nullptr;
  }
  if (from._internal_has_equipdata()) {
    equipdata_ = new ::DBEquipData(*from.equipdata_);
  } else {
    equipdata_ = nullptr;
  }
  if (from._internal_has_gemdata()) {
    gemdata_ = new ::DBGemData(*from.gemdata_);
  } else {
    gemdata_ = nullptr;
  }
  if (from._internal_has_petdata()) {
    petdata_ = new ::DBPetData(*from.petdata_);
  } else {
    petdata_ = nullptr;
  }
  if (from._internal_has_partnerdata()) {
    partnerdata_ = new ::DBPartnerData(*from.partnerdata_);
  } else {
    partnerdata_ = nullptr;
  }
  if (from._internal_has_taskdata()) {
    taskdata_ = new ::DBTaskData(*from.taskdata_);
  } else {
    taskdata_ = nullptr;
  }
  if (from._internal_has_maildata()) {
    maildata_ = new ::DBMailData(*from.maildata_);
  } else {
    maildata_ = nullptr;
  }
  if (from._internal_has_mountdata()) {
    mountdata_ = new ::DBMountData(*from.mountdata_);
  } else {
    mountdata_ = nullptr;
  }
  if (from._internal_has_activitydata()) {
    activitydata_ = new ::DBActivityData(*from.activitydata_);
  } else {
    activitydata_ = nullptr;
  }
  if (from._internal_has_counterdata()) {
    counterdata_ = new ::DBCounterData(*from.counterdata_);
  } else {
    counterdata_ = nullptr;
  }
  if (from._internal_has_frienddata()) {
    frienddata_ = new ::DBFriendData(*from.frienddata_);
  } else {
    frienddata_ = nullptr;
  }
  if (from._internal_has_skilldata()) {
    skilldata_ = new ::DBSkillData(*from.skilldata_);
  } else {
    skilldata_ = nullptr;
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:DBRoleLoginAck)
}

void DBRoleLoginAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBRoleLoginAck_Msg_5fLoginDBData_2eproto.base);
  ::memset(&roledata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&roledata_)) + sizeof(retcode_));
}

DBRoleLoginAck::~DBRoleLoginAck() {
  // @@protoc_insertion_point(destructor:DBRoleLoginAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DBRoleLoginAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete roledata_;
  if (this != internal_default_instance()) delete bagdata_;
  if (this != internal_default_instance()) delete copydata_;
  if (this != internal_default_instance()) delete equipdata_;
  if (this != internal_default_instance()) delete gemdata_;
  if (this != internal_default_instance()) delete petdata_;
  if (this != internal_default_instance()) delete partnerdata_;
  if (this != internal_default_instance()) delete taskdata_;
  if (this != internal_default_instance()) delete maildata_;
  if (this != internal_default_instance()) delete mountdata_;
  if (this != internal_default_instance()) delete activitydata_;
  if (this != internal_default_instance()) delete counterdata_;
  if (this != internal_default_instance()) delete frienddata_;
  if (this != internal_default_instance()) delete skilldata_;
}

void DBRoleLoginAck::ArenaDtor(void* object) {
  DBRoleLoginAck* _this = reinterpret_cast< DBRoleLoginAck* >(object);
  (void)_this;
}
void DBRoleLoginAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBRoleLoginAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBRoleLoginAck& DBRoleLoginAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBRoleLoginAck_Msg_5fLoginDBData_2eproto.base);
  return *internal_default_instance();
}


void DBRoleLoginAck::Clear() {
// @@protoc_insertion_point(message_clear_start:DBRoleLoginAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && roledata_ != nullptr) {
    delete roledata_;
  }
  roledata_ = nullptr;
  if (GetArena() == nullptr && bagdata_ != nullptr) {
    delete bagdata_;
  }
  bagdata_ = nullptr;
  if (GetArena() == nullptr && copydata_ != nullptr) {
    delete copydata_;
  }
  copydata_ = nullptr;
  if (GetArena() == nullptr && equipdata_ != nullptr) {
    delete equipdata_;
  }
  equipdata_ = nullptr;
  if (GetArena() == nullptr && gemdata_ != nullptr) {
    delete gemdata_;
  }
  gemdata_ = nullptr;
  if (GetArena() == nullptr && petdata_ != nullptr) {
    delete petdata_;
  }
  petdata_ = nullptr;
  if (GetArena() == nullptr && partnerdata_ != nullptr) {
    delete partnerdata_;
  }
  partnerdata_ = nullptr;
  if (GetArena() == nullptr && taskdata_ != nullptr) {
    delete taskdata_;
  }
  taskdata_ = nullptr;
  if (GetArena() == nullptr && maildata_ != nullptr) {
    delete maildata_;
  }
  maildata_ = nullptr;
  if (GetArena() == nullptr && mountdata_ != nullptr) {
    delete mountdata_;
  }
  mountdata_ = nullptr;
  if (GetArena() == nullptr && activitydata_ != nullptr) {
    delete activitydata_;
  }
  activitydata_ = nullptr;
  if (GetArena() == nullptr && counterdata_ != nullptr) {
    delete counterdata_;
  }
  counterdata_ = nullptr;
  if (GetArena() == nullptr && frienddata_ != nullptr) {
    delete frienddata_;
  }
  frienddata_ = nullptr;
  if (GetArena() == nullptr && skilldata_ != nullptr) {
    delete skilldata_;
  }
  skilldata_ = nullptr;
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(retcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBRoleLoginAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 RoleID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DBRoleData RoleData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_roledata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DBBagData BagData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bagdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DBCopyData CopyData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_copydata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DBEquipData EquipData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_equipdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DBGemData GemData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_gemdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DBPetData PetData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_petdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DBPartnerData PartnerData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_partnerdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DBTaskData TaskData = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_taskdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DBMailData MailData = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_maildata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DBMountData MountData = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_mountdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DBActivityData ActivityData = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_activitydata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DBCounterData CounterData = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_counterdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DBFriendData FriendData = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_frienddata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DBSkillData SkillData = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_skilldata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBRoleLoginAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBRoleLoginAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // uint64 RoleID = 2;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roleid(), target);
  }

  // .DBRoleData RoleData = 3;
  if (this->has_roledata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::roledata(this), target, stream);
  }

  // .DBBagData BagData = 4;
  if (this->has_bagdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bagdata(this), target, stream);
  }

  // .DBCopyData CopyData = 5;
  if (this->has_copydata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::copydata(this), target, stream);
  }

  // .DBEquipData EquipData = 6;
  if (this->has_equipdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::equipdata(this), target, stream);
  }

  // .DBGemData GemData = 7;
  if (this->has_gemdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::gemdata(this), target, stream);
  }

  // .DBPetData PetData = 8;
  if (this->has_petdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::petdata(this), target, stream);
  }

  // .DBPartnerData PartnerData = 9;
  if (this->has_partnerdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::partnerdata(this), target, stream);
  }

  // .DBTaskData TaskData = 10;
  if (this->has_taskdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::taskdata(this), target, stream);
  }

  // .DBMailData MailData = 11;
  if (this->has_maildata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::maildata(this), target, stream);
  }

  // .DBMountData MountData = 12;
  if (this->has_mountdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::mountdata(this), target, stream);
  }

  // .DBActivityData ActivityData = 13;
  if (this->has_activitydata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::activitydata(this), target, stream);
  }

  // .DBCounterData CounterData = 14;
  if (this->has_counterdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::counterdata(this), target, stream);
  }

  // .DBFriendData FriendData = 15;
  if (this->has_frienddata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::frienddata(this), target, stream);
  }

  // .DBSkillData SkillData = 16;
  if (this->has_skilldata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::skilldata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBRoleLoginAck)
  return target;
}

size_t DBRoleLoginAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBRoleLoginAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DBRoleData RoleData = 3;
  if (this->has_roledata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roledata_);
  }

  // .DBBagData BagData = 4;
  if (this->has_bagdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bagdata_);
  }

  // .DBCopyData CopyData = 5;
  if (this->has_copydata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *copydata_);
  }

  // .DBEquipData EquipData = 6;
  if (this->has_equipdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *equipdata_);
  }

  // .DBGemData GemData = 7;
  if (this->has_gemdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gemdata_);
  }

  // .DBPetData PetData = 8;
  if (this->has_petdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *petdata_);
  }

  // .DBPartnerData PartnerData = 9;
  if (this->has_partnerdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *partnerdata_);
  }

  // .DBTaskData TaskData = 10;
  if (this->has_taskdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *taskdata_);
  }

  // .DBMailData MailData = 11;
  if (this->has_maildata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maildata_);
  }

  // .DBMountData MountData = 12;
  if (this->has_mountdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mountdata_);
  }

  // .DBActivityData ActivityData = 13;
  if (this->has_activitydata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activitydata_);
  }

  // .DBCounterData CounterData = 14;
  if (this->has_counterdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *counterdata_);
  }

  // .DBFriendData FriendData = 15;
  if (this->has_frienddata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frienddata_);
  }

  // .DBSkillData SkillData = 16;
  if (this->has_skilldata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *skilldata_);
  }

  // uint64 RoleID = 2;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_roleid());
  }

  // uint32 RetCode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBRoleLoginAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DBRoleLoginAck)
  GOOGLE_DCHECK_NE(&from, this);
  const DBRoleLoginAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBRoleLoginAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DBRoleLoginAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DBRoleLoginAck)
    MergeFrom(*source);
  }
}

void DBRoleLoginAck::MergeFrom(const DBRoleLoginAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBRoleLoginAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_roledata()) {
    _internal_mutable_roledata()->::DBRoleData::MergeFrom(from._internal_roledata());
  }
  if (from.has_bagdata()) {
    _internal_mutable_bagdata()->::DBBagData::MergeFrom(from._internal_bagdata());
  }
  if (from.has_copydata()) {
    _internal_mutable_copydata()->::DBCopyData::MergeFrom(from._internal_copydata());
  }
  if (from.has_equipdata()) {
    _internal_mutable_equipdata()->::DBEquipData::MergeFrom(from._internal_equipdata());
  }
  if (from.has_gemdata()) {
    _internal_mutable_gemdata()->::DBGemData::MergeFrom(from._internal_gemdata());
  }
  if (from.has_petdata()) {
    _internal_mutable_petdata()->::DBPetData::MergeFrom(from._internal_petdata());
  }
  if (from.has_partnerdata()) {
    _internal_mutable_partnerdata()->::DBPartnerData::MergeFrom(from._internal_partnerdata());
  }
  if (from.has_taskdata()) {
    _internal_mutable_taskdata()->::DBTaskData::MergeFrom(from._internal_taskdata());
  }
  if (from.has_maildata()) {
    _internal_mutable_maildata()->::DBMailData::MergeFrom(from._internal_maildata());
  }
  if (from.has_mountdata()) {
    _internal_mutable_mountdata()->::DBMountData::MergeFrom(from._internal_mountdata());
  }
  if (from.has_activitydata()) {
    _internal_mutable_activitydata()->::DBActivityData::MergeFrom(from._internal_activitydata());
  }
  if (from.has_counterdata()) {
    _internal_mutable_counterdata()->::DBCounterData::MergeFrom(from._internal_counterdata());
  }
  if (from.has_frienddata()) {
    _internal_mutable_frienddata()->::DBFriendData::MergeFrom(from._internal_frienddata());
  }
  if (from.has_skilldata()) {
    _internal_mutable_skilldata()->::DBSkillData::MergeFrom(from._internal_skilldata());
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.retcode() != 0) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void DBRoleLoginAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DBRoleLoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBRoleLoginAck::CopyFrom(const DBRoleLoginAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBRoleLoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBRoleLoginAck::IsInitialized() const {
  return true;
}

void DBRoleLoginAck::InternalSwap(DBRoleLoginAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBRoleLoginAck, retcode_)
      + sizeof(DBRoleLoginAck::retcode_)
      - PROTOBUF_FIELD_OFFSET(DBRoleLoginAck, roledata_)>(
          reinterpret_cast<char*>(&roledata_),
          reinterpret_cast<char*>(&other->roledata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBRoleLoginAck::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DBRoleData* Arena::CreateMaybeMessage< ::DBRoleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBRoleData >(arena);
}
template<> PROTOBUF_NOINLINE ::DBBagItem* Arena::CreateMaybeMessage< ::DBBagItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBBagItem >(arena);
}
template<> PROTOBUF_NOINLINE ::DBBagData* Arena::CreateMaybeMessage< ::DBBagData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBBagData >(arena);
}
template<> PROTOBUF_NOINLINE ::DBCopyItem* Arena::CreateMaybeMessage< ::DBCopyItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBCopyItem >(arena);
}
template<> PROTOBUF_NOINLINE ::DBChapterItem* Arena::CreateMaybeMessage< ::DBChapterItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBChapterItem >(arena);
}
template<> PROTOBUF_NOINLINE ::DBCopyData* Arena::CreateMaybeMessage< ::DBCopyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBCopyData >(arena);
}
template<> PROTOBUF_NOINLINE ::DBEquipItem* Arena::CreateMaybeMessage< ::DBEquipItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBEquipItem >(arena);
}
template<> PROTOBUF_NOINLINE ::DBEquipData* Arena::CreateMaybeMessage< ::DBEquipData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBEquipData >(arena);
}
template<> PROTOBUF_NOINLINE ::DBGemItem* Arena::CreateMaybeMessage< ::DBGemItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBGemItem >(arena);
}
template<> PROTOBUF_NOINLINE ::DBGemData* Arena::CreateMaybeMessage< ::DBGemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBGemData >(arena);
}
template<> PROTOBUF_NOINLINE ::DBSkillItem* Arena::CreateMaybeMessage< ::DBSkillItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBSkillItem >(arena);
}
template<> PROTOBUF_NOINLINE ::DBSkillData* Arena::CreateMaybeMessage< ::DBSkillData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBSkillData >(arena);
}
template<> PROTOBUF_NOINLINE ::DBPetItem* Arena::CreateMaybeMessage< ::DBPetItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBPetItem >(arena);
}
template<> PROTOBUF_NOINLINE ::DBPetData* Arena::CreateMaybeMessage< ::DBPetData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBPetData >(arena);
}
template<> PROTOBUF_NOINLINE ::DBMountItem* Arena::CreateMaybeMessage< ::DBMountItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBMountItem >(arena);
}
template<> PROTOBUF_NOINLINE ::DBMountData* Arena::CreateMaybeMessage< ::DBMountData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBMountData >(arena);
}
template<> PROTOBUF_NOINLINE ::DBPartnerItem* Arena::CreateMaybeMessage< ::DBPartnerItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBPartnerItem >(arena);
}
template<> PROTOBUF_NOINLINE ::DBPartnerData* Arena::CreateMaybeMessage< ::DBPartnerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBPartnerData >(arena);
}
template<> PROTOBUF_NOINLINE ::DBTaskItem* Arena::CreateMaybeMessage< ::DBTaskItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBTaskItem >(arena);
}
template<> PROTOBUF_NOINLINE ::DBTaskData* Arena::CreateMaybeMessage< ::DBTaskData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBTaskData >(arena);
}
template<> PROTOBUF_NOINLINE ::DBMailItem* Arena::CreateMaybeMessage< ::DBMailItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBMailItem >(arena);
}
template<> PROTOBUF_NOINLINE ::DBMailData* Arena::CreateMaybeMessage< ::DBMailData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBMailData >(arena);
}
template<> PROTOBUF_NOINLINE ::DBActivityItem* Arena::CreateMaybeMessage< ::DBActivityItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBActivityItem >(arena);
}
template<> PROTOBUF_NOINLINE ::DBActivityData* Arena::CreateMaybeMessage< ::DBActivityData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBActivityData >(arena);
}
template<> PROTOBUF_NOINLINE ::DBCounterItem* Arena::CreateMaybeMessage< ::DBCounterItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBCounterItem >(arena);
}
template<> PROTOBUF_NOINLINE ::DBCounterData* Arena::CreateMaybeMessage< ::DBCounterData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBCounterData >(arena);
}
template<> PROTOBUF_NOINLINE ::DBFriendItem* Arena::CreateMaybeMessage< ::DBFriendItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBFriendItem >(arena);
}
template<> PROTOBUF_NOINLINE ::DBFriendData* Arena::CreateMaybeMessage< ::DBFriendData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBFriendData >(arena);
}
template<> PROTOBUF_NOINLINE ::DBRoleLoginAck* Arena::CreateMaybeMessage< ::DBRoleLoginAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBRoleLoginAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
